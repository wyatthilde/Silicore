<?php

/* * *****************************************************************************************************************************************
 * File Name: gb_qcfunctions.php
 * Project: Silicore
 * Description: This file contains functions for processing QC tasks.
 * Notes:
 * =========================================================================================================================================
 * Change Log ([MM/DD/YYYY]|[Developer]|[Task Ticket] - [Description]
 * =========================================================================================================================================
 * 0?/0?/2017|mnutsch|KACE:? - Initial creation
 * 06/30/2017|mnutsch|KACE:17366 - Added new functions
 * 07/03/2017|mnutsch|KACE:17366 - Added new functions
 * 07/03/2017|mnutsch|KACE:17366 - Added new functions used by the the QC Performance page.
 * 07/05/2017|mnutsch|KACE:17366 - Added new functions used by the the QC Performance page.
 * 07/06/2017|mnutsch|KACE:17366 - Added new functions used by the the QC Performance page.
 * 07/10/2017|mnutsch|KACE:17366 - Corrected error in the get30DayPercentAverages() function. Added 2 functions. Edited other content.
 * 07/11/2017|mnutsch|KACE:17366 - Continued development.
 * 07/13/2017|mnutsch|KACE:17366 - Added new functions related to dynamically displaying select boxes based on previous options.
 * 07/14/2017|mnutsch|KACE:17366 - Added new functions
 * 07/17/2017|mnutsch|KACE:17366 - Updated several functions to use additional fields from the database.
 * 07/18/2017|mnutsch|KACE:17366 - Updated a function to use additional fields from the database.
 * 07/21/2017|mnutsch|KACE:17366 - Corrected a bug in the get30DayPercentMin() function.
 * 07/25/2017|mnutsch|KACE:17366 - Debugged error messages when using imported data.
 * 07/26/2017|mnutsch|KACE:17366 - Debugged error messages when using imported data.
 * 07/26/2017|mnutsch|KACE:17366 - Modified date range percent functions.
 * 08/01/2017|mnutsch:KACE:17717 - Added the function getSieveStacksBySiteID().
 * 08/01/2017|mnutsch:KACE:17693 - Added Limit to SQL queries in to improve performance and prevent out of memory errors.
 * 08/02/2017|mnutsch:KACE:17693 - Reverted Limits after finding that they caused errors in graphs.
 * 08/02/2017|mnutsch:KACE:17693 - Created a function for accessing PLC device info.
 * 08/04/2017|mnutsch:KACE:17803 - Created a function for accessing samples in a date range that are voided, updated several SQL queries.
 * 08/08/2017|mnutsch:KACE:17803 - Created a new function for use in getting groups of samples.
 * 08/09/2017|mnutsch:KACE:17803 - Made changes to numerous functions.
 * 08/15/2017|mnutsch:KACE:17978 - Modified function getSampleById().
 * 08/16/2017|mnutsch|KACE:17957 - Added code to handle blank fields.
 * 08/18/2017|mnutsch|KACE:17957 - Added a function to read a site by ID.
 * 08/18/2017|mnutsch|KACE:17957 - Added fields to the function getSamplesInDateRangeIncludeVoided();
 * 08/23/2017|mnutsch|KACE:17957 - Update the design of the function insertFinalPercentages() to include additional sieve fields.
 * 08/24/2017|mnutsch|KACE:17957 - Updated the function updateFinalPercentages() to include additional sieve fields.
 * 08/28/2017|mnutsch|KACE:17957 - Made modifications to getSamplesInDateRangeIncludeVoided(); to include a starting value and range for pagination on Samples.php.
 * 08/29/2017|mnutsch|KACE:17957 - Made modifications to several functions.
 * 08/31/2017|mnutsch|KACE:17957 - Updated functions the get Sites.
 * 09/15/2017|mnutsch|KACE:17957 - Added the function reverseSampleVoid().
 * 09/27/2017|mnutsch|KACE:17957 - Added the function getSpecificLocations().
 * 10/03/2017|mnutsch|KACE:17957 - Added the function getMostRecentSampleBySpecificLocation(), getDateRangePercentAveragesBySpecificLocation().
 * 10/05/2017|mnutsch|KACE:17957 - Added stored procedure calls.
 * 10/06/2017|mnutsch|KACE:17957 - Added stored procedure calls.
 * 10/09/2017|mnutsch|KACE:17957 - Added stored procedure calls. Various updates to functions.
 * 10/10/2017|mnutsch|KACE:17957 - Added stored procedure calls.
 * 10/16/2017|mnutsch|KACE:19083 - Updated stored procedure calls in the getSamplers() and getOperators() functions.
 * 10/27/2017|mnutsch|KACE:19257 - Edited 8 functions related to sieve ranges on the QC Overview page.
 * 10/31/2017|mnutsch|KACE:18789 - Added a function for getting samples with a wide variety of filters.
 * 11/15/2017|mnutsch:KACE:18470 - Modified the functions getSamplesByFilters(), getSampleById(), and updateSample().
 * 11/30/2017|mnutsch|KACE:18968 - Added the function checkSampleCompletionByPlantAndDatetime().
 * 12/06/2017|mnutsch|KACE:18968 - Added a database field to the function getLocationById().
 * 12/27/2017|mnutsch|KACE:20065 - Updated the error message text of connectToMySQLQC().
 * 01/03/2018|mnutsch|KACE:20163 - Added pagevariables globals to connectToMySQLQC().
 * 01/08/2018|mnutsch|KACE:19775 - Added the functions getObjectArrayPercentAverages(), getObjectArrayPercentMaximums(), and getObjectArrayPercentMinimums.
 * 01/09/2018|mnutsch|KACE:19775 - Added the function getObjectArrayPercentStdDevs().
 * 01/11/2018|mnutsch|KACE:19775 - Updated the mathematical formula used in getObjectArrayPercentStdDevs().
 * 01/15/2018|mnutsch|KACE:20340 - Updated the function getPlants() to use an associative array.
 * 01/16/2018|mnutsch|KACE:18518 - Performed code cleanup (removed deprecated functions and converted index arrays to associative arrays)
 * 01/18/2018|mnutsch|KACE:18518 - Updated functions to use associative arrays.
 * 01/19/2018|mnutsch|KACE:18518 - Cleaned up code. Updated functions to use associative arrays.
 * 01/22/2018|mnutsch|KACE:18518 - Added code to call new stored procedures.
 * 01/23/2018|mnutsch|KACE:18518 - Added code to call new stored procedures.
 * 01/24/2018|mnutsch|KACE:18518 - Added code to call new stored procedures.
 * 01/26/2018|mnutsch|KACE:20305 - Added Near Size field to the updateSample() function.
 * 01/30/2018|mnutsch|KACE:18968 - Added new functions related to sample groups.
 * 02/06/2018|mnutsch|KACE:20777 - Fixed a bug related to the formatting of time.
 * 02/12/2018|mnutsch|KACE:20683 - Updated the functions performanceCyclesGet() and performanceCyclesGetByLabTech().
 * 02/13/2018|mnutsch|KACE:20683 - Fixed a bug in the functions performanceCyclesGet() and performanceCyclesGetByLabTech().
 * 02/14/2018|mnutsch|KACE:20409 - Added additional error message content for the updateSample() error message.
 *
 * **************************************************************************************************************************************** */

//==================================================================== BEGIN PHP

//Set Debugging Options
$debugging = 0; //set this to 1 to see debugging output

$t=time(); //variable used for obtaining the current time
$errorMessage = ""; //used in error message emails

//display information if we are in debugging mode
if($debugging)
{
    echo "The current Linux user is: ";
    echo exec('whoami');
    echo "<br/>";
    error_reporting(E_ALL);
    ini_set('display_errors', TRUE);
    ini_set('display_startup_errors', TRUE);
    echo "<strong>Debugging Enabled - qcfunctions.php</strong><br/>";
    echo "Start time: ";
    echo(date("Y-m-d H:i:s",$t));
    echo "<br/>";
}

//include other files
require_once('../../Includes/rootInfo.php');
require_once(__ROOT__ . '/configuration/db-mysql-sandbox.php'); //contains database connection info
require_once('../../Includes/emailfunctions.php'); //contains database connection info

/*******************************************************************************
 * Function Name: connectToMySQLQC()
 * Description:
 * This function will:
 * Connect to MySQL.
 * The connection information should be stored as constants, defined in an included file.
 * The connection will be stored in a global variable called $GLOBALS['conn'];
 * The function will return 1 if the connection was made and 0 if not.
 *******************************************************************************/
function connectToMySQLQC()
{
    $errorMessage = "Page: QC functionality - connectToMySQLQC() - ";

    global $PageName;
    global $FullPath;

    try
    {
        $mySQLConnection = 0; //used to track if the database is connected.

        $mysql_dbname = SANDBOX_DB_DBNAME001; //sandbox
        $mysql_username = SANDBOX_DB_USER;
        $mysql_pw = SANDBOX_DB_PWD;
        $mysql_hostname = SANDBOX_DB_HOST;

        // Create connection
        $mySQLConnection = new mysqli($mysql_hostname, $mysql_username, $mysql_pw, $mysql_dbname);

        // Check connection
        if ($mySQLConnection->connect_error)
        {
            $errorMessage = $errorMessage . "Error connecting to the MySQL database";
            $errorMessage = $errorMessage . " \nPageName == " . $PageName . " \nFullPath == " . $FullPath;

            sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
            if($debugging == 1)
            {
                echo $errorMessage;
            }
            //echo "Error connecting to MySQL: <br>" . $mySQLConnection->error;

            return 0;
        }
        else
        {
            return $mySQLConnection;
        }
    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error connecting to the MySQL database";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
        return 0;
    }
}


/*******************************************************************************
 * Function Name: disconnectFromMySQLQC()
 * Description:
 * This function will:
 * Disconnect from MySQL.
 *******************************************************************************/
function disconnectFromMySQLQC($mySQLConnection)
{
    $errorMessage = "Page: QC functionality";
    try
    {
        $mySQLConnection->close();
    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error disconnecting to the MySQL database.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }
}


//function to get a list of sites
/*******************************************************************************
 * Function Name: getSites()
 * Description:
 * This function will:
 * Returns an array of objects containing site information.
 *******************************************************************************/
function getSites()
{
    $errorMessage = "qcfunctions.php - getSites() ";
    $arrayOfSites = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        $result = $mySQLConnectionLocal->query("CALL sp_GetSites();"); //stored procedure method

        $outputCount = 0;
        while($row = $result->fetch_assoc())
        {
            $arrayOfSites[$outputCount]->vars["id"] = $row['id'];
            $arrayOfSites[$outputCount]->vars["description"] = $row['description'];
            $arrayOfSites[$outputCount]->vars["is_vista_site"] = $row['is_vista_site'];
            $arrayOfSites[$outputCount]->vars["is_qc_samples_site"] = $row['is_qc_samples_site'];
            $arrayOfSites[$outputCount]->vars["local_network"] = $row['local_network'];
            $arrayOfSites[$outputCount]->vars["sort_order"] = $row['sort_order'];
            $arrayOfSites[$outputCount]->vars["is_active"] = $row['is_active'];

            $outputCount++;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a list of sites.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $arrayOfSites;
}


//function to get a list of plants
/*******************************************************************************
 * Function Name: getPlants()
 * Description:
 * This function will:
 * Returns an array of objects containing plant information.
 *******************************************************************************/
function getPlants()
{
    $errorMessage = "qcfunctions.php - getPlants() ";
    $arrayOfPlants = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        $sql = "CALL sp_GetPlants();";
        $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        $outputCount = 0;
        while($row = $result->fetch_assoc())
        {
            $arrayOfPlants[$outputCount]->vars["id"] = $row['id'];
            $arrayOfPlants[$outputCount]->vars["site"] = $row['main_site_id'];
            $arrayOfPlants[$outputCount]->vars["name"] = $row['name'];
            $arrayOfPlants[$outputCount]->vars["description"] = $row['description'];
            $arrayOfPlants[$outputCount]->vars["sort_order"] = $row['sort_order'];
            $arrayOfPlants[$outputCount]->vars["tceq_max_tpy"] = $row['tceq_max_tpy'];
            $arrayOfPlants[$outputCount]->vars["tceq_max_tph"] = $row['tceq_max_tph'];
            $arrayOfPlants[$outputCount]->vars["tceq_max_upy"] = $row['tceq_max_upy'];
            $arrayOfPlants[$outputCount]->vars["tceq_moisture_rate"] = $row['tceq_moisture_rate'];
            $arrayOfPlants[$outputCount]->vars["tceq_description"] = $row['tceq_description'];
            $arrayOfPlants[$outputCount]->vars["tceq_notes"] = $row['tceq_notes'];
            $arrayOfPlants[$outputCount]->vars["tceq_sort_order"] = $row['tceq_sort_order'];
            $arrayOfPlants[$outputCount]->vars["is_active"] = $row['is_active'];

            $outputCount++;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a list of plants.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $arrayOfPlants;
}


//function to get a list of locations
/*******************************************************************************
 * Function Name: getLocations()
 * Description:
 * This function will:
 * Returns an array of objects containing location information.
 *******************************************************************************/
function getLocations()
{
    $errorMessage = "qcfunctions.php - getLocations() ";
    $arrayOfLocations = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM gb_qc_locations"; //direct SQL method
        //$result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        $result = $mySQLConnectionLocal->query("CALL sp_gb_qc_LocationsGet();"); //stored procedure method

        $outputCount = 0;
        while($row = $result->fetch_assoc())
        {
            $arrayOfLocations[$outputCount]->vars["id"] = $row['id'];
            $arrayOfLocations[$outputCount]->vars["description"] = $row['description'];
            $arrayOfLocations[$outputCount]->vars["site"] = $row['main_site_id'];
            $arrayOfLocations[$outputCount]->vars["plant"] = $row['main_plant_id'];
            $arrayOfLocations[$outputCount]->vars["main_product_id"] = $row['main_product_id'];
            $arrayOfLocations[$outputCount]->vars["type_code"] = $row['type_code'];
            $arrayOfLocations[$outputCount]->vars["is_split_sample_only"] = $row['is_split_sample_only'];
            $arrayOfLocations[$outputCount]->vars["email_list_id"] = $row['email_list_id'];
            $arrayOfLocations[$outputCount]->vars["is_send_email"] = $row['is_send_email'];
            $arrayOfLocations[$outputCount]->vars["sort_order"] = $row['sort_order'];
            $arrayOfLocations[$outputCount]->vars["is_active"] = $row['is_active'];
            $arrayOfLocations[$outputCount]->vars["send_completion_message"] = $row['send_completion_message'];

            $outputCount++;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a list of locations.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $arrayOfLocations;
}


//function to get test types
/*******************************************************************************
 * Function Name: getTestTypes()
 * Description:
 * This function will:
 * Returns an array of objects containing test type information.
 *******************************************************************************/
function getTestTypes()
{
    $errorMessage = "qcfunctions.php - getTestTypes() ";
    $arrayOfTestTypes = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM gb_qc_test_types"; //direct SQL method
        //$result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        $result = $mySQLConnectionLocal->query("CALL sp_gb_qc_TestTypesGet();"); //stored procedure method

        $outputCount = 0;
        while($row = $result->fetch_assoc())
        {
            $arrayOfTestTypes[$outputCount]->vars["id"] = $row['id'];
            $arrayOfTestTypes[$outputCount]->vars["description"] = $row['description'];
            $outputCount++;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a list of test types.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $arrayOfTestTypes;
}


//function to get composite types
/*******************************************************************************
 * Function Name: getCompositeTypes()
 * Description:
 * This function will:
 * Returns an array of objects containing composite type information.
 *******************************************************************************/
function getCompositeTypes()
{
    $errorMessage = "qcfunctions.php - getCompositeTypes() ";
    $arrayOfTestTypes = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM gb_qc_composites"; //direct SQL method
        //$result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        $result = $mySQLConnectionLocal->query("CALL sp_gb_qc_CompositeTypesGet();"); //stored procedure method

        $outputCount = 0;
        while($row = $result->fetch_assoc())
        {
            $arrayOfCompositeTypes[$outputCount]->vars["id"] = $row['id'];
            $arrayOfCompositeTypes[$outputCount]->vars["description"] = $row['description'];

            $outputCount++;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a list of composite types.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $arrayOfCompositeTypes;
}


//function to get sieve stacks
/*******************************************************************************
 * Function Name: getSieveStacks()
 * Description:
 * This function will:
 * Returns an array of objects containing sieve stack information.
 * DEV NOTE 8-1-2017: This function is deprecated and is no longer used. See getSieveStacksBySiteID().
 *******************************************************************************/
function getSieveStacks()
{
    $errorMessage = "qcfunctions.php - getSieveStacks() ";
    $arrayOfSieveStacks = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM gb_qc_sieve_stacks"; //direct SQL method
        //$result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        $result = $mySQLConnectionLocal->query("CALL sp_gb_qc_SieveStacksGet();"); //stored procedure method

        $outputCount = 0;
        while($row = $result->fetch_assoc())
        {
            $arrayOfSieveStacks[$outputCount]->vars["id"] = $row['id'];
            $arrayOfSieveStacks[$outputCount]->vars["description"] = $row['description'];
            $arrayOfSieveStacks[$outputCount]->vars["mainSiteId"] = $row['main_site_id'];
            $arrayOfSieveStacks[$outputCount]->vars["sortOrder"] = $row['sort_order'];
            $arrayOfSieveStacks[$outputCount]->vars["isActive"] = $row['is_active'];
            $arrayOfSieveStacks[$outputCount]->vars["isCamsizer"] = $row['is_camsizer'];

            $outputCount++;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a list of sieve stacks.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $arrayOfSieveStacks;
}


/*******************************************************************************
 * Function Name: getSieveStacksBySiteID($siteID)
 * Description:
 * This function will:
 * Returns an array of objects containing sieve stack information.
 *******************************************************************************/
function getSieveStacksBySiteID($siteID)
{
    $errorMessage = "qcfunctions.php - getSieveStacksBySiteID() ";
    $arrayOfSieveStacks = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM gb_qc_sieve_stacks WHERE main_site_id = '" . $siteID . "' AND is_active = '1'"; //direct SQL method
        //$result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        $sql = "CALL sp_gb_qc_SieveStacksGetBySiteID('$siteID');"; //stored procedure method
        $result = $mySQLConnectionLocal->query($sql); //stored procedure method

        $outputCount = 0;
        if($result != NULL)
        {
            while($row = $result->fetch_assoc())
            {
                $arrayOfSieveStacks[$outputCount]->vars["id"] = $row['id'];
                $arrayOfSieveStacks[$outputCount]->vars["description"] = $row['description'];
                $arrayOfSieveStacks[$outputCount]->vars["mainSiteId"] = $row['main_site_id'];
                $arrayOfSieveStacks[$outputCount]->vars["sortOrder"] = $row['sort_order'];
                $arrayOfSieveStacks[$outputCount]->vars["isActive"] = $row['is_active'];
                $arrayOfSieveStacks[$outputCount]->vars["isCamsizer"] = $row['is_camsizer'];

                $outputCount++;
            }
        }
        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a list of sieve stacks by site ID.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $arrayOfSieveStacks;
}


//function to get K Values
/*******************************************************************************
 * Function Name: getKValues()
 * Description:
 * This function will:
 * Returns an array of objects containing K value information.
 *******************************************************************************/
function getKValues()
{
    $errorMessage = "qcfunctions.php - getKValues() ";
    $arrayOfKValues = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM gb_qc_k_values"; //direct SQL method
        //$result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        $result = $mySQLConnectionLocal->query("CALL sp_gb_qc_KValuesGet();"); //stored procedure method

        $outputCount = 0;
        while($row = $result->fetch_assoc())
        {
            $arrayOfKValues[$outputCount]->vars["id"] = $row['id'];
            $arrayOfKValues[$outputCount]->vars["description"] = $row['description'];

            $outputCount++;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a list of K values.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            //echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $arrayOfKValues;
}


//function to get gb_qc_sieves from gb_qc_sieve_stacks
/*******************************************************************************
 * Function Name: getSievesByID()
 * Description:
 * This function will:
 * Take a Sieve Stack ID number as a parameter
 * Returns an array of objects containing sieve information.
 *******************************************************************************/
function getSievesByID($argStackID)
{
    $errorMessage = "qcfunctions.php - getSievesByStack() ";
    $arrayOfSieves = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM gb_qc_sieves WHERE sieve_stack_id = " . $argStackID; //direct SQL method
        //$result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        $result = $mySQLConnectionLocal->query("CALL sp_gb_qc_SievesGetByID('$argStackID');"); //stored procedure method

        $outputCount = 0;
        while($row = $result->fetch_assoc())
        {
            $arrayOfSieves[$outputCount]->vars["id"] = $row['id'];
            $arrayOfSieves[$outputCount]->vars["description"] = $row['screen'];
            $arrayOfSieves[$outputCount]->vars["startWeight"] = $row['start_weight'];
            $outputCount++;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a list of sieves.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            $error = $e->getMessage();
            echo $error;
        }
    }
    return $arrayOfSieves;
}


/*******************************************************************************
 * Function Name: insertSample()
 * Description:
 * This function will:
 * Take numerous values as parameters.
 * Create a record in the database table gb_qc_samples.
 * Return a value to confirm success.
 *******************************************************************************/
function insertSample($argTestTypeId, $argCompositeTypeId, $argSiteId, $argPlantId, $argLocationId, $argDt, $argDate, $argDateShort, $argDtShort, $argTime, $argGroupTime, $shift, $labTech, $sampler, $operator)
{
    $errorMessage = "gb_qcfunctions.php - insertSample() ";
    $returnValue = 0;

    try
    {
        $currentDateTime = date("Y-m-d G:i", mktime(date("G"), date("i"), date("s"), date("m"), date("d"), date("Y"))); //today's date time for the database

        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        $sql = "CALL sp_gb_qc_SampleInsert('" . $argTestTypeId .
            "','" . $argCompositeTypeId .
            "','" . $argSiteId .
            "','" . $argPlantId .
            "','" . $argLocationId .
            "','" . $argDt .
            "','" . $argDate .
            "','" . $argDateShort .
            "','" . $argDtShort .
            "','" . $argTime .
            "','" . $argGroupTime .
            "','" . $argDate .
            "','"  . $labTech .
            "','" . $sampler .
            "','" . $operator .
            "','" . '' . "', @insert_id);"; //stored procedure method

        $sql2 = "CALL sp_gb_qc_MaxSampleIDGet();";
        echo "<br>" .$sql . "<br>";
        $result = mysqli_query($mySQLConnectionLocal,$sql); //insert the record

        //get the new database row ID
        $result2 = $mySQLConnectionLocal->query($sql2); //query for the last insert ID
        $row2 = mysqli_fetch_array($result2);
        $returnValue = $row2["MAX(id)"];

        //check status
        if ($returnValue == 0)
        {
            $errorMessage = $errorMessage . "Error creating a sample.";
            //sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
            if($debugging == 1)
            {
                echo $errorMessage;
                echo "Error: " . $sql . "<br>" . $mySQLConnectionLocal->error;
            }
            $result = 0;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error inserting a sample into MySQL.";
        //sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            $error = $e->getMessage();
            echo $error;
        }

        $returnValue = 0;
    }

    return $returnValue;
}


//function to get a list of all samples
/*******************************************************************************
 * Function Name: getSamples()
 * Description:
 * This function will:
 * Returns an array of objects containing sample information.
 *******************************************************************************/
function getSamples()
{
    $errorMessage = "qcfunctions.php - getSamples() ";
    $arrayOfSamples = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM gb_qc_samples WHERE void_status_code != 'V'"; //direct SQL method
        //$result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        $result = $mySQLConnectionLocal->query("CALL sp_gb_qc_SamplesGet;"); //stored procedure method

        $outputCount = 0;
        while($row = $result->fetch_assoc())
        {
            $arrayOfSamples[$outputCount]->vars["id"] = $row['id']; //sample no
            $arrayOfSamples[$outputCount]->vars["description"] = $row['description'];
            $arrayOfSamples[$outputCount]->vars["repeatabilityId"] = $row['repeatability_id'];
            $arrayOfSamples[$outputCount]->vars["testType"] = $row['test_type_id'];
            $arrayOfSamples[$outputCount]->vars["compositeType"] = $row['composite_type_id'];
            $arrayOfSamples[$outputCount]->vars["sieveMethod"] = $row['sieve_method_id'];
            $arrayOfSamples[$outputCount]->vars["siteId"] = $row['site_id'];
            $arrayOfSamples[$outputCount]->vars["plantId"] = $row['plant_id'];
            $arrayOfSamples[$outputCount]->vars["location"] = $row['location_id'];
            $arrayOfSamples[$outputCount]->vars["specificLocation"] = $row['specific_location_id'];
            $arrayOfSamples[$outputCount]->vars["date"] = $row['date'];
            $arrayOfSamples[$outputCount]->vars["dateShort"] = $row['date_short'];
            $arrayOfSamples[$outputCount]->vars["time"] = $row['time'];
            $arrayOfSamples[$outputCount]->vars["groupTime"] = $row['group_time'];
            $arrayOfSamples[$outputCount]->vars["groupStartDateTime"] = $row['group_start_dt'];
            $arrayOfSamples[$outputCount]->vars["finishDateTime"] = $row['finish_dt'];
            $arrayOfSamples[$outputCount]->vars["durationMinutes"] = $row['duration_minutes'];
            $arrayOfSamples[$outputCount]->vars["duration"] = $row['duration'];
            $arrayOfSamples[$outputCount]->vars["dateTime"] = $row['dt'];
            $arrayOfSamples[$outputCount]->vars["dateTimeShort"] = $row['dt_short'];
            $arrayOfSamples[$outputCount]->vars["shiftDate"] = $row['shift_date'];
            $arrayOfSamples[$outputCount]->vars["shift"] = $row['shift'];
            $arrayOfSamples[$outputCount]->vars["sampler"] = $row['sampler'];
            $arrayOfSamples[$outputCount]->vars["labTech"] = $row['lab_tech'];
            $arrayOfSamples[$outputCount]->vars["operator"] = $row['operator'];
            $arrayOfSamples[$outputCount]->vars["railCarId"] = $row['rail_car_id'];
            $arrayOfSamples[$outputCount]->vars["railCarProductId"] = $row['rail_car_product_id'];
            $arrayOfSamples[$outputCount]->vars["railCarAvailableDateTime"] = $row['rail_car_available_dt'];
            $arrayOfSamples[$outputCount]->vars["startingWeight"] = $row['starting_weight'];
            $arrayOfSamples[$outputCount]->vars["endingWeight"] = $row['ending_weight'];
            $arrayOfSamples[$outputCount]->vars["moisture_rate"] = $row['moisture_rate'];
            $arrayOfSamples[$outputCount]->vars["drillholeNo"] = $row['drillhole_no'];
            $arrayOfSamples[$outputCount]->vars["depthFrom"] = $row['depth_from'];
            $arrayOfSamples[$outputCount]->vars["depthTo"] = $row['depth_to'];
            $arrayOfSamples[$outputCount]->vars["beginningWetWeight"] = $row['beginning_wet_weight'];
            $arrayOfSamples[$outputCount]->vars["preWashDryWeight"] = $row['prewash_dry_weight'];
            $arrayOfSamples[$outputCount]->vars["postWashDryWeight"] = $row['postwash_dry_weight'];
            $arrayOfSamples[$outputCount]->vars["oversizeWeight"] = $row['oversize_weight'];
            $arrayOfSamples[$outputCount]->vars["splitSampleWeight"] = $row['split_sample_weight'];
            $arrayOfSamples[$outputCount]->vars["splitSampleWeightDelta"] = $row['split_sample_weight_delta'];
            $arrayOfSamples[$outputCount]->vars["oversizePercent"] = $row['oversize_percent'];
            $arrayOfSamples[$outputCount]->vars["slimesPercent"] = $row['slimes_percent'];
            $arrayOfSamples[$outputCount]->vars["orePercent"] = $row['ore_percent'];
            $arrayOfSamples[$outputCount]->vars["notes"] = $row['notes'];
            $arrayOfSamples[$outputCount]->vars["reviewNotes"] = $row['review_notes'];
            $arrayOfSamples[$outputCount]->vars["turbidity"] = $row['turbidity'];
            $arrayOfSamples[$outputCount]->vars["containerSlurryWeight"] = $row['container_slurry_weight'];
            $arrayOfSamples[$outputCount]->vars["containerWaterWeight"] = $row['container_water_weight'];
            $arrayOfSamples[$outputCount]->vars["containerEmptyWeight"] = $row['container_empty_weight'];
            $arrayOfSamples[$outputCount]->vars["kValue"] = $row['k_value'];
            $arrayOfSamples[$outputCount]->vars["pan1"] = $row['k_pan_1'];
            $arrayOfSamples[$outputCount]->vars["pan2"] = $row['k_pan_2'];
            $arrayOfSamples[$outputCount]->vars["pan3"] = $row['k_pan_3'];
            $arrayOfSamples[$outputCount]->vars["kPercentFines"] = $row['k_percent_fines'];
            $arrayOfSamples[$outputCount]->vars["kValueFail"] = $row['k_value_fail'];
            $arrayOfSamples[$outputCount]->vars["pan1Fail"] = $row['k_pan_1_fail'];
            $arrayOfSamples[$outputCount]->vars["pan2Fail"] = $row['k_pan_2_fail'];
            $arrayOfSamples[$outputCount]->vars["pan3Fail"] = $row['k_pan_3_fail'];
            $arrayOfSamples[$outputCount]->vars["kPercentFinesFail"] = $row['k_percent_fines_fail'];
            $arrayOfSamples[$outputCount]->vars["roundness"] = $row['roundness'];
            $arrayOfSamples[$outputCount]->vars["sphericity"] = $row['sphericity'];
            $arrayOfSamples[$outputCount]->vars["sieve1Desc"] = $row['sieve_1_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve1Value"] = $row['sieve_1_value'];
            $arrayOfSamples[$outputCount]->vars["sieve1ValueCumulative"] = $row['sieve_1_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve1ValueCumulativePassing"] = $row['sieve_1_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve2Desc"] = $row['sieve_2_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve2Value"] = $row['sieve_2_value'];
            $arrayOfSamples[$outputCount]->vars["sieve2ValueCumulative"] = $row['sieve_2_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve2ValueCumulativePassing"] = $row['sieve_2_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve3Desc"] = $row['sieve_3_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve3Value"] = $row['sieve_3_value'];
            $arrayOfSamples[$outputCount]->vars["sieve3ValueCumulative"] = $row['sieve_3_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve3ValueCumulativePassing"] = $row['sieve_3_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve4Desc"] = $row['sieve_4_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve4Value"] = $row['sieve_4_value'];
            $arrayOfSamples[$outputCount]->vars["sieve4ValueCumulative"] = $row['sieve_4_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve4ValueCumulativePassing"] = $row['sieve_4_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve5Desc"] = $row['sieve_5_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve5Value"] = $row['sieve_5_value'];
            $arrayOfSamples[$outputCount]->vars["sieve5ValueCumulative"] = $row['sieve_5_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve5ValueCumulativePassing"] = $row['sieve_5_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve6Desc"] = $row['sieve_6_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve6Value"] = $row['sieve_6_value'];
            $arrayOfSamples[$outputCount]->vars["sieve6ValueCumulative"] = $row['sieve_6_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve6ValueCumulativePassing"] = $row['sieve_6_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve7Desc"] = $row['sieve_7_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve7Value"] = $row['sieve_7_value'];
            $arrayOfSamples[$outputCount]->vars["sieve7ValueCumulative"] = $row['sieve_7_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve7ValueCumulativePassing"] = $row['sieve_7_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve8Desc"] = $row['sieve_8_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve8Value"] = $row['sieve_8_value'];
            $arrayOfSamples[$outputCount]->vars["sieve8ValueCumulative"] = $row['sieve_8_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve8ValueCumulativePassing"] = $row['sieve_8_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve9Desc"] = $row['sieve_9_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve9Value"] = $row['sieve_9_value'];
            $arrayOfSamples[$outputCount]->vars["sieve9ValueCumulative"] = $row['sieve_9_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve9ValueCumulativePassing"] = $row['sieve_9_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve10Desc"] = $row['sieve_10_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve10Value"] = $row['sieve_10_value'];
            $arrayOfSamples[$outputCount]->vars["sieve10ValueCumulative"] = $row['sieve_10_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve10ValueCumulativePassing"] = $row['sieve_10_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sievesTotal"] = $row['sieves_total'];
            $arrayOfSamples[$outputCount]->vars["startWeightsRaw"] = $row['start_weights_raw'];
            $arrayOfSamples[$outputCount]->vars["endWeightsRaw"] = $row['end_weights_raw'];
            $arrayOfSamples[$outputCount]->vars["sieves_raw"] = $row['sieves_raw'];
            $arrayOfSamples[$outputCount]->vars["feedRowNo"] = $row['feed_row_no'];
            $arrayOfSamples[$outputCount]->vars["plus70"] = $row['plus_70'];
            $arrayOfSamples[$outputCount]->vars["plus50"] = $row['plus_50'];
            $arrayOfSamples[$outputCount]->vars["plus40"] = $row['plus_40'];
            $arrayOfSamples[$outputCount]->vars["neg50Plus140"] = $row['minus_50_plus_140'];
            $arrayOfSamples[$outputCount]->vars["neg40Plus70"] = $row['minus_40_plus_70'];
            $arrayOfSamples[$outputCount]->vars["neg70"] = $row['minus_70'];
            $arrayOfSamples[$outputCount]->vars["neg70Plus140"] = $row['minus_70_plus_140'];
            $arrayOfSamples[$outputCount]->vars["neg60Plus70"] = $row['minus_60_plus_70'];
            $arrayOfSamples[$outputCount]->vars["neg140Plus325"] = $row['minus_140_plus_325'];
            $arrayOfSamples[$outputCount]->vars["plus140"] = $row['plus_140'];
            $arrayOfSamples[$outputCount]->vars["neg140"] = $row['minus_140'];
            $arrayOfSamples[$outputCount]->vars["nearSize"] = $row['near_size'];
            $arrayOfSamples[$outputCount]->vars["cutRatio"] = $row['cut_ratio'];
            $arrayOfSamples[$outputCount]->vars["wpMoistureRatio"] = $row['wp_moisture_rate'];
            $arrayOfSamples[$outputCount]->vars["percentSolids"] = $row['percent_solids'];
            $arrayOfSamples[$outputCount]->vars["stph"] = $row['stph'];
            $arrayOfSamples[$outputCount]->vars["tonsRepresented"] = $row['tons_represented'];
            $arrayOfSamples[$outputCount]->vars["tphRepresented"] = $row['tph_represented'];
            $arrayOfSamples[$outputCount]->vars["recoveryPlusSeventy"] = $row['recovery_plus_70'];
            $arrayOfSamples[$outputCount]->vars["recoveryPlusOneForty"] = $row['recovery_plus_140'];
            $arrayOfSamples[$outputCount]->vars["isRemoved"] = $row['is_removed'];
            $arrayOfSamples[$outputCount]->vars["voidStatusCode"] = $row['void_status_code'];
            $arrayOfSamples[$outputCount]->vars["createDateTime"] = $row['create_dt'];
            $arrayOfSamples[$outputCount]->vars["createUserId"] = $row['create_user_id'];
            $arrayOfSamples[$outputCount]->vars["editDateTime"] = $row['edit_dt'];
            $arrayOfSamples[$outputCount]->vars["editUserId"] = $row['edit_user_id'];

            $arrayOfSamples[$outputCount]->vars["sieve11Desc"] = $row['sieve_11_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve11Value"] = $row['sieve_11_value'];
            $arrayOfSamples[$outputCount]->vars["sieve11ValueCumulative"] = $row['sieve_11_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve11ValueCumulativePassing"] = $row['sieve_11_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve12Desc"] = $row['sieve_12_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve12Value"] = $row['sieve_12_value'];
            $arrayOfSamples[$outputCount]->vars["sieve12ValueCumulative"] = $row['sieve_12_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve12ValueCumulativePassing"] = $row['sieve_12_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve13Desc"] = $row['sieve_13_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve13Value"] = $row['sieve_13_value'];
            $arrayOfSamples[$outputCount]->vars["sieve13ValueCumulative"] = $row['sieve_13_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve13ValueCumulativePassing"] = $row['sieve_13_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve14Desc"] = $row['sieve_14_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve14Value"] = $row['sieve_14_value'];
            $arrayOfSamples[$outputCount]->vars["sieve14ValueCumulative"] = $row['sieve_14_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve14ValueCumulativePassing"] = $row['sieve_14_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve15Desc"] = $row['sieve_15_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve15Value"] = $row['sieve_15_value'];
            $arrayOfSamples[$outputCount]->vars["sieve15ValueCumulative"] = $row['sieve_15_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve15ValueCumulativePassing"] = $row['sieve_15_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve16Desc"] = $row['sieve_16_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve16Value"] = $row['sieve_16_value'];
            $arrayOfSamples[$outputCount]->vars["sieve16ValueCumulative"] = $row['sieve_16_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve16ValueCumulativePassing"] = $row['sieve_16_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve17Desc"] = $row['sieve_17_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve17Value"] = $row['sieve_17_value'];
            $arrayOfSamples[$outputCount]->vars["sieve17ValueCumulative"] = $row['sieve_17_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve17ValueCumulativePassing"] = $row['sieve_17_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve18Desc"] = $row['sieve_18_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve18Value"] = $row['sieve_18_value'];
            $arrayOfSamples[$outputCount]->vars["sieve18ValueCumulative"] = $row['sieve_18_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve18ValueCumulativePassing"] = $row['sieve_18_value_cumulative_passing'];

            $outputCount++;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a list of samples.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $arrayOfSamples;
}


/*******************************************************************************
 * Function Name: getSamplesInDateRange($argStartDate, $argEndDate)
 * Description:
 * This function will:
 * Accept start and stop dates as parameters.
 * Returns an array of objects containing sample information within the date range.
 *******************************************************************************/
function getSamplesInDateRange($argStartDate, $argEndDate)
{
    $errorMessage = "qcfunctions.php - getSamplesInDateRange() ";
    $arrayOfSamples = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        $sql = "CALL sp_gb_qc_SamplesInDateRangeGet('$argStartDate', '$argEndDate');";
        $result = $mySQLConnectionLocal->query($sql); //stored procedure method
        /*
    //echo "DEBUG: SQL = " . $sql . "<br/>");
    //echo "DEBUG: SQL = " . $argStartDate . "<br/>");
    //echo "DEBUG: SQL = " . $argEndDate . "<br/>");
    */
        $outputCount = 0;
        while($row = $result->fetch_assoc())
        {
            $arrayOfSamples[$outputCount]->vars["id"] = $row['id']; //sample no
            $arrayOfSamples[$outputCount]->vars["description"] = $row['description'];
            $arrayOfSamples[$outputCount]->vars["repeatabilityId"] = $row['repeatability_id'];
            $arrayOfSamples[$outputCount]->vars["testType"] = $row['test_type_id'];
            $arrayOfSamples[$outputCount]->vars["compositeType"] = $row['composite_type_id'];
            $arrayOfSamples[$outputCount]->vars["sieveMethod"] = $row['sieve_method_id'];
            $arrayOfSamples[$outputCount]->vars["siteId"] = $row['site_id'];
            $arrayOfSamples[$outputCount]->vars["plantId"] = $row['plant_id'];
            $arrayOfSamples[$outputCount]->vars["location"] = $row['location_id'];
            $arrayOfSamples[$outputCount]->vars["specificLocation"] = $row['specific_location_id'];
            $arrayOfSamples[$outputCount]->vars["date"] = $row['date'];
            $arrayOfSamples[$outputCount]->vars["dateShort"] = $row['date_short'];
            $arrayOfSamples[$outputCount]->vars["time"] = $row['time'];
            $arrayOfSamples[$outputCount]->vars["groupTime"] = $row['group_time'];
            $arrayOfSamples[$outputCount]->vars["groupStartDateTime"] = $row['group_start_dt'];
            $arrayOfSamples[$outputCount]->vars["finishDateTime"] = $row['finish_dt'];
            $arrayOfSamples[$outputCount]->vars["durationMinutes"] = $row['duration_minutes'];
            $arrayOfSamples[$outputCount]->vars["duration"] = $row['duration'];
            $arrayOfSamples[$outputCount]->vars["dateTime"] = $row['dt'];
            $arrayOfSamples[$outputCount]->vars["dateTimeShort"] = $row['dt_short'];
            $arrayOfSamples[$outputCount]->vars["shiftDate"] = $row['shift_date'];
            $arrayOfSamples[$outputCount]->vars["shift"] = $row['shift'];
            $arrayOfSamples[$outputCount]->vars["sampler"] = $row['sampler'];
            $arrayOfSamples[$outputCount]->vars["labTech"] = $row['lab_tech'];
            $arrayOfSamples[$outputCount]->vars["operator"] = $row['operator'];
            $arrayOfSamples[$outputCount]->vars["railCarId"] = $row['rail_car_id'];
            $arrayOfSamples[$outputCount]->vars["railCarProductId"] = $row['rail_car_product_id'];
            $arrayOfSamples[$outputCount]->vars["railCarAvailableDateTime"] = $row['rail_car_available_dt'];
            $arrayOfSamples[$outputCount]->vars["startingWeight"] = $row['starting_weight'];
            $arrayOfSamples[$outputCount]->vars["endingWeight"] = $row['ending_weight'];
            $arrayOfSamples[$outputCount]->vars["moisture_rate"] = $row['moisture_rate'];
            $arrayOfSamples[$outputCount]->vars["drillholeNo"] = $row['drillhole_no'];
            $arrayOfSamples[$outputCount]->vars["depthFrom"] = $row['depth_from'];
            $arrayOfSamples[$outputCount]->vars["depthTo"] = $row['depth_to'];
            $arrayOfSamples[$outputCount]->vars["beginningWetWeight"] = $row['beginning_wet_weight'];
            $arrayOfSamples[$outputCount]->vars["preWashDryWeight"] = $row['prewash_dry_weight'];
            $arrayOfSamples[$outputCount]->vars["postWashDryWeight"] = $row['postwash_dry_weight'];
            $arrayOfSamples[$outputCount]->vars["oversizeWeight"] = $row['oversize_weight'];
            $arrayOfSamples[$outputCount]->vars["splitSampleWeight"] = $row['split_sample_weight'];
            $arrayOfSamples[$outputCount]->vars["splitSampleWeightDelta"] = $row['split_sample_weight_delta'];
            $arrayOfSamples[$outputCount]->vars["oversizePercent"] = $row['oversize_percent'];
            $arrayOfSamples[$outputCount]->vars["slimesPercent"] = $row['slimes_percent'];
            $arrayOfSamples[$outputCount]->vars["orePercent"] = $row['ore_percent'];
            $arrayOfSamples[$outputCount]->vars["notes"] = $row['notes'];
            $arrayOfSamples[$outputCount]->vars["reviewNotes"] = $row['review_notes'];
            $arrayOfSamples[$outputCount]->vars["turbidity"] = $row['turbidity'];
            $arrayOfSamples[$outputCount]->vars["containerSlurryWeight"] = $row['container_slurry_weight'];
            $arrayOfSamples[$outputCount]->vars["containerWaterWeight"] = $row['container_water_weight'];
            $arrayOfSamples[$outputCount]->vars["containerEmptyWeight"] = $row['container_empty_weight'];
            $arrayOfSamples[$outputCount]->vars["kValue"] = $row['k_value'];
            $arrayOfSamples[$outputCount]->vars["pan1"] = $row['k_pan_1'];
            $arrayOfSamples[$outputCount]->vars["pan2"] = $row['k_pan_2'];
            $arrayOfSamples[$outputCount]->vars["pan3"] = $row['k_pan_3'];
            $arrayOfSamples[$outputCount]->vars["kPercentFines"] = $row['k_percent_fines'];
            $arrayOfSamples[$outputCount]->vars["kValueFail"] = $row['k_value_fail'];
            $arrayOfSamples[$outputCount]->vars["pan1Fail"] = $row['k_pan_1_fail'];
            $arrayOfSamples[$outputCount]->vars["pan2Fail"] = $row['k_pan_2_fail'];
            $arrayOfSamples[$outputCount]->vars["pan3Fail"] = $row['k_pan_3_fail'];
            $arrayOfSamples[$outputCount]->vars["kPercentFinesFail"] = $row['k_percent_fines_fail'];
            $arrayOfSamples[$outputCount]->vars["roundness"] = $row['roundness'];
            $arrayOfSamples[$outputCount]->vars["sphericity"] = $row['sphericity'];
            $arrayOfSamples[$outputCount]->vars["sieve1Desc"] = $row['sieve_1_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve1Value"] = $row['sieve_1_value'];
            $arrayOfSamples[$outputCount]->vars["sieve1ValueCumulative"] = $row['sieve_1_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve1ValueCumulativePassing"] = $row['sieve_1_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve2Desc"] = $row['sieve_2_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve2Value"] = $row['sieve_2_value'];
            $arrayOfSamples[$outputCount]->vars["sieve2ValueCumulative"] = $row['sieve_2_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve2ValueCumulativePassing"] = $row['sieve_2_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve3Desc"] = $row['sieve_3_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve3Value"] = $row['sieve_3_value'];
            $arrayOfSamples[$outputCount]->vars["sieve3ValueCumulative"] = $row['sieve_3_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve3ValueCumulativePassing"] = $row['sieve_3_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve4Desc"] = $row['sieve_4_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve4Value"] = $row['sieve_4_value'];
            $arrayOfSamples[$outputCount]->vars["sieve4ValueCumulative"] = $row['sieve_4_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve4ValueCumulativePassing"] = $row['sieve_4_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve5Desc"] = $row['sieve_5_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve5Value"] = $row['sieve_5_value'];
            $arrayOfSamples[$outputCount]->vars["sieve5ValueCumulative"] = $row['sieve_5_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve5ValueCumulativePassing"] = $row['sieve_5_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve6Desc"] = $row['sieve_6_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve6Value"] = $row['sieve_6_value'];
            $arrayOfSamples[$outputCount]->vars["sieve6ValueCumulative"] = $row['sieve_6_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve6ValueCumulativePassing"] = $row['sieve_6_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve7Desc"] = $row['sieve_7_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve7Value"] = $row['sieve_7_value'];
            $arrayOfSamples[$outputCount]->vars["sieve7ValueCumulative"] = $row['sieve_7_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve7ValueCumulativePassing"] = $row['sieve_7_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve8Desc"] = $row['sieve_8_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve8Value"] = $row['sieve_8_value'];
            $arrayOfSamples[$outputCount]->vars["sieve8ValueCumulative"] = $row['sieve_8_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve8ValueCumulativePassing"] = $row['sieve_8_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve9Desc"] = $row['sieve_9_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve9Value"] = $row['sieve_9_value'];
            $arrayOfSamples[$outputCount]->vars["sieve9ValueCumulative"] = $row['sieve_9_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve9ValueCumulativePassing"] = $row['sieve_9_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve10Desc"] = $row['sieve_10_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve10Value"] = $row['sieve_10_value'];
            $arrayOfSamples[$outputCount]->vars["sieve10ValueCumulative"] = $row['sieve_10_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve10ValueCumulativePassing"] = $row['sieve_10_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sievesTotal"] = $row['sieves_total'];
            $arrayOfSamples[$outputCount]->vars["startWeightsRaw"] = $row['start_weights_raw'];
            $arrayOfSamples[$outputCount]->vars["endWeightsRaw"] = $row['end_weights_raw'];
            $arrayOfSamples[$outputCount]->vars["sieves_raw"] = $row['sieves_raw'];
            $arrayOfSamples[$outputCount]->vars["feedRowNo"] = $row['feed_row_no'];
            $arrayOfSamples[$outputCount]->vars["plus70"] = $row['plus_70'];
            $arrayOfSamples[$outputCount]->vars["plus50"] = $row['plus_50'];
            $arrayOfSamples[$outputCount]->vars["plus40"] = $row['plus_40'];
            $arrayOfSamples[$outputCount]->vars["neg50Plus140"] = $row['minus_50_plus_140'];
            $arrayOfSamples[$outputCount]->vars["neg40Plus70"] = $row['minus_40_plus_70'];
            $arrayOfSamples[$outputCount]->vars["neg70"] = $row['minus_70'];
            $arrayOfSamples[$outputCount]->vars["neg70Plus140"] = $row['minus_70_plus_140'];
            $arrayOfSamples[$outputCount]->vars["neg60Plus70"] = $row['minus_60_plus_70'];
            $arrayOfSamples[$outputCount]->vars["neg140Plus325"] = $row['minus_140_plus_325'];
            $arrayOfSamples[$outputCount]->vars["plus140"] = $row['plus_140'];
            $arrayOfSamples[$outputCount]->vars["neg140"] = $row['minus_140'];
            $arrayOfSamples[$outputCount]->vars["nearSize"] = $row['near_size'];
            $arrayOfSamples[$outputCount]->vars["cutRatio"] = $row['cut_ratio'];
            $arrayOfSamples[$outputCount]->vars["wpMoistureRatio"] = $row['wp_moisture_rate'];
            $arrayOfSamples[$outputCount]->vars["percentSolids"] = $row['percent_solids'];
            $arrayOfSamples[$outputCount]->vars["stph"] = $row['stph'];
            $arrayOfSamples[$outputCount]->vars["tonsRepresented"] = $row['tons_represented'];
            $arrayOfSamples[$outputCount]->vars["tphRepresented"] = $row['tph_represented'];
            $arrayOfSamples[$outputCount]->vars["recoveryPlusSeventy"] = $row['recovery_plus_70'];
            $arrayOfSamples[$outputCount]->vars["recoveryPlusOneForty"] = $row['recovery_plus_140'];
            $arrayOfSamples[$outputCount]->vars["isRemoved"] = $row['is_removed'];
            $arrayOfSamples[$outputCount]->vars["voidStatusCode"] = $row['void_status_code'];
            $arrayOfSamples[$outputCount]->vars["createDateTime"] = $row['create_dt'];
            $arrayOfSamples[$outputCount]->vars["createUserId"] = $row['create_user_id'];
            $arrayOfSamples[$outputCount]->vars["editDateTime"] = $row['edit_dt'];
            $arrayOfSamples[$outputCount]->vars["editUserId"] = $row['edit_user_id'];

            $arrayOfSamples[$outputCount]->vars["sieve11Desc"] = $row['sieve_11_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve11Value"] = $row['sieve_11_value'];
            $arrayOfSamples[$outputCount]->vars["sieve11ValueCumulative"] = $row['sieve_11_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve11ValueCumulativePassing"] = $row['sieve_11_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve12Desc"] = $row['sieve_12_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve12Value"] = $row['sieve_12_value'];
            $arrayOfSamples[$outputCount]->vars["sieve12ValueCumulative"] = $row['sieve_12_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve12ValueCumulativePassing"] = $row['sieve_12_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve13Desc"] = $row['sieve_13_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve13Value"] = $row['sieve_13_value'];
            $arrayOfSamples[$outputCount]->vars["sieve13ValueCumulative"] = $row['sieve_13_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve13ValueCumulativePassing"] = $row['sieve_13_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve14Desc"] = $row['sieve_14_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve14Value"] = $row['sieve_14_value'];
            $arrayOfSamples[$outputCount]->vars["sieve14ValueCumulative"] = $row['sieve_14_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve14ValueCumulativePassing"] = $row['sieve_14_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve15Desc"] = $row['sieve_15_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve15Value"] = $row['sieve_15_value'];
            $arrayOfSamples[$outputCount]->vars["sieve15ValueCumulative"] = $row['sieve_15_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve15ValueCumulativePassing"] = $row['sieve_15_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve16Desc"] = $row['sieve_16_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve16Value"] = $row['sieve_16_value'];
            $arrayOfSamples[$outputCount]->vars["sieve16ValueCumulative"] = $row['sieve_16_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve16ValueCumulativePassing"] = $row['sieve_16_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve17Desc"] = $row['sieve_17_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve17Value"] = $row['sieve_17_value'];
            $arrayOfSamples[$outputCount]->vars["sieve17ValueCumulative"] = $row['sieve_17_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve17ValueCumulativePassing"] = $row['sieve_17_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve18Desc"] = $row['sieve_18_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve18Value"] = $row['sieve_18_value'];
            $arrayOfSamples[$outputCount]->vars["sieve18ValueCumulative"] = $row['sieve_18_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve18ValueCumulativePassing"] = $row['sieve_18_value_cumulative_passing'];

            $outputCount++;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a list of samples.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $arrayOfSamples;
}


/*******************************************************************************
 * Function Name: getSamplesInDateRangeIncludeVoided($argStartDate, $argEndDate, $argStartRow, $argResultsPerPage)
 * Description:
 * This function will:
 * Accept start and stop dates as parameters.
 * Accept the start Row and Range as parameters
 * Returns an array of objects containing sample information within the date range.
 * Includes voided samples.
 *******************************************************************************/
function getSamplesInDateRangeIncludeVoided($argStartDate, $argEndDate, $argStartRow, $argResultsPerPage)
{
    $errorMessage = "qcfunctions.php - getSamplesInDateRange() ";
    $arrayOfSamples = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        $sql = "CALL `sp_gb_qc_SamplesInDateRangeGetIncludeVoided`('$argStartDate', '$argEndDate', '$argStartRow', '$argResultsPerPage');";
        $result = $mySQLConnectionLocal->query($sql); //stored procedure method

        $outputCount = 0;
        while($row = $result->fetch_assoc())
        {
            $arrayOfSamples[$outputCount]->vars["id"] = $row['id']; //sample no
            $arrayOfSamples[$outputCount]->vars["description"] = $row['description'];
            $arrayOfSamples[$outputCount]->vars["repeatabilityId"] = $row['repeatability_id'];
            $arrayOfSamples[$outputCount]->vars["testType"] = $row['test_type_id'];
            $arrayOfSamples[$outputCount]->vars["compositeType"] = $row['composite_type_id'];
            $arrayOfSamples[$outputCount]->vars["sieveMethod"] = $row['sieve_method_id'];
            $arrayOfSamples[$outputCount]->vars["siteId"] = $row['site_id'];
            $arrayOfSamples[$outputCount]->vars["plantId"] = $row['plant_id'];
            $arrayOfSamples[$outputCount]->vars["location"] = $row['location_id'];
            $arrayOfSamples[$outputCount]->vars["specificLocation"] = $row['specific_location_id'];
            $arrayOfSamples[$outputCount]->vars["date"] = $row['date'];
            $arrayOfSamples[$outputCount]->vars["dateShort"] = $row['date_short'];
            $arrayOfSamples[$outputCount]->vars["time"] = $row['time'];
            $arrayOfSamples[$outputCount]->vars["groupTime"] = $row['group_time'];
            $arrayOfSamples[$outputCount]->vars["groupStartDateTime"] = $row['group_start_dt'];
            $arrayOfSamples[$outputCount]->vars["finishDateTime"] = $row['finish_dt'];
            $arrayOfSamples[$outputCount]->vars["durationMinutes"] = $row['duration_minutes'];
            $arrayOfSamples[$outputCount]->vars["duration"] = $row['duration'];
            $arrayOfSamples[$outputCount]->vars["dateTime"] = $row['dt'];
            $arrayOfSamples[$outputCount]->vars["dateTimeShort"] = $row['dt_short'];
            $arrayOfSamples[$outputCount]->vars["shiftDate"] = $row['shift_date'];
            $arrayOfSamples[$outputCount]->vars["shift"] = $row['shift'];
            $arrayOfSamples[$outputCount]->vars["sampler"] = $row['sampler'];
            $arrayOfSamples[$outputCount]->vars["labTech"] = $row['lab_tech'];
            $arrayOfSamples[$outputCount]->vars["operator"] = $row['operator'];
            $arrayOfSamples[$outputCount]->vars["railCarId"] = $row['rail_car_id'];
            $arrayOfSamples[$outputCount]->vars["railCarProductId"] = $row['rail_car_product_id'];
            $arrayOfSamples[$outputCount]->vars["railCarAvailableDateTime"] = $row['rail_car_available_dt'];
            $arrayOfSamples[$outputCount]->vars["startingWeight"] = $row['starting_weight'];
            $arrayOfSamples[$outputCount]->vars["endingWeight"] = $row['ending_weight'];
            $arrayOfSamples[$outputCount]->vars["moisture_rate"] = $row['moisture_rate'];
            $arrayOfSamples[$outputCount]->vars["drillholeNo"] = $row['drillhole_no'];
            $arrayOfSamples[$outputCount]->vars["depthFrom"] = $row['depth_from'];
            $arrayOfSamples[$outputCount]->vars["depthTo"] = $row['depth_to'];
            $arrayOfSamples[$outputCount]->vars["beginningWetWeight"] = $row['beginning_wet_weight'];
            $arrayOfSamples[$outputCount]->vars["preWashDryWeight"] = $row['prewash_dry_weight'];
            $arrayOfSamples[$outputCount]->vars["postWashDryWeight"] = $row['postwash_dry_weight'];
            $arrayOfSamples[$outputCount]->vars["oversizeWeight"] = $row['oversize_weight'];
            $arrayOfSamples[$outputCount]->vars["splitSampleWeight"] = $row['split_sample_weight'];
            $arrayOfSamples[$outputCount]->vars["splitSampleWeightDelta"] = $row['split_sample_weight_delta'];
            $arrayOfSamples[$outputCount]->vars["oversizePercent"] = $row['oversize_percent'];
            $arrayOfSamples[$outputCount]->vars["slimesPercent"] = $row['slimes_percent'];
            $arrayOfSamples[$outputCount]->vars["orePercent"] = $row['ore_percent'];
            $arrayOfSamples[$outputCount]->vars["notes"] = $row['notes'];
            $arrayOfSamples[$outputCount]->vars["reviewNotes"] = $row['review_notes'];
            $arrayOfSamples[$outputCount]->vars["turbidity"] = $row['turbidity'];
            $arrayOfSamples[$outputCount]->vars["containerSlurryWeight"] = $row['container_slurry_weight'];
            $arrayOfSamples[$outputCount]->vars["containerWaterWeight"] = $row['container_water_weight'];
            $arrayOfSamples[$outputCount]->vars["containerEmptyWeight"] = $row['container_empty_weight'];
            $arrayOfSamples[$outputCount]->vars["kValue"] = $row['k_value'];
            $arrayOfSamples[$outputCount]->vars["pan1"] = $row['k_pan_1'];
            $arrayOfSamples[$outputCount]->vars["pan2"] = $row['k_pan_2'];
            $arrayOfSamples[$outputCount]->vars["pan3"] = $row['k_pan_3'];
            $arrayOfSamples[$outputCount]->vars["kPercentFines"] = $row['k_percent_fines'];
            $arrayOfSamples[$outputCount]->vars["kValueFail"] = $row['k_value_fail'];
            $arrayOfSamples[$outputCount]->vars["pan1Fail"] = $row['k_pan_1_fail'];
            $arrayOfSamples[$outputCount]->vars["pan2Fail"] = $row['k_pan_2_fail'];
            $arrayOfSamples[$outputCount]->vars["pan3Fail"] = $row['k_pan_3_fail'];
            $arrayOfSamples[$outputCount]->vars["kPercentFinesFail"] = $row['k_percent_fines_fail'];
            $arrayOfSamples[$outputCount]->vars["roundness"] = $row['roundness'];
            $arrayOfSamples[$outputCount]->vars["sphericity"] = $row['sphericity'];
            $arrayOfSamples[$outputCount]->vars["sieve1Desc"] = $row['sieve_1_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve1Value"] = $row['sieve_1_value'];
            $arrayOfSamples[$outputCount]->vars["sieve1ValueCumulative"] = $row['sieve_1_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve1ValueCumulativePassing"] = $row['sieve_1_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve2Desc"] = $row['sieve_2_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve2Value"] = $row['sieve_2_value'];
            $arrayOfSamples[$outputCount]->vars["sieve2ValueCumulative"] = $row['sieve_2_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve2ValueCumulativePassing"] = $row['sieve_2_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve3Desc"] = $row['sieve_3_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve3Value"] = $row['sieve_3_value'];
            $arrayOfSamples[$outputCount]->vars["sieve3ValueCumulative"] = $row['sieve_3_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve3ValueCumulativePassing"] = $row['sieve_3_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve4Desc"] = $row['sieve_4_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve4Value"] = $row['sieve_4_value'];
            $arrayOfSamples[$outputCount]->vars["sieve4ValueCumulative"] = $row['sieve_4_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve4ValueCumulativePassing"] = $row['sieve_4_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve5Desc"] = $row['sieve_5_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve5Value"] = $row['sieve_5_value'];
            $arrayOfSamples[$outputCount]->vars["sieve5ValueCumulative"] = $row['sieve_5_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve5ValueCumulativePassing"] = $row['sieve_5_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve6Desc"] = $row['sieve_6_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve6Value"] = $row['sieve_6_value'];
            $arrayOfSamples[$outputCount]->vars["sieve6ValueCumulative"] = $row['sieve_6_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve6ValueCumulativePassing"] = $row['sieve_6_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve7Desc"] = $row['sieve_7_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve7Value"] = $row['sieve_7_value'];
            $arrayOfSamples[$outputCount]->vars["sieve7ValueCumulative"] = $row['sieve_7_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve7ValueCumulativePassing"] = $row['sieve_7_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve8Desc"] = $row['sieve_8_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve8Value"] = $row['sieve_8_value'];
            $arrayOfSamples[$outputCount]->vars["sieve8ValueCumulative"] = $row['sieve_8_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve8ValueCumulativePassing"] = $row['sieve_8_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve9Desc"] = $row['sieve_9_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve9Value"] = $row['sieve_9_value'];
            $arrayOfSamples[$outputCount]->vars["sieve9ValueCumulative"] = $row['sieve_9_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve9ValueCumulativePassing"] = $row['sieve_9_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve10Desc"] = $row['sieve_10_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve10Value"] = $row['sieve_10_value'];
            $arrayOfSamples[$outputCount]->vars["sieve10ValueCumulative"] = $row['sieve_10_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve10ValueCumulativePassing"] = $row['sieve_10_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sievesTotal"] = $row['sieves_total'];
            $arrayOfSamples[$outputCount]->vars["startWeightsRaw"] = $row['start_weights_raw'];
            $arrayOfSamples[$outputCount]->vars["endWeightsRaw"] = $row['end_weights_raw'];
            $arrayOfSamples[$outputCount]->vars["sieves_raw"] = $row['sieves_raw'];
            $arrayOfSamples[$outputCount]->vars["feedRowNo"] = $row['feed_row_no'];
            $arrayOfSamples[$outputCount]->vars["plus70"] = $row['plus_70'];
            $arrayOfSamples[$outputCount]->vars["plus50"] = $row['plus_50'];
            $arrayOfSamples[$outputCount]->vars["plus40"] = $row['plus_40'];
            $arrayOfSamples[$outputCount]->vars["neg50Plus140"] = $row['minus_50_plus_140'];
            $arrayOfSamples[$outputCount]->vars["neg40Plus70"] = $row['minus_40_plus_70'];
            $arrayOfSamples[$outputCount]->vars["neg70"] = $row['minus_70'];
            $arrayOfSamples[$outputCount]->vars["neg70Plus140"] = $row['minus_70_plus_140'];
            $arrayOfSamples[$outputCount]->vars["neg60Plus70"] = $row['minus_60_plus_70'];
            $arrayOfSamples[$outputCount]->vars["neg140Plus325"] = $row['minus_140_plus_325'];
            $arrayOfSamples[$outputCount]->vars["plus140"] = $row['plus_140'];
            $arrayOfSamples[$outputCount]->vars["neg140"] = $row['minus_140'];
            $arrayOfSamples[$outputCount]->vars["nearSize"] = $row['near_size'];
            $arrayOfSamples[$outputCount]->vars["cutRatio"] = $row['cut_ratio'];
            $arrayOfSamples[$outputCount]->vars["wpMoistureRatio"] = $row['wp_moisture_rate'];
            $arrayOfSamples[$outputCount]->vars["percentSolids"] = $row['percent_solids'];
            $arrayOfSamples[$outputCount]->vars["stph"] = $row['stph'];
            $arrayOfSamples[$outputCount]->vars["tonsRepresented"] = $row['tons_represented'];
            $arrayOfSamples[$outputCount]->vars["tphRepresented"] = $row['tph_represented'];
            $arrayOfSamples[$outputCount]->vars["recoveryPlusSeventy"] = $row['recovery_plus_70'];
            $arrayOfSamples[$outputCount]->vars["recoveryPlusOneForty"] = $row['recovery_plus_140'];
            $arrayOfSamples[$outputCount]->vars["isRemoved"] = $row['is_removed'];
            $arrayOfSamples[$outputCount]->vars["voidStatusCode"] = $row['void_status_code'];
            $arrayOfSamples[$outputCount]->vars["createDateTime"] = $row['create_dt'];
            $arrayOfSamples[$outputCount]->vars["createUserId"] = $row['create_user_id'];
            $arrayOfSamples[$outputCount]->vars["editDateTime"] = $row['edit_dt'];
            $arrayOfSamples[$outputCount]->vars["editUserId"] = $row['edit_user_id'];

            $arrayOfSamples[$outputCount]->vars["sieve11Desc"] = $row['sieve_11_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve11Value"] = $row['sieve_11_value'];
            $arrayOfSamples[$outputCount]->vars["sieve11ValueCumulative"] = $row['sieve_11_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve11ValueCumulativePassing"] = $row['sieve_11_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve12Desc"] = $row['sieve_12_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve12Value"] = $row['sieve_12_value'];
            $arrayOfSamples[$outputCount]->vars["sieve12ValueCumulative"] = $row['sieve_12_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve12ValueCumulativePassing"] = $row['sieve_12_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve13Desc"] = $row['sieve_13_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve13Value"] = $row['sieve_13_value'];
            $arrayOfSamples[$outputCount]->vars["sieve13ValueCumulative"] = $row['sieve_13_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve13ValueCumulativePassing"] = $row['sieve_13_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve14Desc"] = $row['sieve_14_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve14Value"] = $row['sieve_14_value'];
            $arrayOfSamples[$outputCount]->vars["sieve14ValueCumulative"] = $row['sieve_14_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve14ValueCumulativePassing"] = $row['sieve_14_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve15Desc"] = $row['sieve_15_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve15Value"] = $row['sieve_15_value'];
            $arrayOfSamples[$outputCount]->vars["sieve15ValueCumulative"] = $row['sieve_15_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve15ValueCumulativePassing"] = $row['sieve_15_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve16Desc"] = $row['sieve_16_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve16Value"] = $row['sieve_16_value'];
            $arrayOfSamples[$outputCount]->vars["sieve16ValueCumulative"] = $row['sieve_16_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve16ValueCumulativePassing"] = $row['sieve_16_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve17Desc"] = $row['sieve_17_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve17Value"] = $row['sieve_17_value'];
            $arrayOfSamples[$outputCount]->vars["sieve17ValueCumulative"] = $row['sieve_17_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve17ValueCumulativePassing"] = $row['sieve_17_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve18Desc"] = $row['sieve_18_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve18Value"] = $row['sieve_18_value'];
            $arrayOfSamples[$outputCount]->vars["sieve18ValueCumulative"] = $row['sieve_18_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve18ValueCumulativePassing"] = $row['sieve_18_value_cumulative_passing'];

            $outputCount++;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a list of samples.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $arrayOfSamples;
}


/*******************************************************************************
 * Function Name: deleteSample($argId)
 * Description:
 * This function will:
 * Accept an integer corresponding to an ID in the database.
 * Delete the sample from the gb_qc_samples database.
 *******************************************************************************/
function deleteSample($argId)
{
    $errorMessage = "qcfunctions.php - deleteSample() ";

    $returnValue = 0; //a value to tell us if the process was successful.

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "DELETE FROM gb_qc_samples WHERE id=$argId"; //direct SQL method
        //$result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        //if($mySQLConnectionLocal->query($sql) === TRUE) //direct SQL method
        if($mySQLConnectionLocal->query("CALL sp_DeleteSample('$argId');") === TRUE) //stored procedure method example
        {
            //echo "Record deleted successfully<br/>";
            $returnValue = 1;
        }
        else
        {
            echo "Error deleting record: " . $conn->error . "<br/>";
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error deleting a sample.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $returnValue;
}


/*******************************************************************************
 * Function Name: voidSample($argId)
 * Description:
 * This function will:
 * Accept an integer corresponding to an ID in the database.
 * Flag the record as voided in the gb_qc_samples database.
 *******************************************************************************/
function voidSample($argId)
{
    $errorMessage = "qcfunctions.php - voidSample() ";

    $returnValue = 0; //a value to tell us if the process was successful.

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database
        //$sql = "UPDATE `gb_qc_samples` SET `void_status_code`='V' WHERE `id`=$argId"; //direct SQL method
        //$result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        //if ( $mySQLConnectionLocal->query($sql) === TRUE) //direct SQL method
        if($mySQLConnectionLocal->query("CALL sp_VoidSample('$argId');") === TRUE) //stored procedure method
        {
            //echo "Record deleted successfully<br/>";
            $returnValue = 1;
        }
        else
        {
            echo "Error updating record: " . $conn->error . "<br/>";
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error voiding a sample.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $returnValue;
}


/*******************************************************************************
 * Function Name: getSampleById($argId)
 * Description:
 * This function will:
 * Take an ID # as a parameter.
 * Return an object containing the sample information.
 *******************************************************************************/
function getSampleById($argId)
{
    $errorMessage = "qcfunctions.php - getSampleById() ";
    $sampleObject = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM gb_qc_samples WHERE id = $argId LIMIT 1"; //direct SQL method
        //$result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        $result = $mySQLConnectionLocal->query("CALL sp_gb_qc_SampleGetByID('$argId');"); //stored procedure method

        while($row = $result->fetch_assoc())
        {
            $sampleObject->vars["id"] = $row['id']; //sample no
            $sampleObject->vars["sampleGroupId"] = $row['sample_group_id'];
            $sampleObject->vars["description"] = $row['description'];
            $sampleObject->vars["repeatabilityId"] = $row['repeatability_id'];
            $sampleObject->vars["testType"] = $row['test_type_id'];
            $sampleObject->vars["compositeType"] = $row['composite_type_id'];
            $sampleObject->vars["sieveMethod"] = $row['sieve_method_id'];
            $sampleObject->vars["siteId"] = $row['site_id'];
            $sampleObject->vars["plantId"] = $row['plant_id'];
            $sampleObject->vars["location"] = $row['location_id'];
            $sampleObject->vars["specificLocation"] = $row['specific_location_id'];
            $sampleObject->vars["date"] = $row['date'];
            $sampleObject->vars["dateShort"] = $row['date_short'];
            $sampleObject->vars["time"] = $row['time'];
            $sampleObject->vars["groupTime"] = $row['group_time'];
            $sampleObject->vars["groupStartDateTime"] = $row['group_start_dt'];
            $sampleObject->vars["finishDateTime"] = $row['finish_dt'];
            $sampleObject->vars["durationMinutes"] = $row['duration_minutes'];
            $sampleObject->vars["duration"] = $row['duration'];
            $sampleObject->vars["dt"] = $row['dt'];
            $sampleObject->vars["dateTimeShort"] = $row['dt_short'];
            $sampleObject->vars["shiftDate"] = $row['shift_date'];
            $sampleObject->vars["shift"] = $row['shift'];
            $sampleObject->vars["sampler"] = $row['sampler'];
            $sampleObject->vars["labTech"] = $row['lab_tech'];
            $sampleObject->vars["operator"] = $row['operator'];
            $sampleObject->vars["railCarId"] = $row['rail_car_id'];
            $sampleObject->vars["railCarProductId"] = $row['rail_car_product_id'];
            $sampleObject->vars["railCarAvailableDateTime"] = $row['rail_car_available_dt'];
            $sampleObject->vars["startingWeight"] = $row['starting_weight'];
            $sampleObject->vars["endingWeight"] = $row['ending_weight'];
            $sampleObject->vars["moistureRate"] = $row['moisture_rate'];
            $sampleObject->vars["drillholeNo"] = $row['drillhole_no'];
            $sampleObject->vars["depthFrom"] = $row['depth_from'];
            $sampleObject->vars["depthTo"] = $row['depth_to'];
            $sampleObject->vars["beginningWetWeight"] = $row['beginning_wet_weight'];
            $sampleObject->vars["preWashDryWeight"] = $row['prewash_dry_weight'];
            $sampleObject->vars["postWashDryWeight"] = $row['postwash_dry_weight'];
            $sampleObject->vars["oversizeWeight"] = $row['oversize_weight'];
            $sampleObject->vars["splitSampleWeight"] = $row['split_sample_weight'];
            $sampleObject->vars["splitSampleWeightDelta"] = $row['split_sample_weight_delta'];
            $sampleObject->vars["oversizePercent"] = $row['oversize_percent'];
            $sampleObject->vars["slimesPercent"] = $row['slimes_percent'];
            $sampleObject->vars["orePercent"] = $row['ore_percent'];
            $sampleObject->vars["notes"] = $row['notes'];
            $sampleObject->vars["reviewNotes"] = $row['review_notes'];
            $sampleObject->vars["turbidity"] = $row['turbidity'];
            $sampleObject->vars["containerSlurryWeight"] = $row['container_slurry_weight'];
            $sampleObject->vars["containerWaterWeight"] = $row['container_water_weight'];
            $sampleObject->vars["containerEmptyWeight"] = $row['container_empty_weight'];
            $sampleObject->vars["kValue"] = $row['k_value'];
            $sampleObject->vars["pan1"] = $row['k_pan_1'];
            $sampleObject->vars["pan2"] = $row['k_pan_2'];
            $sampleObject->vars["pan3"] = $row['k_pan_3'];
            $sampleObject->vars["kPercentFines"] = $row['k_percent_fines'];
            $sampleObject->vars["kValueFail"] = $row['k_value_fail'];
            $sampleObject->vars["pan1Fail"] = $row['k_pan_1_fail'];
            $sampleObject->vars["pan2Fail"] = $row['k_pan_2_fail'];
            $sampleObject->vars["pan3Fail"] = $row['k_pan_3_fail'];
            $sampleObject->vars["kPercentFinesFail"] = $row['k_percent_fines_fail'];
            $sampleObject->vars["roundness"] = $row['roundness'];
            $sampleObject->vars["sphericity"] = $row['sphericity'];
            $sampleObject->vars["sieve1Desc"] = $row['sieve_1_desc'];
            $sampleObject->vars["sieve1Value"] = $row['sieve_1_value'];
            $sampleObject->vars["sieve1ValueCumulative"] = $row['sieve_1_value_cumulative'];
            $sampleObject->vars["sieve1ValueCumulativePassing"] = $row['sieve_1_value_cumulative_passing'];
            $sampleObject->vars["sieve2Desc"] = $row['sieve_2_desc'];
            $sampleObject->vars["sieve2Value"] = $row['sieve_2_value'];
            $sampleObject->vars["sieve2ValueCumulative"] = $row['sieve_2_value_cumulative'];
            $sampleObject->vars["sieve2ValueCumulativePassing"] = $row['sieve_2_value_cumulative_passing'];
            $sampleObject->vars["sieve3Desc"] = $row['sieve_3_desc'];
            $sampleObject->vars["sieve3Value"] = $row['sieve_3_value'];
            $sampleObject->vars["sieve3ValueCumulative"] = $row['sieve_3_value_cumulative'];
            $sampleObject->vars["sieve3ValueCumulativePassing"] = $row['sieve_3_value_cumulative_passing'];
            $sampleObject->vars["sieve4Desc"] = $row['sieve_4_desc'];
            $sampleObject->vars["sieve4Value"] = $row['sieve_4_value'];
            $sampleObject->vars["sieve4ValueCumulative"] = $row['sieve_4_value_cumulative'];
            $sampleObject->vars["sieve4ValueCumulativePassing"] = $row['sieve_4_value_cumulative_passing'];
            $sampleObject->vars["sieve5Desc"] = $row['sieve_5_desc'];
            $sampleObject->vars["sieve5Value"] = $row['sieve_5_value'];
            $sampleObject->vars["sieve5ValueCumulative"] = $row['sieve_5_value_cumulative'];
            $sampleObject->vars["sieve5ValueCumulativePassing"] = $row['sieve_5_value_cumulative_passing'];
            $sampleObject->vars["sieve6Desc"] = $row['sieve_6_desc'];
            $sampleObject->vars["sieve6Value"] = $row['sieve_6_value'];
            $sampleObject->vars["sieve6ValueCumulative"] = $row['sieve_6_value_cumulative'];
            $sampleObject->vars["sieve6ValueCumulativePassing"] = $row['sieve_6_value_cumulative_passing'];
            $sampleObject->vars["sieve7Desc"] = $row['sieve_7_desc'];
            $sampleObject->vars["sieve7Value"] = $row['sieve_7_value'];
            $sampleObject->vars["sieve7ValueCumulative"] = $row['sieve_7_value_cumulative'];
            $sampleObject->vars["sieve7ValueCumulativePassing"] = $row['sieve_7_value_cumulative_passing'];
            $sampleObject->vars["sieve8Desc"] = $row['sieve_8_desc'];
            $sampleObject->vars["sieve8Value"] = $row['sieve_8_value'];
            $sampleObject->vars["sieve8ValueCumulative"] = $row['sieve_8_value_cumulative'];
            $sampleObject->vars["sieve8ValueCumulativePassing"] = $row['sieve_8_value_cumulative_passing'];
            $sampleObject->vars["sieve9Desc"] = $row['sieve_9_desc'];
            $sampleObject->vars["sieve9Value"] = $row['sieve_9_value'];
            $sampleObject->vars["sieve9ValueCumulative"] = $row['sieve_9_value_cumulative'];
            $sampleObject->vars["sieve9ValueCumulativePassing"] = $row['sieve_9_value_cumulative_passing'];
            $sampleObject->vars["sieve10Desc"] = $row['sieve_10_desc'];
            $sampleObject->vars["sieve10Value"] = $row['sieve_10_value'];
            $sampleObject->vars["sieve10ValueCumulative"] = $row['sieve_10_value_cumulative'];
            $sampleObject->vars["sieve10ValueCumulativePassing"] = $row['sieve_10_value_cumulative_passing'];
            $sampleObject->vars["totalFinalWeight"] = $row['sieves_total'];
            $sampleObject->vars["startWeightsRaw"] = $row['start_weights_raw'];
            $sampleObject->vars["endWeightsRaw"] = $row['end_weights_raw'];
            $sampleObject->vars["finalWeightsRaw"] = $row['sieves_raw'];
            $sampleObject->vars["feedRowNo"] = $row['feed_row_no'];
            $sampleObject->vars["plus70"] = $row['plus_70'];
            $sampleObject->vars["plus50"] = $row['plus_50'];
            $sampleObject->vars["plus40"] = $row['plus_40'];
            $sampleObject->vars["neg40Plus70"] = $row['minus_40_plus_70'];
            $sampleObject->vars["neg70"] = $row['minus_70'];
            $sampleObject->vars["neg70Plus140"] = $row['minus_70_plus_140'];
            $sampleObject->vars["plus140"] = $row['plus_140'];
            $sampleObject->vars["neg60Plus70"] = $row['minus_60_plus_70'];
            $sampleObject->vars["neg140Plus325"] = $row['minus_140_plus_325'];
            $sampleObject->vars["neg140"] = $row['minus_140'];
            $sampleObject->vars["nearSize"] = $row['near_size'];
            $sampleObject->vars["cutRatio"] = $row['cut_ratio'];
            $sampleObject->vars["wpMoistureRatio"] = $row['wp_moisture_rate'];
            $sampleObject->vars["percentSolids"] = $row['percent_solids'];
            $sampleObject->vars["stph"] = $row['stph'];
            $sampleObject->vars["tonsRepresented"] = $row['tons_represented'];
            $sampleObject->vars["tphRepresented"] = $row['tph_represented'];
            $sampleObject->vars["recoveryPlusSeventy"] = $row['recovery_plus_70'];
            $sampleObject->vars["recoveryPlusOneForty"] = $row['recovery_plus_140'];
            $sampleObject->vars["isRemoved"] = $row['is_removed'];
            $sampleObject->vars["voidStatusCode"] = $row['void_status_code'];
            $sampleObject->vars["createDateTime"] = $row['create_date'];
            $sampleObject->vars["createUserId"] = $row['create_user_id'];
            $sampleObject->vars["editDateTime"] = $row['modify_date'];
            $sampleObject->vars["editUserId"] = $row['edit_user_id'];

            $sampleObject->vars["sieve11Desc"] = $row['sieve_11_desc'];
            $sampleObject->vars["sieve11Value"] = $row['sieve_11_value'];
            $sampleObject->vars["sieve11ValueCumulative"] = $row['sieve_11_value_cumulative'];
            $sampleObject->vars["sieve11ValueCumulativePassing"] = $row['sieve_11_value_cumulative_passing'];

            $sampleObject->vars["sieve12Desc"] = $row['sieve_12_desc'];
            $sampleObject->vars["sieve12Value"] = $row['sieve_12_value'];
            $sampleObject->vars["sieve12ValueCumulative"] = $row['sieve_12_value_cumulative'];
            $sampleObject->vars["sieve12ValueCumulativePassing"] = $row['sieve_12_value_cumulative_passing'];

            $sampleObject->vars["sieve13Desc"] = $row['sieve_13_desc'];
            $sampleObject->vars["sieve13Value"] = $row['sieve_13_value'];
            $sampleObject->vars["sieve13ValueCumulative"] = $row['sieve_13_value_cumulative'];
            $sampleObject->vars["sieve13ValueCumulativePassing"] = $row['sieve_13_value_cumulative_passing'];

            $sampleObject->vars["sieve14Desc"] = $row['sieve_14_desc'];
            $sampleObject->vars["sieve14Value"] = $row['sieve_14_value'];
            $sampleObject->vars["sieve14ValueCumulative"] = $row['sieve_14_value_cumulative'];
            $sampleObject->vars["sieve14ValueCumulativePassing"] = $row['sieve_14_value_cumulative_passing'];

            $sampleObject->vars["sieve15Desc"] = $row['sieve_15_desc'];
            $sampleObject->vars["sieve15Value"] = $row['sieve_15_value'];
            $sampleObject->vars["sieve15ValueCumulative"] = $row['sieve_15_value_cumulative'];
            $sampleObject->vars["sieve15ValueCumulativePassing"] = $row['sieve_15_value_cumulative_passing'];

            $sampleObject->vars["sieve16Desc"] = $row['sieve_16_desc'];
            $sampleObject->vars["sieve16Value"] = $row['sieve_16_value'];
            $sampleObject->vars["sieve16ValueCumulative"] = $row['sieve_16_value_cumulative'];
            $sampleObject->vars["sieve16ValueCumulativePassing"] = $row['sieve_16_value_cumulative_passing'];

            $sampleObject->vars["sieve17Desc"] = $row['sieve_17_desc'];
            $sampleObject->vars["sieve17Value"] = $row['sieve_17_value'];
            $sampleObject->vars["sieve17ValueCumulative"] = $row['sieve_17_value_cumulative'];
            $sampleObject->vars["sieve17ValueCumulativePassing"] = $row['sieve_17_value_cumulative_passing'];

            $sampleObject->vars["sieve18Desc"] = $row['sieve_18_desc'];
            $sampleObject->vars["sieve18Value"] = $row['sieve_18_value'];
            $sampleObject->vars["sieve18ValueCumulative"] = $row['sieve_18_value_cumulative'];
            $sampleObject->vars["sieve18ValueCumulativePassing"] = $row['sieve_18_value_cumulative_passing'];

            $sampleObject->vars["isCOA"] = $row['is_coa'];
            $sampleObject->vars["isComplete"] = $row['is_complete'];
            $sampleObject->vars["siltHeight"] = $row['silt_height'];
            $sampleObject->vars["sandHeight"] = $row['sand_height'];
            $sampleObject->vars["siltPercent"] = $row['silt_percent'];

        }
        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a sample by ID.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $sampleObject;
}


/*******************************************************************************
 * Function Name: updateSample($sampleObject)
 * Description:
 * This function will:
 * Accept an object containing sample info as an argument.
 * Update the sample in the database.
 * The sample will be identified based on the sample id.
 *******************************************************************************/
function updateSample($sampleObject)
{
    $errorMessage = "qcfunctions.php - updateSample() ";

    $returnValue = 0; //a value to tell us if the process was successful.
    $sampleIsComplete = 0; //stores whether the sample is complete.

    try
    {
        $currentDateTime = date("Y-m-d G:i", mktime(date("G"), date("i"), date("s"), date("m"), date("d"), date("Y"))); //today's date time for the database

        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        $userId = $sampleObject->vars["userId"];
        $id = $sampleObject->vars["id"];
        $siteId = $sampleObject->vars['siteId'];
        $plantId = $sampleObject->vars['plantId'];
        $dt = $sampleObject->vars['dt'];
        $testTypeId = $sampleObject->vars['testTypeId'];
        $compositeTypeId = $sampleObject->vars['compositeTypeId'];
        $sieveStackId = $sampleObject->vars['sieveStackId'];
        $locationId = $sampleObject->vars['locationId'];
        $specificLocationId = $sampleObject->vars['specificLocationId'];
        $date = $sampleObject->vars['date'];
        $time = $sampleObject->vars['time'];
        $dateShort = $sampleObject->vars['dateShort'];
        $dtShort = $sampleObject->vars['dtShort'];

        $drillholeNo = $sampleObject->vars['drillholeNo'];
        $depthFrom = $sampleObject->vars['depthFrom'];
        $depthTo = $sampleObject->vars['depthTo'];
        $slimes = $sampleObject->vars['slimes'];
        $oversizeWeight = $sampleObject->vars['oversizeWeight'];
        $oversizePercent = $sampleObject->vars['oversizePercent'];

        $description = $sampleObject->vars['description'];
        $sampler = $sampleObject->vars['sampler'];
        $labTech = $sampleObject->vars['labTech'];
        $operator = $sampleObject->vars['operator'];
        $beginningWetWeight = $sampleObject->vars['beginningWetWeight'];
        $preWashDryWeight = $sampleObject->vars['preWashDryWeight'];
        $postWashDryWeight = $sampleObject->vars['postWashDryWeight'];
        $splitSampleWeight = $sampleObject->vars['splitSampleWeight'];
        $moistureRate = $sampleObject->vars['moistureRate'];
        $notes = $sampleObject->vars['notes'];
        $turbidity = $sampleObject->vars['turbidity'];
        $kValue = $sampleObject->vars['kValue'];
        $kPan1 = $sampleObject->vars['kPan1'];
        $kPan2 = $sampleObject->vars['kPan2'];
        $kPan3 = $sampleObject->vars['kPan3'];
        $roundness = $sampleObject->vars['roundness'];
        $sphericity = $sampleObject->vars['sphericity'];
        $groupTime = $sampleObject->vars['groupTime'];
        $startWeights = $sampleObject->vars['startWeights'];
        $endWeights = $sampleObject->vars['endWeights'];
        //dev note: it is unclear where the final weigths were intended to be stored in the database.
        //We are making the assumption that finalWeights and sieves_raw are the same thing.
        $finalWeights = $sampleObject->vars['finalWeights'];
        $totalFinalWeight = $sampleObject->vars['totalFinalWeight']; //this is a sum of the final sieve weights

        //sieve_n_value ..
        $percentFinal1 = $sampleObject->vars['sieve_1_value'];
        $percentFinal2 = $sampleObject->vars['sieve_2_value'];
        $percentFinal3 = $sampleObject->vars['sieve_3_value'];
        $percentFinal4 = $sampleObject->vars['sieve_4_value'];
        $percentFinal5 = $sampleObject->vars['sieve_5_value'];
        $percentFinal6 = $sampleObject->vars['sieve_6_value'];
        $percentFinal7 = $sampleObject->vars['sieve_7_value'];
        $percentFinal8 = $sampleObject->vars['sieve_8_value'];
        $percentFinal9 = $sampleObject->vars['sieve_9_value'];
        $percentFinal10 = $sampleObject->vars['sieve_10_value'];
        $percentFinal11 = $sampleObject->vars['sieve_11_value'];
        $percentFinal12 = $sampleObject->vars['sieve_12_value'];
        $percentFinal13 = $sampleObject->vars['sieve_13_value'];
        $percentFinal14 = $sampleObject->vars['sieve_14_value'];
        $percentFinal15 = $sampleObject->vars['sieve_15_value'];
        $percentFinal16 = $sampleObject->vars['sieve_16_value'];
        $percentFinal17 = $sampleObject->vars['sieve_17_value'];
        $percentFinal18 = $sampleObject->vars['sieve_18_value'];

        //sieve_n_desc ..
        $screenSize1 = $sampleObject->vars['screenSize1'];
        $screenSize2 = $sampleObject->vars['screenSize2'];
        $screenSize3 = $sampleObject->vars['screenSize3'];
        $screenSize4 = $sampleObject->vars['screenSize4'];
        $screenSize5 = $sampleObject->vars['screenSize5'];
        $screenSize6 = $sampleObject->vars['screenSize6'];
        $screenSize7 = $sampleObject->vars['screenSize7'];
        $screenSize8 = $sampleObject->vars['screenSize8'];
        $screenSize9 = $sampleObject->vars['screenSize9'];
        $screenSize10 = $sampleObject->vars['screenSize10'];
        $screenSize11 = $sampleObject->vars['screenSize11'];
        $screenSize12 = $sampleObject->vars['screenSize12'];
        $screenSize13 = $sampleObject->vars['screenSize13'];
        $screenSize14 = $sampleObject->vars['screenSize14'];
        $screenSize15 = $sampleObject->vars['screenSize15'];
        $screenSize16 = $sampleObject->vars['screenSize16'];
        $screenSize17 = $sampleObject->vars['screenSize17'];
        $screenSize18 = $sampleObject->vars['screenSize18']; //this value is always "PAN"

        //plus 70
        $plusSeventy = $sampleObject->vars['plus70'];

        //plus 50
        $plusFifty = $sampleObject->vars['plus50'];

        //plus 40
        $plusForty = $sampleObject->vars['plus40'];

        //minus_40_plus_70
        $negFortyPlusSeventy = $sampleObject->vars['neg40Plus70'];

        //minus_50_plus_140
        $negFiftyPlusOneForty = $sampleObject->vars['neg50Plus140'];

        //minus_70
        $negSeventy = $sampleObject->vars['neg70'];

        //minus_70_plus_140
        $negSeventyPlusOneForty = $sampleObject->vars['neg70Plus140'];

        //plus_140
        //DEV NOTE: This field is not in the Sample Edit requirements. However it appeared on the Back Office QC Overview page.

        //minus_60_plus_70
        $negSixtyPlusSeventy = $sampleObject->vars['neg60Plus70'];

        //minus_140_plus_325
        $negOneFortyPlusThreeTwentyFive = $sampleObject->vars['neg140Plus325'];

        //minus_140
        $negOneForty = $sampleObject->vars['neg140'];

        //near size
        $nearSize = $sampleObject->vars['nearSize'];

        //finish_dt
        $finishDateTime = $sampleObject->vars['finishDateTime'];

        //is_COA
        $isCOA = $sampleObject->vars['isCOA'];

        $siltPercent = $sampleObject->vars['siltPercent'];
        $sandHeight = $sampleObject->vars['sandHeight'];
        $siltHeight = $sampleObject->vars['siltHeight'];

        //echo "DEBUG: finishDateTime = " . $finishDateTime . "<br/>";

        //calculate duration and duration_minutes
        $duration = "";
        $duration_minutes = "";
        if($finishDateTime != "")
        {
            $dt_time = strtotime($dt);
            $finishDateTime_time = strtotime($finishDateTime);
            $duration = round((abs($finishDateTime_time - $dt_time) / 3600),2); //hours
            $duration_minutes = round((abs($finishDateTime_time - $dt_time) / 60),2); //minutes

            //prevent overflow situations where the user might not finish a sample for a really long time
            if($duration > 999)
            {
                $duration = 999;
            }
            if($duration_minutes > 999)
            {
                $duration_minutes = 999;
            }

        }
        else
        {
            $duration = "";
            $duration_minutes = "";
        }

        //echo "DEBUG: finishDateTime = " . $finishDateTime . "<br/>";
        //echo "DEBUG: duration = " . $duration . "<br/>";
        //echo "DEBUG: duration_minutes = " . $duration_minutes . "<br/>";

        //direct SQL method
        if($finishDateTime == "") //necessary to solve a bug involving saving a null value
        {
            $finishDateTime = "null";
        }
        else
        {
            $finishDateTime = "'" . $finishDateTime . "'";
        }

        if($duration == "") //necessary to solve a bug involving saving a null value
        {
            $duration = "null";
        }
        else
        {
            $duration = "'" . $duration . "'";
        }

        if($duration_minutes == "") //necessary to solve a bug involving saving a null value
        {
            $duration_minutes = "null";
        }
        else
        {
            $duration_minutes = "'" . $duration_minutes . "'";
        }

        $sql = "CALL sp_gb_qc_SampleUpdate('"
            . $id . "', '"
            . $currentDateTime . "', '"
            . $userId . "', '"
            . $siteId . "', '"
            . $plantId . "', '"
            . $dt . "', '"
            . $testTypeId . "', '"
            . $compositeTypeId . "', '"
            . $sieveStackId . "', '"
            . $locationId . "', '"
            . $specificLocationId . "', '"
            . $date . "', '"
            . $time . "', "
            . $dateShort . ", "
            . $dtShort . ", '"
            . $oversizePercent . "', '"
            . $oversizeWeight . "', '"
            . $slimes . "', '"
            . $depthTo . "', '"
            . $depthFrom . "', '"
            . $drillholeNo . "', '"
            . $description . "', '"
            . $sampler . "', '"
            . $labTech . "', '"
            . $operator . "', '"
            . $beginningWetWeight . "', '"
            . $preWashDryWeight . "', '"
            . $postWashDryWeight . "', '"
            . $splitSampleWeight . "', '"
            . $moistureRate . "', '"
            . $notes . "', '"
            . $turbidity . "', '"
            . $kValue . "', '"
            . $kPan1 . "', '"
            . $kPan2 . "', '"
            . $kPan3 . "', '"
            . $roundness . "', '"
            . $sphericity . "', '"
            . $groupTime . "', '"
            . $startWeights . "', '"
            . $endWeights . "', '"
            . $finalWeights . "', '"
            . $totalFinalWeight . "', '"
            . $percentFinal1 . "', '"
            . $percentFinal2 . "', '"
            . $percentFinal3 . "', '"
            . $percentFinal4 . "', '"
            . $percentFinal5 . "', '"
            . $percentFinal6 . "', '"
            . $percentFinal7 . "', '"
            . $percentFinal8 . "', '"
            . $percentFinal9 . "', '"
            . $percentFinal10 . "', '"
            . $percentFinal11 . "', '"
            . $percentFinal12 . "', '"
            . $percentFinal13 . "', '"
            . $percentFinal14 . "', '"
            . $percentFinal15 . "', '"
            . $percentFinal16 . "', '"
            . $percentFinal17 . "', '"
            . $percentFinal18 . "', '"
            . $screenSize1 . "', '"
            . $screenSize2 . "', '"
            . $screenSize3 . "', '"
            . $screenSize4 . "', '"
            . $screenSize5 . "', '"
            . $screenSize6 . "', '"
            . $screenSize7 . "', '"
            . $screenSize8 . "', '"
            . $screenSize9 . "', '"
            . $screenSize10 . "', '"
            . $screenSize11 . "', '"
            . $screenSize12 . "', '"
            . $screenSize13 . "', '"
            . $screenSize14 . "', '"
            . $screenSize15 . "', '"
            . $screenSize16 . "', '"
            . $screenSize17 . "', '"
            . $screenSize18 . "', '"
            . $plusSeventy . "', '"
            . $plusFifty  . "', '"
            . $plusForty . "', '"
            . $negFiftyPlusOneForty . "', '"
            . $negFortyPlusSeventy . "', '"
            . $negSeventy . "', '"
            . $negSeventyPlusOneForty . "', '"
            . $negSixtyPlusSeventy . "', '"
            . $negOneFortyPlusThreeTwentyFive . "', '"
            . $negOneForty . "', "
            . $finishDateTime . ", "
            . $duration . ", "
            . $duration_minutes . ", '"
            . $isCOA . "', '"
            . $nearSize . "' , '"
            . $sandHeight . "', '"
            . $siltHeight . "' , '"
            . $siltPercent . "')";

        echo $sql;

        if($mySQLConnectionLocal->query($sql) === TRUE) //direct SQL method
        {

            //now update the is_complete flag, so that the sample displays properly in the Overview screen
            $sampleIsComplete = checkIfSampleIsComplete($id);

            if($sampleIsComplete == 1)
            {
                $sql2 = "UPDATE gb_qc_samples SET `is_complete` = '1' WHERE `id` = '$id';";
            }
            else
            {
                $sql2 = "UPDATE gb_qc_samples SET `is_complete` = '0' WHERE `id` = '$id';";
            }

            if($mySQLConnectionLocal->query($sql2) === TRUE) //direct SQL method
            {
                $returnValue = 1;
            }
            else
            {
                echo "Error updating the is_complete status of sample ID: " . $id . ". Error Details: " . $mySQLConnectionLocal->error . "<br/>";
                $errorMessage = $errorMessage . "Error updating the is_complete status of sample ID: " . $id . ". Error Details: " . $mySQLConnectionLocal->error . "<br/>";
                $errorMessage = $errorMessage . "Silicore QC Sample details: ";
                $errorMessage = $errorMessage . "currentDateTime = " . $currentDateTime . "\n" .
                    "userId = " . $userId . "\n" .
                    "id = " . $id . "\n" .
                    "plantId = " . $plantId . "\n" .
                    "dt = " . $dt . "\n" .
                    "testTypeId = " . $testTypeId . "\n" .
                    "compositeTypeId = " . $compositeTypeId . "\n" .
                    "sieveStackId = " . $sieveStackId . "\n" .
                    "locationId = " . $locationId . "\n" .
                    "specificLocationId = " . $specificLocationId . "\n" .
                    "date = " . $date . "\n" .
                    "time = " . $time . "\n" .
                    "dateShort = " . $dateShort . "\n" .
                    "dtShort = " . $dtShort . "\n" .
                    "drillholeNo = " . $drillholeNo . "\n" .
                    "depthFrom = " . $depthFrom . "\n" .
                    "depthTo = " . $depthTo . "\n" .
                    "slimes = " . $slimes . "\n" .
                    "oversizeWeight = " . $oversizeWeight . "\n" .
                    "oversizePercent = " . $oversizePercent . "\n" .
                    "description = " . $description . "\n" .
                    "sampler = " . $sampler . "\n" .
                    "labTech = " . $labTech . "\n" .
                    "operator = " . $operator . "\n" .
                    "beginningWetWeight = " . $beginningWetWeight . "\n" .
                    "preWashDryWeight = " . $preWashDryWeight . "\n" .
                    "postWashDryWeight = " . $postWashDryWeight . "\n" .
                    "splitSampleWeight = " . $splitSampleWeight . "\n" .
                    "moistureRate = " . $moistureRate . "\n" .
                    "notes = " . $notes . "\n" .
                    "turbidity = " . $turbidity . "\n" .
                    "kValue = " . $kValue . "\n" .
                    "kPan1 = " . $kPan1 . "\n" .
                    "kPan2 = " . $kPan2 . "\n" .
                    "kPan3 = " . $kPan3 . "\n" .
                    "roundness = " . $roundness . "\n" .
                    "sphericity = " . $sphericity . "\n" .
                    "groupTime = " . $groupTime . "\n" .
                    "startWeights = " . $startWeights . "\n" .
                    "endWeights = " . $endWeights . "\n" .
                    "finalWeights = " . $finalWeights . "\n" .
                    "totalFinalWeight = " . $totalFinalWeight . "\n" .
                    "percentFinal1 = " . $percentFinal1 . "\n" .
                    "percentFinal2 = " . $percentFinal2 . "\n" .
                    "percentFinal3 = " . $percentFinal3 . "\n" .
                    "percentFinal4 = " . $percentFinal4 . "\n" .
                    "percentFinal5 = " . $percentFinal5 . "\n" .
                    "percentFinal6 = " . $percentFinal6 . "\n" .
                    "percentFinal7 = " . $percentFinal7 . "\n" .
                    "percentFinal8 = " . $percentFinal8 . "\n" .
                    "percentFinal9 = " . $percentFinal9 . "\n" .
                    "percentFinal10 = " . $percentFinal10 . "\n" .
                    "percentFinal11 = " . $percentFinal11 . "\n" .
                    "percentFinal12 = " . $percentFinal12 . "\n" .
                    "percentFinal13 = " . $percentFinal13 . "\n" .
                    "percentFinal14 = " . $percentFinal14 . "\n" .
                    "percentFinal15 = " . $percentFinal15 . "\n" .
                    "percentFinal16 = " . $percentFinal16 . "\n" .
                    "percentFinal17 = " . $percentFinal17 . "\n" .
                    "percentFinal18 = " . $percentFinal18 . "\n" .
                    "screenSize1 = " . $screenSize1 . "\n" .
                    "screenSize2 = " . $screenSize2 . "\n" .
                    "screenSize3 = " . $screenSize3 . "\n" .
                    "screenSize4 = " . $screenSize4 . "\n" .
                    "screenSize5 = " . $screenSize5 . "\n" .
                    "screenSize6 = " . $screenSize6 . "\n" .
                    "screenSize7 = " . $screenSize7 . "\n" .
                    "screenSize8 = " . $screenSize8 . "\n" .
                    "screenSize9 = " . $screenSize9 . "\n" .
                    "screenSize10 = " . $screenSize10 . "\n" .
                    "screenSize11 = " . $screenSize11 . "\n" .
                    "screenSize12 = " . $screenSize12 . "\n" .
                    "screenSize13 = " . $screenSize13 . "\n" .
                    "screenSize14 = " . $screenSize14 . "\n" .
                    "screenSize15 = " . $screenSize15 . "\n" .
                    "screenSize16 = " . $screenSize16 . "\n" .
                    "screenSize17 = " . $screenSize17 . "\n" .
                    "screenSize18 = " . $screenSize18 . "\n" .
                    "plusSeventy = " . $plusSeventy . "\n" .
                    "negFiftyPlusOneForty = " . $negFiftyPlusOneForty . "\n" .
                    "negFortyPlusSeventy = " . $negFortyPlusSeventy . "\n" .
                    "negSeventy = " . $negSeventy . "\n" .
                    "negSeventyPlusOneForty = " . $negSeventyPlusOneForty . "\n" .
                    "negOneForty = " . $negOneForty . "\n" .
                    "nearSize = " . $nearSize . "\n" .
                    "finishDateTime = " . $finishDateTime . "\n" .
                    "isCOA = " . $isCOA . "\n" .
                    "duration = " . $duration . "\n" .
                    "duration_minutes = " . $duration_minutes . "\n" .
                    "sampleIsComplete = " . $sampleIsComplete . "\n";

                sendErrorMessage(0, $errorMessage); //requires emailfunctions.php
                $returnValue = 0;
            }

        }
        else
        {
            echo "Error updating sample ID: " . $id . ". Error Details: " . $mySQLConnectionLocal->error . "<br/>";
            $errorMessage = $errorMessage . "Error updating sample ID: " . $id . ". Error Details: " . $mySQLConnectionLocal->error . " \n";
            $errorMessage = $errorMessage . "Silicore QC Sample details: ";
            $errorMessage = $errorMessage . "currentDateTime = " . $currentDateTime . "\n" .
                "userId = " . $userId . "\n" .
                "id = " . $id . "\n" .
                "plantId = " . $plantId . "\n" .
                "dt = " . $dt . "\n" .
                "testTypeId = " . $testTypeId . "\n" .
                "compositeTypeId = " . $compositeTypeId . "\n" .
                "sieveStackId = " . $sieveStackId . "\n" .
                "locationId = " . $locationId . "\n" .
                "specificLocationId = " . $specificLocationId . "\n" .
                "date = " . $date . "\n" .
                "time = " . $time . "\n" .
                "dateShort = " . $dateShort . "\n" .
                "dtShort = " . $dtShort . "\n" .
                "drillholeNo = " . $drillholeNo . "\n" .
                "depthFrom = " . $depthFrom . "\n" .
                "depthTo = " . $depthTo . "\n" .
                "slimes = " . $slimes . "\n" .
                "oversizeWeight = " . $oversizeWeight . "\n" .
                "oversizePercent = " . $oversizePercent . "\n" .
                "description = " . $description . "\n" .
                "sampler = " . $sampler . "\n" .
                "labTech = " . $labTech . "\n" .
                "operator = " . $operator . "\n" .
                "beginningWetWeight = " . $beginningWetWeight . "\n" .
                "preWashDryWeight = " . $preWashDryWeight . "\n" .
                "postWashDryWeight = " . $postWashDryWeight . "\n" .
                "splitSampleWeight = " . $splitSampleWeight . "\n" .
                "moistureRate = " . $moistureRate . "\n" .
                "notes = " . $notes . "\n" .
                "turbidity = " . $turbidity . "\n" .
                "kValue = " . $kValue . "\n" .
                "kPan1 = " . $kPan1 . "\n" .
                "kPan2 = " . $kPan2 . "\n" .
                "kPan3 = " . $kPan3 . "\n" .
                "roundness = " . $roundness . "\n" .
                "sphericity = " . $sphericity . "\n" .
                "groupTime = " . $groupTime . "\n" .
                "startWeights = " . $startWeights . "\n" .
                "endWeights = " . $endWeights . "\n" .
                "finalWeights = " . $finalWeights . "\n" .
                "totalFinalWeight = " . $totalFinalWeight . "\n" .
                "percentFinal1 = " . $percentFinal1 . "\n" .
                "percentFinal2 = " . $percentFinal2 . "\n" .
                "percentFinal3 = " . $percentFinal3 . "\n" .
                "percentFinal4 = " . $percentFinal4 . "\n" .
                "percentFinal5 = " . $percentFinal5 . "\n" .
                "percentFinal6 = " . $percentFinal6 . "\n" .
                "percentFinal7 = " . $percentFinal7 . "\n" .
                "percentFinal8 = " . $percentFinal8 . "\n" .
                "percentFinal9 = " . $percentFinal9 . "\n" .
                "percentFinal10 = " . $percentFinal10 . "\n" .
                "percentFinal11 = " . $percentFinal11 . "\n" .
                "percentFinal12 = " . $percentFinal12 . "\n" .
                "percentFinal13 = " . $percentFinal13 . "\n" .
                "percentFinal14 = " . $percentFinal14 . "\n" .
                "percentFinal15 = " . $percentFinal15 . "\n" .
                "percentFinal16 = " . $percentFinal16 . "\n" .
                "percentFinal17 = " . $percentFinal17 . "\n" .
                "percentFinal18 = " . $percentFinal18 . "\n" .
                "screenSize1 = " . $screenSize1 . "\n" .
                "screenSize2 = " . $screenSize2 . "\n" .
                "screenSize3 = " . $screenSize3 . "\n" .
                "screenSize4 = " . $screenSize4 . "\n" .
                "screenSize5 = " . $screenSize5 . "\n" .
                "screenSize6 = " . $screenSize6 . "\n" .
                "screenSize7 = " . $screenSize7 . "\n" .
                "screenSize8 = " . $screenSize8 . "\n" .
                "screenSize9 = " . $screenSize9 . "\n" .
                "screenSize10 = " . $screenSize10 . "\n" .
                "screenSize11 = " . $screenSize11 . "\n" .
                "screenSize12 = " . $screenSize12 . "\n" .
                "screenSize13 = " . $screenSize13 . "\n" .
                "screenSize14 = " . $screenSize14 . "\n" .
                "screenSize15 = " . $screenSize15 . "\n" .
                "screenSize16 = " . $screenSize16 . "\n" .
                "screenSize17 = " . $screenSize17 . "\n" .
                "screenSize18 = " . $screenSize18 . "\n" .
                "plusSeventy = " . $plusSeventy . "\n" .
                "negFiftyPlusOneForty = " . $negFiftyPlusOneForty . "\n" .
                "negFortyPlusSeventy = " . $negFortyPlusSeventy . "\n" .
                "negSeventy = " . $negSeventy . "\n" .
                "negSeventyPlusOneForty = " . $negSeventyPlusOneForty . "\n" .
                "negOneForty = " . $negOneForty . "\n" .
                "nearSize = " . $nearSize . "\n" .
                "finishDateTime = " . $finishDateTime . "\n" .
                "isCOA = " . $isCOA . "\n" .
                "duration = " . $duration . "\n" .
                "duration_minutes = " . $duration_minutes . "\n" .
                "sampleIsComplete = " . $sampleIsComplete . "\n";

            sendErrorMessage(0, $errorMessage); //requires emailfunctions.php
            $returnValue = 0;
        }



        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error updating a sample.";
        $errorMessage = $errorMessage . "Silicore QC Sample details: ";
        $errorMessage = $errorMessage . "currentDateTime = " . $currentDateTime . "\n" .
            "userId = " . $userId . "\n" .
            "id = " . $id . "\n" .
            "plantId = " . $plantId . "\n" .
            "dt = " . $dt . "\n" .
            "testTypeId = " . $testTypeId . "\n" .
            "compositeTypeId = " . $compositeTypeId . "\n" .
            "sieveStackId = " . $sieveStackId . "\n" .
            "locationId = " . $locationId . "\n" .
            "specificLocationId = " . $specificLocationId . "\n" .
            "date = " . $date . "\n" .
            "time = " . $time . "\n" .
            "dateShort = " . $dateShort . "\n" .
            "dtShort = " . $dtShort . "\n" .
            "drillholeNo = " . $drillholeNo . "\n" .
            "depthFrom = " . $depthFrom . "\n" .
            "depthTo = " . $depthTo . "\n" .
            "slimes = " . $slimes . "\n" .
            "oversizeWeight = " . $oversizeWeight . "\n" .
            "oversizePercent = " . $oversizePercent . "\n" .
            "description = " . $description . "\n" .
            "sampler = " . $sampler . "\n" .
            "labTech = " . $labTech . "\n" .
            "operator = " . $operator . "\n" .
            "beginningWetWeight = " . $beginningWetWeight . "\n" .
            "preWashDryWeight = " . $preWashDryWeight . "\n" .
            "postWashDryWeight = " . $postWashDryWeight . "\n" .
            "splitSampleWeight = " . $splitSampleWeight . "\n" .
            "moistureRate = " . $moistureRate . "\n" .
            "notes = " . $notes . "\n" .
            "turbidity = " . $turbidity . "\n" .
            "kValue = " . $kValue . "\n" .
            "kPan1 = " . $kPan1 . "\n" .
            "kPan2 = " . $kPan2 . "\n" .
            "kPan3 = " . $kPan3 . "\n" .
            "roundness = " . $roundness . "\n" .
            "sphericity = " . $sphericity . "\n" .
            "groupTime = " . $groupTime . "\n" .
            "startWeights = " . $startWeights . "\n" .
            "endWeights = " . $endWeights . "\n" .
            "finalWeights = " . $finalWeights . "\n" .
            "totalFinalWeight = " . $totalFinalWeight . "\n" .
            "percentFinal1 = " . $percentFinal1 . "\n" .
            "percentFinal2 = " . $percentFinal2 . "\n" .
            "percentFinal3 = " . $percentFinal3 . "\n" .
            "percentFinal4 = " . $percentFinal4 . "\n" .
            "percentFinal5 = " . $percentFinal5 . "\n" .
            "percentFinal6 = " . $percentFinal6 . "\n" .
            "percentFinal7 = " . $percentFinal7 . "\n" .
            "percentFinal8 = " . $percentFinal8 . "\n" .
            "percentFinal9 = " . $percentFinal9 . "\n" .
            "percentFinal10 = " . $percentFinal10 . "\n" .
            "percentFinal11 = " . $percentFinal11 . "\n" .
            "percentFinal12 = " . $percentFinal12 . "\n" .
            "percentFinal13 = " . $percentFinal13 . "\n" .
            "percentFinal14 = " . $percentFinal14 . "\n" .
            "percentFinal15 = " . $percentFinal15 . "\n" .
            "percentFinal16 = " . $percentFinal16 . "\n" .
            "percentFinal17 = " . $percentFinal17 . "\n" .
            "percentFinal18 = " . $percentFinal18 . "\n" .
            "screenSize1 = " . $screenSize1 . "\n" .
            "screenSize2 = " . $screenSize2 . "\n" .
            "screenSize3 = " . $screenSize3 . "\n" .
            "screenSize4 = " . $screenSize4 . "\n" .
            "screenSize5 = " . $screenSize5 . "\n" .
            "screenSize6 = " . $screenSize6 . "\n" .
            "screenSize7 = " . $screenSize7 . "\n" .
            "screenSize8 = " . $screenSize8 . "\n" .
            "screenSize9 = " . $screenSize9 . "\n" .
            "screenSize10 = " . $screenSize10 . "\n" .
            "screenSize11 = " . $screenSize11 . "\n" .
            "screenSize12 = " . $screenSize12 . "\n" .
            "screenSize13 = " . $screenSize13 . "\n" .
            "screenSize14 = " . $screenSize14 . "\n" .
            "screenSize15 = " . $screenSize15 . "\n" .
            "screenSize16 = " . $screenSize16 . "\n" .
            "screenSize17 = " . $screenSize17 . "\n" .
            "screenSize18 = " . $screenSize18 . "\n" .
            "plusSeventy = " . $plusSeventy . "\n" .
            "negFortyPlusSeventy = " . $negFortyPlusSeventy . "\n" .
            "negSeventy = " . $negSeventy . "\n" .
            "negSeventyPlusOneForty = " . $negSeventyPlusOneForty . "\n" .
            "negOneForty = " . $negOneForty . "\n" .
            "nearSize = " . $nearSize . "\n" .
            "finishDateTime = " . $finishDateTime . "\n" .
            "isCOA = " . $isCOA . "\n" .
            "duration = " . $duration . "\n" .
            "duration_minutes = " . $duration_minutes . "\n" .
            "sampleIsComplete = " . $sampleIsComplete . "\n";

        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;

            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $returnValue;
}


/*******************************************************************************
 * Function Name: getSieveStackById($argId)
 * Description:
 * This function will:
 * Take an ID # as a parameter.
 * Return an object containing the sieve stack information.
 *******************************************************************************/
function getSieveStackById($argId)
{
    $errorMessage = "qcfunctions.php - getSieveStackById() ";
    $SieveStackObject = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM gb_qc_sieve_stacks WHERE id = $argId LIMIT 1"; //direct SQL method
        //$result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        $result = $mySQLConnectionLocal->query("CALL sp_gb_qc_SieveStackGetByID('$argId');"); //stored procedure method syntax example

        while($row = $result->fetch_assoc())
        {
            $SieveStackObject->vars["id"] = $row['id'];
            $SieveStackObject->vars["description"] = $row['description'];
            $SieveStackObject->vars["main_site_id"] = $row['main_site_id'];
            $SieveStackObject->vars["sort_order"] = $row['sort_order'];
            $SieveStackObject->vars["is_active"] = $row['is_active'];
            $SieveStackObject->vars["is_camsizer"] = $row['is_camsizer'];
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for sieve stack by ID.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            $error = $e->getMessage();
            echo $error;
        }
    }

    return $SieveStackObject;
}


/*******************************************************************************
 * Function Name: getLocationById($argId)
 * Description:
 * This function will:
 * Take an ID # as a parameter.
 * Return an object containing the location information.
 *******************************************************************************/
function getLocationById($argId)
{
    $errorMessage = "qcfunctions.php - getLocationById() ";
    $locationObject = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM gb_qc_locations WHERE id = $argId LIMIT 1"; //direct SQL method
        $sql = "CALL sp_gb_qc_LocationGetByID(" . $argId . ");";
        $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        //$result = $mySQLConnectionLocal->query("CALL sp_gb_qc_LocationByID('$argId');"); //stored procedure method

        while($row = $result->fetch_assoc())
        {
            $locationObject->vars["id"] = $row['id'];
            $locationObject->vars["description"] = $row['description'];
            $locationObject->vars["main_site_id"] = $row['main_site_id'];
            $locationObject->vars["main_plant_id"] = $row['main_plant_id'];
            $locationObject->vars["main_product_id"] = $row['main_product_id'];
            $locationObject->vars["type_code"] = $row['type_code'];
            $locationObject->vars["is_split_sample_only"] = $row['is_split_sample_only'];
            $locationObject->vars["email_list_id"] = $row['email_list_id'];
            $locationObject->vars["is_send_email"] = $row['is_send_email'];
            $locationObject->vars["sort_order"] = $row['sort_order'];
            $locationObject->vars["is_active"] = $row['is_active'];
            $locationObject->vars["send_completion_message"] = $row['send_completion_message'];
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for location by ID.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            $error = $e->getMessage();
            echo $error;
        }
    }

    return $locationObject;
}


/*******************************************************************************
 * Function Name: getTestTypeById($argId)
 * Description:
 * This function will:
 * Take an ID # as a parameter.
 * Return an object containing the test information.
 *******************************************************************************/
function getTestTypeById($argId)
{
    $errorMessage = "qcfunctions.php - getTestById() ";
    $compositeObject = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM gb_qc_test_types WHERE id = $argId LIMIT 1"; //direct SQL method
        //$result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        $result = $mySQLConnectionLocal->query("CALL sp_gb_qc_TestTypeGetById('$argId');"); //stored procedure method

        while($row = $result->fetch_assoc())
        {
            $testObject->vars["id"] = $row['id'];
            $testObject->vars["description"] = $row['description'];
            $testObject->vars["sort_order"] = $row['sort_order'];
            $testObject->vars["is_active"] = $row['is_active'];
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for Test by ID.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            $error = $e->getMessage();
            echo $error;
        }
    }

    return $testObject;
}


/*******************************************************************************
 * Function Name: getCompositeTypeById($argId)
 * Description:
 * This function will:
 * Take an ID # as a parameter.
 * Return an object containing the composite information.
 *******************************************************************************/
function getCompositeTypeById($argId)
{
    $errorMessage = "qcfunctions.php - getCompositeById() ";
    $compositeObject = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM gb_qc_composites WHERE id = $argId LIMIT 1"; //direct SQL method
        //$result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        $result = $mySQLConnectionLocal->query("CALL sp_gb_qc_CompositeTypeGetByID('$argId');"); //stored procedure method

        while($row = $result->fetch_assoc())
        {
            $compositeObject->vars["id"] = $row['id'];
            $compositeObject->vars["description"] = $row['description'];
            $compositeObject->vars["main_site_id"] = $row['main_site_id'];
            $compositeObject->vars["sort_order"] = $row['sort_order'];
            $compositeObject->vars["is_active"] = $row['is_active'];
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for composite by ID.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            $error = $e->getMessage();
            echo $error;
        }
    }

    return $compositeObject;
}


/*******************************************************************************
 * Function Name: getPlantById($argId)
 * Description:
 * This function will:
 * Take an ID # as a parameter.
 * Return an object containing the plant information.
 *******************************************************************************/
function getPlantById($argId)
{
    $errorMessage = "qcfunctions.php - getPlantById() ";
    $plantObject = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM main_plants WHERE id = $argId LIMIT 1"; //direct SQL method
        //$result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        $result = $mySQLConnectionLocal->query("CALL sp_GetPlantById('$argId');"); //stored procedure method

        while($row = $result->fetch_assoc())
        {
            $plantObject->vars["id"] = $row['id'];
            $plantObject->vars["main_site_id"] = $row['main_site_id'];
            $plantObject->vars["name"] = $row['name'];
            $plantObject->vars["description"] = $row['description'];
            $plantObject->vars["sort_order"] = $row['sort_order'];
            //dev note: Texas Commission on Environmental Quality data points are rows 6 - 12
            $plantObject->vars["is_active"] = $row['is_active'];

        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for plant by ID.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            $error = $e->getMessage();
            echo $error;
        }
    }

    return $plantObject;
}


/*******************************************************************************
 * Function Name: getLabTechs()
 * Description:
 * This function will:
 * Returns an array of objects containing the user data.
 * The results are filtered to where the user is listed as a Lab Tech.
 *******************************************************************************/
function getLabTechs()
{
    $errorMessage = " "; //requires pagevariables.php

    $returnValue = 0; //a value to tell us if the process was successful.
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {

        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM main_users WHERE qc_labtech = 1"; //direct SQL method
        //$result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        $result = $mySQLConnectionLocal->query("CALL sp_qc_LabTechsGet;"); //stored procedure method

        $outputCount = 0;
        while($row = $result->fetch_assoc())
        {
            $testObjects[$outputCount]->vars["id"] = $row['id'];
            $testObjects[$outputCount]->vars["first_name"] = $row['first_name'];
            $testObjects[$outputCount]->vars["last_name"] = $row['last_name'];
            $testObjects[$outputCount]->vars["display_name"] = $row['display_name'];
            $testObjects[$outputCount]->vars["email"] = $row['email'];
            $testObjects[$outputCount]->vars["company"] = $row['company'];
            $testObjects[$outputCount]->vars["main_department_id"] = $row['main_department_id'];
            $testObjects[$outputCount]->vars["password"] = $row['password'];
            $testObjects[$outputCount]->vars["last_logged"] = $row['last_logged'];
            $testObjects[$outputCount]->vars["start_date"] = $row['start_date'];
            $testObjects[$outputCount]->vars["separation_date"] = $row['separation_date'];
            $testObjects[$outputCount]->vars["is_active"] = $row['is_active'];
            $testObjects[$outputCount]->vars["require_password_reset"] = $row['require_password_reset'];
            $testObjects[$outputCount]->vars["username"] = $row['username'];
            $testObjects[$outputCount]->vars["password_reset_token"] = $row['password_reset_token'];
            $testObjects[$outputCount]->vars["password_token_expiration"] = $row['password_token_expiration'];

            $outputCount++;
            $returnValue = 1;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error getting info on all users.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $testObjects;
}


/*******************************************************************************
 * Function Name: getOperators()
 * Description:
 * This function will:
 * Returns an array of objects containing the user data.
 * The results are filtered to where the user is listed as an Operator.
 *******************************************************************************/
function getOperators()
{
    $errorMessage = " "; //requires pagevariables.php

    $returnValue = 0; //a value to tell us if the process was successful.
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM main_users WHERE qc_operator = 1"; //direct SQL method
        $sql = "CALL sp_gb_qc_OperatorsGet();";

        $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        $outputCount = 0;
        while($row = $result->fetch_assoc())
        {
            $testObjects[$outputCount]->vars["id"] = $row['id'];
            $testObjects[$outputCount]->vars["first_name"] = $row['first_name'];
            $testObjects[$outputCount]->vars["last_name"] = $row['last_name'];
            $testObjects[$outputCount]->vars["display_name"] = $row['display_name'];
            $testObjects[$outputCount]->vars["email"] = $row['email'];
            $testObjects[$outputCount]->vars["company"] = $row['company'];
            $testObjects[$outputCount]->vars["main_department_id"] = $row['main_department_id'];
            $testObjects[$outputCount]->vars["password"] = $row['password'];
            $testObjects[$outputCount]->vars["last_logged"] = $row['last_logged'];
            $testObjects[$outputCount]->vars["start_date"] = $row['start_date'];
            $testObjects[$outputCount]->vars["separation_date"] = $row['separation_date'];
            $testObjects[$outputCount]->vars["is_active"] = $row['is_active'];
            $testObjects[$outputCount]->vars["require_password_reset"] = $row['require_password_reset'];
            $testObjects[$outputCount]->vars["username"] = $row['username'];
            $testObjects[$outputCount]->vars["password_reset_token"] = $row['password_reset_token'];
            $testObjects[$outputCount]->vars["password_token_expiration"] = $row['password_token_expiration'];

            $outputCount++;
            $returnValue = 1;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error getting info on all users.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $testObjects;
}


/*******************************************************************************
 * Function Name: getSamplers()
 * Description:
 * This function will:
 * Returns an array of objects containing the user data.
 * The results are filtered to where the user is listed as a Sampler.
 *******************************************************************************/
function getSamplers()
{
    $errorMessage = " "; //requires pagevariables.php

    $returnValue = 0; //a value to tell us if the process was successful.
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {

        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        $sql = "CALL sp_gb_qc_SamplersGet();";

        $result = $mySQLConnectionLocal->query($sql); //direct SQL method

        $outputCount = 0;
        while($row = $result->fetch_assoc())
        {
            $testObjects[$outputCount]->vars["id"] = $row['id'];
            $testObjects[$outputCount]->vars["first_name"] = $row['first_name'];
            $testObjects[$outputCount]->vars["last_name"] = $row['last_name'];
            $testObjects[$outputCount]->vars["display_name"] = $row['display_name'];
            $testObjects[$outputCount]->vars["email"] = $row['email'];
            $testObjects[$outputCount]->vars["company"] = $row['company'];
            $testObjects[$outputCount]->vars["main_department_id"] = $row['main_department_id'];
            $testObjects[$outputCount]->vars["password"] = $row['password'];
            $testObjects[$outputCount]->vars["last_logged"] = $row['last_logged'];
            $testObjects[$outputCount]->vars["start_date"] = $row['start_date'];
            $testObjects[$outputCount]->vars["separation_date"] = $row['separation_date'];
            $testObjects[$outputCount]->vars["is_active"] = $row['is_active'];
            $testObjects[$outputCount]->vars["require_password_reset"] = $row['require_password_reset'];
            $testObjects[$outputCount]->vars["username"] = $row['username'];
            $testObjects[$outputCount]->vars["password_reset_token"] = $row['password_reset_token'];
            $testObjects[$outputCount]->vars["password_token_expiration"] = $row['password_token_expiration'];

            $outputCount++;
            $returnValue = 1;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error getting info on all users.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $testObjects;
}


/*******************************************************************************
 * Function Name: getDateRangePercentAverages($argLocation, $startDate, $endDate)
 * Description:
 * This function will:
 * Accept a parameter with a location ID #.
 * Accept start and end dates as parameters.
 * Exclude samples based on certain criteria: exclude samples where void status = V, test type != test, test type != retest
 * Return an array of objects containing averages of sample final percentages.
 * Is used in the QC Overview page data.
 *******************************************************************************/
function getDateRangePercentAverages($argLocation, $startDate, $endDate)
{

    $errorMessage = "qcfunctions.php - getDateRangePercentAverages() ";
    $arrayOfTotalValues = NULL;
    $arrayOfAverageValues = NULL;
    $outputArray = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //select the samples from the location and time period
        $sql = "Call sp_gb_qc_DateRangePercentSamplesGet(" . $argLocation . ", '" . $startDate . "', '" . $endDate . "')"; //stored procedure method

        $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        //initialize values
        $sumOfValue1 = 0;
        $sumOfValue2 = 0;
        $sumOfValue3 = 0;
        $sumOfValue4 = 0;
        $sumOfValue5 = 0;
        $sumOfValue6 = 0;
        $sumOfValue7 = 0;
        $sumOfValue8 = 0;
        $sumOfValue9 = 0;
        $sumOfValue10 = 0;
        $sumOfValue11 = 0;
        $sumOfValue12 = 0;
        $sumOfValue13 = 0;
        $sumOfValue14 = 0;
        $sumOfValue15 = 0;
        $sumOfValue16 = 0;
        $sumOfValue17 = 0;
        $sumOfValue18 = 0;

        $sumOfValueOversize = 0;
        $sumOfValuePlus40 = 0;
        $sumOfValueNeg40Plus70 = 0;
        $sumOfValueNeg60Plus70 = 0;
        $sumOfValueNeg70Plus140 = 0;
        $sumOfValueNeg50Plus140 = 0;
        $sumOfValueNearSize = 0;
        $sumOfValueNeg140Plus325 = 0;
        $sumOfValueNeg140 = 0;

        $outputCount1 = 0;
        $outputCount2 = 0;
        $outputCount3 = 0;
        $outputCount4 = 0;
        $outputCount5 = 0;
        $outputCount6 = 0;
        $outputCount7 = 0;
        $outputCount8 = 0;
        $outputCount9 = 0;
        $outputCount10 = 0;
        $outputCount11 = 0;
        $outputCount12 = 0;
        $outputCount13 = 0;
        $outputCount14 = 0;
        $outputCount15 = 0;
        $outputCount16 = 0;
        $outputCount17 = 0;
        $outputCount18 = 0;

        $outputCountOversize = 0;
        $outputCountPlus40 = 0;
        $outputCountNeg40Plus70 = 0;
        $outputCountNeg60Plus70 = 0;
        $outputCountNeg70Plus140 = 0;
        $outputCountNeg50Plus140 = 0;
        $outputCountNearSize = 0;
        $outputCountNeg140Plus325 = 0;
        $outputCountNeg140 = 0;

        $arrayOfAveragePercentages[0] = 0;
        $arrayOfAveragePercentages[1] = 0;
        $arrayOfAveragePercentages[2] = 0;
        $arrayOfAveragePercentages[3] = 0;
        $arrayOfAveragePercentages[4] = 0;
        $arrayOfAveragePercentages[5] = 0;
        $arrayOfAveragePercentages[6] = 0;
        $arrayOfAveragePercentages[7] = 0;
        $arrayOfAveragePercentages[8] = 0;
        $arrayOfAveragePercentages[9] = 0;
        $arrayOfAveragePercentages[10] = 0;
        $arrayOfAveragePercentages[11] = 0;
        $arrayOfAveragePercentages[12] = 0;
        $arrayOfAveragePercentages[13] = 0;
        $arrayOfAveragePercentages[14] = 0;
        $arrayOfAveragePercentages[15] = 0;
        $arrayOfAveragePercentages[16] = 0;
        $arrayOfAveragePercentages[17] = 0;

        $arrayOfAveragePercentages[18] = 0; // +10 (OS)
        $arrayOfAveragePercentages[19] = 0; //-10+40
        $arrayOfAveragePercentages[20] = 0; //-40+70
        $arrayOfAveragePercentages[21] = 0; //-60+70
        $arrayOfAveragePercentages[22] = 0; //-70 +140
        $arrayOfAveragePercentages[23] = 0; //-50+140
        $arrayOfAveragePercentages[24] = 0; //Near Size
        $arrayOfAveragePercentages[25] = 0; // -140+325
        $arrayOfAveragePercentages[26] = 0; //-140


        while($row = $result->fetch_assoc())
        {

            if(($row['sieve_1_value'] != NULL) && ($row['sieve_1_value'] != 0))
            {
                $sumOfValue1 = $sumOfValue1 + $row['sieve_1_value'];
                $outputCount1++;
            }

            if(($row['sieve_2_value'] != NULL) && ($row['sieve_2_value'] != 0))
            {
                $sumOfValue2 = $sumOfValue2 + $row['sieve_2_value'];
                $outputCount2++;
            }

            if(($row['sieve_3_value'] != NULL) && ($row['sieve_3_value'] != 0))
            {
                $sumOfValue3 = $sumOfValue3 + $row['sieve_3_value'];
                $outputCount3++;
            }

            if(($row['sieve_4_value'] != NULL) && ($row['sieve_4_value'] != 0))
            {
                $sumOfValue4 = $sumOfValue4 + $row['sieve_4_value'];
                $outputCount4++;
            }

            if(($row['sieve_5_value'] != NULL) && ($row['sieve_5_value'] != 0))
            {
                $sumOfValue5 = $sumOfValue5 + $row['sieve_5_value'];
                $outputCount5++;
            }

            if(($row['sieve_6_value'] != NULL) && ($row['sieve_6_value'] != 0))
            {
                $sumOfValue6 = $sumOfValue6 + $row['sieve_6_value'];
                $outputCount6++;
            }

            if(($row['sieve_7_value'] != NULL) && ($row['sieve_7_value'] != 0))
            {
                $sumOfValue7 = $sumOfValue7 + $row['sieve_7_value'];
                $outputCount7++;
            }

            if(($row['sieve_8_value'] != NULL) && ($row['sieve_8_value'] != 0))
            {
                $sumOfValue8 = $sumOfValue8 + $row['sieve_8_value'];
                $outputCount8++;
            }

            if(($row['sieve_9_value'] != NULL) && ($row['sieve_9_value'] != 0))
            {
                $sumOfValue9 = $sumOfValue9 + $row['sieve_9_value'];
                $outputCount9++;
            }

            if(($row['sieve_10_value'] != NULL) && ($row['sieve_10_value']!= 0))
            {
                $sumOfValue10 = $sumOfValue10 + $row['sieve_10_value'];
                $outputCount10++;
            }

            if(($row['sieve_11_value'] != NULL) && ($row['sieve_11_value'] != 0))
            {
                $sumOfValue11 = $sumOfValue11 + $row['sieve_11_value'];
                $outputCount11++;
            }

            if(($row['sieve_12_value'] != NULL) && ($row['sieve_12_value'] != 0))
            {
                $sumOfValue12 = $sumOfValue12 + $row['sieve_12_value'];
                $outputCount12++;
            }

            if(($row['sieve_13_value'] != NULL) && ($row['sieve_13_value'] != 0))
            {
                $sumOfValue13 = $sumOfValue13 + $row['sieve_13_value'];
                $outputCount13++;
            }

            if(($row['sieve_14_value'] != NULL) && ($row['sieve_14_value'] != 0))
            {
                $sumOfValue14 = $sumOfValue14 + $row['sieve_14_value'];
                $outputCount14++;
            }

            if(($row['sieve_15_value'] != NULL) && ($row['sieve_15_value'] != 0))
            {
                $sumOfValue15 = $sumOfValue15 + $row['sieve_15_value'];
                $outputCount15++;
            }

            if(($row['sieve_16_value'] != NULL) && ($row['sieve_16_value'] != 0))
            {
                $sumOfValue16 = $sumOfValue16 + $row['sieve_16_value'];
                $outputCount16++;
            }

            if(($row['sieve_17_value'] != NULL) && ($row['sieve_17_value'] != 0))
            {
                $sumOfValue17 = $sumOfValue17 + $row['sieve_17_value'];
                $outputCount17++;
            }

            if(($row['sieve_18_value'] != NULL) && ($row['sieve_18_value'] != 0))
            {
                $sumOfValue18 = $sumOfValue18 + $row['sieve_18_value'];
                $outputCount18++;
            }

            //<editor-fold desc="sieve ranges">
            if(($row['oversize_percent'] != NULL) && ($row['oversize_percent'] != 0))
            {
                $sumOfValueOversize = $sumOfValueOversize + $row['oversize_percent'];
                $sumOfValueOversize++;
            }

            if(($row['plus_40'] != NULL) && ($row['plus_40'] != 0))
            {
                $sumOfValuePlus40 = $sumOfValuePlus40 + $row['plus_40'];
                $sumOfValuePlus40++;
            }

            if(($row['minus_40_plus_70'] != NULL) && ($row['minus_40_plus_70'] != 0))
            {
                $sumOfValueNeg40Plus70 = $sumOfValueNeg40Plus70 + $row['minus_40_plus_70'];
                $sumOfValueNeg40Plus70++;
            }

            if(($row['minus_60_plus_70'] != NULL) && ($row['minus_60_plus_70'] != 0))
            {
                $sumOfValueNeg60Plus70 = $sumOfValueNeg60Plus70 + $row['minus_60_plus_70'];
                $sumOfValueNeg60Plus70++;
            }

            if(($row['minus_70_plus_140'] != NULL) && ($row['minus_70'] != 0))
            {
                $sumOfValueNeg70Plus140 = $sumOfValueNeg70Plus140 + $row['minus_70_plus_140'];
                $sumOfValueNeg70Plus140++;
            }

            if(($row['minus_50_plus_140'] != NULL) && ($row['minus_50_plus_140'] != 0))
            {
                $sumOfValueNeg50Plus140 = $sumOfValueNeg50Plus140 + $row['minus_50_plus_140'];
                $sumOfValueNeg50Plus140++;
            }

            if(($row['near_size'] != NULL) && ($row['near_size'] != 0))
            {
                $sumOfValueNearSize = $sumOfValueNearSize + $row['near_size'];
                $sumOfValueNearSize++;
            }

            if(($row['minus_140_plus_325'] != NULL) && ($row['minus_140_plus_325'] != 0))
            {
                $sumOfValueNeg140Plus325 = $sumOfValueNeg140Plus325 + $row['minus_140_plus_325'];
                $sumOfValueNeg140Plus325++;
            }

            if(($row['minus_140'] != NULL) && ($row['minus_140'] != 0))
            {
                $sumOfValueNeg140 = $sumOfValueNeg140 + $row['minus_140'];
                $sumOfValueNeg140++;
            }

        }
        //</editor-fold>

        //calculate the new averages
        if($outputCount1 > 0){ $arrayOfAveragePercentages[0] = $sumOfValue1 / $outputCount1; }
        if($outputCount2 > 0){ $arrayOfAveragePercentages[1] = $sumOfValue2 / $outputCount2; }
        if($outputCount3 > 0){ $arrayOfAveragePercentages[2] = $sumOfValue3 / $outputCount3; }
        if($outputCount4 > 0){ $arrayOfAveragePercentages[3] = $sumOfValue4 / $outputCount4; }
        if($outputCount5 > 0){ $arrayOfAveragePercentages[4] = $sumOfValue5 / $outputCount5; }
        if($outputCount6 > 0){ $arrayOfAveragePercentages[5] = $sumOfValue6 / $outputCount6; }
        if($outputCount7 > 0){ $arrayOfAveragePercentages[6] = $sumOfValue7 / $outputCount7; }
        if($outputCount8 > 0){ $arrayOfAveragePercentages[7] = $sumOfValue8 / $outputCount8; }
        if($outputCount9 > 0){ $arrayOfAveragePercentages[8] = $sumOfValue9 / $outputCount9; }
        if($outputCount10 > 0){ $arrayOfAveragePercentages[9] = $sumOfValue10 / $outputCount10; }
        if($outputCount11 > 0){ $arrayOfAveragePercentages[10] = $sumOfValue11 / $outputCount11; }
        if($outputCount12 > 0){ $arrayOfAveragePercentages[11] = $sumOfValue12 / $outputCount12; }
        if($outputCount13 > 0){ $arrayOfAveragePercentages[12] = $sumOfValue13 / $outputCount13; }
        if($outputCount14 > 0){ $arrayOfAveragePercentages[13] = $sumOfValue14 / $outputCount14; }
        if($outputCount15 > 0){ $arrayOfAveragePercentages[14] = $sumOfValue15 / $outputCount15; }
        if($outputCount16 > 0){ $arrayOfAveragePercentages[15] = $sumOfValue16 / $outputCount16; }
        if($outputCount17 > 0){ $arrayOfAveragePercentages[16] = $sumOfValue17 / $outputCount17; }
        if($outputCount18 > 0){ $arrayOfAveragePercentages[17] = $sumOfValue18 / $outputCount18; }


        if($outputCountOversize > 0){ $arrayOfAveragePercentages[20] = $sumOfValueOversize / $outputCountOversize; }
        if($outputCountPlus40 > 0){ $arrayOfAveragePercentages[21] = $sumOfValuePlus40 / $outputCountPlus40; }
        if($outputCountNeg40Plus70 > 0){ $arrayOfAveragePercentages[22] = $sumOfValueNeg40Plus70 / $outputCountNeg40Plus70; }
        if($outputCountNeg60Plus70 > 0){ $arrayOfAveragePercentages[23] = $sumOfValueNeg60Plus70 / $outputCountNeg60Plus70; }
        if($outputCountNeg70Plus140 > 0){ $arrayOfAveragePercentages[24] = $sumOfValueNeg70Plus140 / $outputCountNeg70Plus140; }

        if($outputCountNeg50Plus140 > 0){ $arrayOfAveragePercentages[31] = $sumOfValueNeg50Plus140 / $outputCountNeg50Plus140; }
        if($outputCountNearSize > 0){ $arrayOfAveragePercentages[32] = $sumOfValueNearSize / $outputCountNearSize; }
        if($outputCountNeg140Plus325 > 0){ $arrayOfAveragePercentages[33] = $sumOfValueNeg140Plus325 / $outputCountNeg140Plus325; }
        if($outputCountNeg140 > 0){ $arrayOfAveragePercentages[34] = $sumOfValueNeg140 / $outputCountNeg140; }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying/calculating 30 day averages of sample percentages.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $arrayOfAveragePercentages;
}


/*******************************************************************************
 * Function Name: getDateRangePercentStandardDeviations($argLocation, $startDate, $endDate)
 * Description:
 * This function will:
 * Accept a parameter with a location ID #.
 * Accept start and end dates as parameters.
 * Exclude samples based on certain criteria: exclude samples where void status = V, test type != test, test type != retest
 * Return an array of objects containing averages of sample final percentages.
 * Is used in the QC Overview page data.
 *******************************************************************************/
function getDateRangePercentStandardDeviations($argLocation, $startDate, $endDate)
{

    $errorMessage = "qcfunctions.php - getDateRangePercentStandardDeviations() ";
    $arrayOfTotalValues = NULL;
    $arrayOfAverageValues = NULL;
    $outputArray = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    $arrayOfAverageValues = getDateRangePercentAverages($argLocation, $startDate, $endDate);

    $arrayOfSquaredDifferences = NULL;
    $arrayOfDeviationValues = NULL;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        /*
    $sql = "SELECT gb_qc_samples.id, DATE_FORMAT(gb_qc_samples.date, '%Y/%m/%d') as 'date', gb_qc_finalpercentages.finalpercent1, gb_qc_finalpercentages.finalpercent2, gb_qc_finalpercentages.finalpercent3, gb_qc_finalpercentages.finalpercent4, gb_qc_finalpercentages.finalpercent5, gb_qc_finalpercentages.finalpercent6, gb_qc_finalpercentages.finalpercent7, gb_qc_finalpercentages.finalpercent8, gb_qc_finalpercentages.finalpercent9, gb_qc_finalpercentages.finalpercent10, gb_qc_finalpercentages.finalpercent11, gb_qc_finalpercentages.finalpercent12, gb_qc_finalpercentages.finalpercent13, gb_qc_finalpercentages.finalpercent14, gb_qc_finalpercentages.finalpercent15, gb_qc_finalpercentages.finalpercent16, gb_qc_finalpercentages.finalpercent17, gb_qc_finalpercentages.finalpercent18, gb_qc_samples.plus_70, gb_qc_samples.minus_40_plus_70, gb_qc_samples.minus_70, gb_qc_samples.minus_70_plus_140, gb_qc_samples.plus_140, gb_qc_samples.minus_140 "
    . "FROM gb_qc_samples "
    . "LEFT JOIN gb_qc_finalpercentages ON gb_qc_samples.id = gb_qc_finalpercentages.sample_id "
    . "WHERE test_type_id > 1 AND test_type_id < 4 AND void_status_code != 'V' AND location_id = $argLocation AND sieve_method_id is NOT NULL AND date >= '" . $startDate . "' AND date <= '" . $endDate . "'"; //direct SQL method
    */
        $sql = "Call sp_gb_qc_DateRangePercentSamplesGet(" . $argLocation . ", '" . $startDate . "', '" . $endDate . "')"; //stored procedure method

        $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        //initialize values
        $sumOfValue1 = 0;
        $sumOfValue2 = 0;
        $sumOfValue3 = 0;
        $sumOfValue4 = 0;
        $sumOfValue5 = 0;
        $sumOfValue6 = 0;
        $sumOfValue7 = 0;
        $sumOfValue8 = 0;
        $sumOfValue9 = 0;
        $sumOfValue10 = 0;
        $sumOfValue11 = 0;
        $sumOfValue12 = 0;
        $sumOfValue13 = 0;
        $sumOfValue14 = 0;
        $sumOfValue15 = 0;
        $sumOfValue16 = 0;
        $sumOfValue17 = 0;
        $sumOfValue18 = 0;

        $sumOfValueOversize = 0;
        $sumOfValuePlus40 = 0;
        $sumOfValueNeg40Plus70 = 0;
        $sumOfValueNeg60Plus70 = 0;
        $sumOfValueNeg70Plus140 = 0;
        $sumOfValueNeg50Plus140 = 0;
        $sumOfValueNearSize = 0;
        $sumOfValueNeg140Plus325 = 0;
        $sumOfValueNeg140 = 0;
        
        $outputCount1 = 0;
        $outputCount2 = 0;
        $outputCount3 = 0;
        $outputCount4 = 0;
        $outputCount5 = 0;
        $outputCount6 = 0;
        $outputCount7 = 0;
        $outputCount8 = 0;
        $outputCount9 = 0;
        $outputCount10 = 0;
        $outputCount11 = 0;
        $outputCount12 = 0;
        $outputCount13 = 0;
        $outputCount14 = 0;
        $outputCount15 = 0;
        $outputCount16 = 0;
        $outputCount17 = 0;
        $outputCount18 = 0;

        $outputCountOversize = 0;
        $outputCountPlus40 = 0;
        $outputCountNeg40Plus70 = 0;
        $outputCountNeg60Plus70 = 0;
        $outputCountNeg70Plus140 = 0;
        $outputCountNeg50Plus140 = 0;
        $outputCountNearSize = 0;
        $outputCountNeg140Plus325 = 0;
        $outputCountNeg140 = 0;

        $arrayOfSquaredDifferences[0] = 0;
        $arrayOfSquaredDifferences[1] = 0;
        $arrayOfSquaredDifferences[2] = 0;
        $arrayOfSquaredDifferences[3] = 0;
        $arrayOfSquaredDifferences[4] = 0;
        $arrayOfSquaredDifferences[5] = 0;
        $arrayOfSquaredDifferences[6] = 0;
        $arrayOfSquaredDifferences[7] = 0;
        $arrayOfSquaredDifferences[8] = 0;
        $arrayOfSquaredDifferences[9] = 0;
        $arrayOfSquaredDifferences[10] = 0;
        $arrayOfSquaredDifferences[11] = 0;
        $arrayOfSquaredDifferences[12] = 0;
        $arrayOfSquaredDifferences[13] = 0;
        $arrayOfSquaredDifferences[14] = 0;
        $arrayOfSquaredDifferences[15] = 0;
        $arrayOfSquaredDifferences[16] = 0;
        $arrayOfSquaredDifferences[17] = 0;

        $arrayOfSquaredDifferences[18] = 0; // +10 (OS)
        $arrayOfSquaredDifferences[19] = 0; //-10+40
        $arrayOfSquaredDifferences[20] = 0; //-40+70
        $arrayOfSquaredDifferences[21] = 0; //-60+70
        $arrayOfSquaredDifferences[22] = 0; //-70 +140
        $arrayOfSquaredDifferences[23] = 0; //-50+140
        $arrayOfSquaredDifferences[24] = 0; //Near Size
        $arrayOfSquaredDifferences[25] = 0; // -140+325
        $arrayOfSquaredDifferences[26] = 0; //-140

        $arrayOfDeviationValues[0] = 0;
        $arrayOfDeviationValues[1] = 0;
        $arrayOfDeviationValues[2] = 0;
        $arrayOfDeviationValues[3] = 0;
        $arrayOfDeviationValues[4] = 0;
        $arrayOfDeviationValues[5] = 0;
        $arrayOfDeviationValues[6] = 0;
        $arrayOfDeviationValues[7] = 0;
        $arrayOfDeviationValues[8] = 0;
        $arrayOfDeviationValues[9] = 0;
        $arrayOfDeviationValues[10] = 0;
        $arrayOfDeviationValues[11] = 0;
        $arrayOfDeviationValues[12] = 0;
        $arrayOfDeviationValues[13] = 0;
        $arrayOfDeviationValues[14] = 0;
        $arrayOfDeviationValues[15] = 0;
        $arrayOfDeviationValues[16] = 0;
        $arrayOfDeviationValues[17] = 0;

        while($row = $result->fetch_assoc())
        {
            if(checkIfSampleIsComplete($row['id']) == 1) //only include the sample in the data if the sample is complete
            {

                //increase the array of total deviations values

                if(($row['sieve_1_value'] != NULL) && ($row['sieve_1_value'] != 0))
                {
                    $arrayOfSquaredDifferences[0] = $arrayOfSquaredDifferences[0] + pow(($row['sieve_1_value'] - $arrayOfAverageValues[0]),2);
                    $outputCount1++;
                }

                if(($row['sieve_2_value'] != NULL) && ($row['sieve_2_value'] != 0))
                {
                    $arrayOfSquaredDifferences[1] = $arrayOfSquaredDifferences[1] + pow(($row['sieve_2_value'] - $arrayOfAverageValues[1]),2);
                    $outputCount2++;
                }

                if(($row['sieve_3_value'] != NULL) && ($row['sieve_3_value'] != 0))
                {
                    $arrayOfSquaredDifferences[2] = $arrayOfSquaredDifferences[2] + pow(($row['sieve_3_value'] - $arrayOfAverageValues[2]),2);
                    $outputCount3++;
                }

                if(($row['sieve_4_value'] != NULL) && ($row['sieve_4_value'] != 0))
                {
                    $arrayOfSquaredDifferences[3] = $arrayOfSquaredDifferences[3] + pow(($row['sieve_4_value'] - $arrayOfAverageValues[3]),2);
                    $outputCount4++;
                }

                if(($row['sieve_5_value'] != NULL) && ($row['sieve_5_value'] != 0))
                {
                    $arrayOfSquaredDifferences[4] = $arrayOfSquaredDifferences[4] + pow(($row['sieve_5_value'] - $arrayOfAverageValues[4]),2);
                    $outputCount5++;
                }

                if(($row['sieve_6_value'] != NULL) && ($row['sieve_6_value'] != 0))
                {
                    $arrayOfSquaredDifferences[5] = $arrayOfSquaredDifferences[5] + pow(($row['sieve_6_value'] - $arrayOfAverageValues[5]),2);
                    $outputCount6++;
                }

                if(($row['sieve_7_value'] != NULL) && ($row['sieve_7_value'] != 0))
                {
                    $arrayOfSquaredDifferences[6] = $arrayOfSquaredDifferences[6] + pow(($row['sieve_7_value'] - $arrayOfAverageValues[6]),2);
                    $outputCount7++;
                }

                if(($row['sieve_8_value'] != NULL) && ($row['sieve_8_value'] != 0))
                {
                    $arrayOfSquaredDifferences[7] = $arrayOfSquaredDifferences[7] + pow(($row['sieve_8_value'] - $arrayOfAverageValues[7]),2);
                    $outputCount8++;
                }

                if(($row['sieve_9_value'] != NULL) && ($row['sieve_9_value'] != 0))
                {
                    $arrayOfSquaredDifferences[8] = $arrayOfSquaredDifferences[8] + pow(($row['sieve_9_value'] - $arrayOfAverageValues[8]),2);
                    $outputCount9++;
                }

                if(($row['sieve_10_value'] != NULL) && ($row['sieve_10_value'] != 0))
                {
                    $arrayOfSquaredDifferences[9] = $arrayOfSquaredDifferences[9] + pow(($row['sieve_10_value'] - $arrayOfAverageValues[9]),2);
                    $outputCount10++;
                }

                if(($row['sieve_11_value'] != NULL) && ($row['sieve_11_value'] != 0))
                {
                    $arrayOfSquaredDifferences[10] = $arrayOfSquaredDifferences[10] + pow(($row['sieve_11_value'] - $arrayOfAverageValues[10]),2);
                    $outputCount11++;
                }

                if(($row['sieve_12_value'] != NULL) && ($row['sieve_12_value'] != 0))
                {
                    $arrayOfSquaredDifferences[11] = $arrayOfSquaredDifferences[11] + pow(($row['sieve_12_value'] - $arrayOfAverageValues[11]),2);
                    $outputCount12++;
                }

                if(($row['sieve_13_value'] != NULL) && ($row['sieve_13_value'] != 0))
                {
                    $arrayOfSquaredDifferences[12] = $arrayOfSquaredDifferences[12] + pow(($row['sieve_13_value'] - $arrayOfAverageValues[12]),2);
                    $outputCount13++;
                }

                if(($row['sieve_14_value'] != NULL) && ($row['sieve_14_value'] != 0))
                {
                    $arrayOfSquaredDifferences[13] = $arrayOfSquaredDifferences[13] + pow(($row['sieve_14_value'] - $arrayOfAverageValues[13]),2);
                    $outputCount14++;
                }

                if(($row['sieve_15_value'] != NULL) && ($row['sieve_15_value'] != 0))
                {
                    $arrayOfSquaredDifferences[14] = $arrayOfSquaredDifferences[14] + pow(($row['sieve_15_value'] - $arrayOfAverageValues[14]),2);
                    $outputCount15++;
                }

                if(($row['sieve_16_value'] != NULL) && ($row['sieve_16_value'] != 0))
                {
                    $arrayOfSquaredDifferences[15] = $arrayOfSquaredDifferences[15] + pow(($row['sieve_16_value'] - $arrayOfAverageValues[15]),2);
                    $outputCount16++;
                }

                if(($row['sieve_17_value'] != NULL) && ($row['sieve_17_value'] != 0))
                {
                    $arrayOfSquaredDifferences[16] = $arrayOfSquaredDifferences[16] + pow(($row['sieve_17_value'] - $arrayOfAverageValues[16]),2);
                    $outputCount17++;
                }

                if(($row['sieve_18_value'] != NULL) && ($row['sieve_18_value'] != 0))
                {
                    $arrayOfSquaredDifferences[17] = $arrayOfSquaredDifferences[17] + pow(($row['sieve_18_value'] - $arrayOfAverageValues[17]),2);
                    $outputCount18++;
                }

                //sieve ranges
                if(($row['oversize_percent'] != NULL) && ($row['oversize_percent'] != 0))
                {
                    $arrayOfSquaredDifferences[18] = $arrayOfSquaredDifferences[18] + pow(($row['oversize_percent'] - $arrayOfAverageValues[18]),2);
                    $outputCountOversize++;
                }

                if(($row['plus_40'] != NULL) && ($row['plus_40'] != 0))
                {
                    $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($row['plus_40'] - $arrayOfAverageValues[19]),2);
                    $outputCountPlus40++;
                }

                if(($row['minus_40_plus_70'] != NULL) && ($row['minus_40_plus_70'] != 0))
                {
                    $arrayOfSquaredDifferences[20] = $arrayOfSquaredDifferences[20] + pow(($row['minus_40_plus_70'] - $arrayOfAverageValues[20]),2);
                    $outputCountNeg40Plus70++;
                }

                if(($row['minus_60_plus_70'] != NULL) && ($row['minus_60_plus_70'] != 0))
                {
                    $arrayOfSquaredDifferences[21] = $arrayOfSquaredDifferences[21] + pow(($row['minus_60_plus_70'] - $arrayOfAverageValues[21]),2);
                    $outputCountNeg60Plus70++;
                }

                if(($row['minus_70_plus_140'] != NULL) && ($row['minus_70_plus_140'] != 0))
                {
                    $arrayOfSquaredDifferences[22] = $arrayOfSquaredDifferences[22] + pow(($row['minus_70_plus_140'] - $arrayOfAverageValues[22]),2);
                    $outputCountNeg70Plus140++;
                }

                if(($row['minus_50_plus_140'] != NULL) && ($row['minus_50_plus_140'] != 0))
                {
                    $arrayOfSquaredDifferences[23] = $arrayOfSquaredDifferences[23] + pow(($row['minus_50_plus_140'] - $arrayOfAverageValues[23]),2);
                    $outputCountNeg50Plus140++;
                }

                if(($row['near_size'] != NULL) && ($row['near_size'] != 0))
                {
                    $arrayOfSquaredDifferences[24] = $arrayOfSquaredDifferences[24] + pow(($row['near_size'] - $arrayOfAverageValues[24]),2);
                    $outputCountNearSize++;
                }

                if(($row['minus_140_plus_325'] != NULL) && ($row['minus_140_plus_325'] != 0))
                {
                    $arrayOfSquaredDifferences[25] = $arrayOfSquaredDifferences[25] + pow(($row['minus_140_plus_325'] - $arrayOfAverageValues[25]),2);
                    $outputCountNeg140Plus325++;
                }

                if(($row['minus_140'] != NULL) && ($row['minus_140'] != 0))
                {
                    $arrayOfSquaredDifferences[26] = $arrayOfSquaredDifferences[26] + pow(($row['minus_140'] - $arrayOfAverageValues[26]),2);
                    $outputCountNeg140++;
                }
            }
        }

        if($outputCount1 == 1){ $outputCount1 = $outputCount1 + 1; }
        if($outputCount2 == 1){ $outputCount2 = $outputCount2 + 1; }
        if($outputCount3 == 1){ $outputCount3 = $outputCount3 + 1; }
        if($outputCount4 == 1){ $outputCount4 = $outputCount4 + 1; }
        if($outputCount5 == 1){ $outputCount5 = $outputCount5 + 1; }
        if($outputCount6 == 1){ $outputCount6 = $outputCount6 + 1; }
        if($outputCount7 == 1){ $outputCount7 = $outputCount7 + 1; }
        if($outputCount8 == 1){ $outputCount8 = $outputCount8 + 1; }
        if($outputCount9 == 1){ $outputCount9 = $outputCount9 + 1; }
        if($outputCount10 == 1){ $outputCount10 = $outputCount10 + 1; }
        if($outputCount11 == 1){ $outputCount11 = $outputCount11 + 1; }
        if($outputCount12 == 1){ $outputCount12 = $outputCount12 + 1; }
        if($outputCount13 == 1){ $outputCount13 = $outputCount13 + 1; }
        if($outputCount14 == 1){ $outputCount14 = $outputCount14 + 1; }
        if($outputCount15 == 1){ $outputCount15 = $outputCount15 + 1; }
        if($outputCount16 == 1){ $outputCount16 = $outputCount16 + 1; }
        if($outputCount17 == 1){ $outputCount17 = $outputCount17 + 1; }
        if($outputCount18 == 1){ $outputCount18 = $outputCount18 + 1; }
        if( $outputCountOversize == 1){  $outputCountOversize =  $outputCountOversize + 1; }
        if($outputCountPlus40 == 1){ $outputCountPlus40 = $outputCountPlus40 + 1; }
        if($outputCountNeg40Plus70 == 1){ $outputCountNeg40Plus70 = $outputCountNeg40Plus70 + 1; }
        if($outputCountNeg60Plus70 == 1){ $outputCountNeg60Plus70 = $outputCountNeg60Plus70 + 1; }
        if($outputCountNeg70Plus140 == 1){ $outputCountNeg70Plus140 = $outputCountNeg70Plus140 + 1; }
        if($outputCountNeg50Plus140 == 1){ $outputCountNeg50Plus140 = $outputCountNeg50Plus140 + 1; }
        if($outputCountNearSize == 1){ $outputCountNearSize = $outputCountNearSize + 1; }
        if($outputCountNeg140Plus325 == 1){ $outputCountNeg140Plus325 = $outputCountNeg140Plus325 + 1; }
        if($outputCountNeg140 == 1){ $outputCountNeg140 = $outputCountNeg140 + 1; }

        if($outputCount1 > 0) { $arrayOfDeviationValues[0] = sqrt($arrayOfSquaredDifferences[0]) / ($outputCount1 - 1); }
        if($outputCount2 > 0) { $arrayOfDeviationValues[1] = sqrt($arrayOfSquaredDifferences[1]) / ($outputCount2 - 1); }
        if($outputCount3 > 0) { $arrayOfDeviationValues[2] = sqrt($arrayOfSquaredDifferences[2]) / ($outputCount3 - 1); }
        if($outputCount4 > 0) { $arrayOfDeviationValues[3] = sqrt($arrayOfSquaredDifferences[3]) / ($outputCount4 - 1); }
        if($outputCount5 > 0) { $arrayOfDeviationValues[4] = sqrt($arrayOfSquaredDifferences[4]) / ($outputCount5 - 1); }
        if($outputCount6 > 0) { $arrayOfDeviationValues[5] = sqrt($arrayOfSquaredDifferences[5]) / ($outputCount6 - 1); }
        if($outputCount7 > 0) { $arrayOfDeviationValues[6] = sqrt($arrayOfSquaredDifferences[6]) / ($outputCount7 - 1); }
        if($outputCount8 > 0) { $arrayOfDeviationValues[7] = sqrt($arrayOfSquaredDifferences[7]) / ($outputCount8 - 1); }
        if($outputCount9 > 0) { $arrayOfDeviationValues[8] = sqrt($arrayOfSquaredDifferences[8]) / ($outputCount9 - 1); }
        if($outputCount10 > 0) { $arrayOfDeviationValues[9] = sqrt($arrayOfSquaredDifferences[9]) / ($outputCount10 - 1); }
        if($outputCount11 > 0) { $arrayOfDeviationValues[10] = sqrt($arrayOfSquaredDifferences[10]) / ($outputCount11 - 1); }
        if($outputCount12 > 0) { $arrayOfDeviationValues[11] = sqrt($arrayOfSquaredDifferences[11]) / ($outputCount12 - 1); }
        if($outputCount13 > 0) { $arrayOfDeviationValues[12] = sqrt($arrayOfSquaredDifferences[12]) / ($outputCount13 - 1); }
        if($outputCount14 > 0) { $arrayOfDeviationValues[13] = sqrt($arrayOfSquaredDifferences[13]) / ($outputCount14 - 1); }
        if($outputCount15 > 0) { $arrayOfDeviationValues[14] = sqrt($arrayOfSquaredDifferences[14]) / ($outputCount15 - 1); }
        if($outputCount16 > 0) { $arrayOfDeviationValues[15] = sqrt($arrayOfSquaredDifferences[15]) / ($outputCount16 - 1); }
        if($outputCount17 > 0) { $arrayOfDeviationValues[16] = sqrt($arrayOfSquaredDifferences[16]) / ($outputCount17 - 1); }
        if($outputCount18 > 0) { $arrayOfDeviationValues[17] = sqrt($arrayOfSquaredDifferences[17]) / ($outputCount18 - 1); }

        //sieve ranges
        if($outputCountOversize > 0){ $arrayOfAveragePercentages[18] = sqrt( $sumOfValueOversize) / ($outputCountOversize - 1); }
        if($outputCountPlus40 > 0){ $arrayOfAveragePercentages[19] = sqrt( $sumOfValuePlus40) / ($outputCountPlus40 - 1); }
        if($outputCountNeg40Plus70 > 0){ $arrayOfAveragePercentages[20] = sqrt( $sumOfValueNeg40Plus70) / ($outputCountNeg40Plus70 - 1); }
        if($outputCountNeg60Plus70 > 0){ $arrayOfAveragePercentages[21] = sqrt( $sumOfValueNeg60Plus70) / ($outputCountNeg60Plus70 - 1); }
        if($outputCountNeg70Plus140 > 0){ $arrayOfAveragePercentages[22] = sqrt( $sumOfValueNeg70Plus140) / ($outputCountNeg70Plus140 - 1); }
        if($outputCountNeg50Plus140 > 0){ $arrayOfAveragePercentages[23] = sqrt( $sumOfValueNeg50Plus140) / ($outputCountNeg50Plus140 - 1); }
        if($outputCountNearSize > 0){ $arrayOfAveragePercentages[24] = sqrt( $sumOfValueNearSize) / ($outputCountNearSize - 1); }
        if($outputCountNeg140Plus325 > 0){ $arrayOfAveragePercentages[25] = sqrt( $sumOfValueNeg140Plus325) / ($outputCountNeg140Plus325 - 1); }
        if($outputCountNeg140 > 0){ $arrayOfAveragePercentages[26] = sqrt( $sumOfValueNeg140) / ($outputCountNeg140 - 1); }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying/calculating standard deviations of sample values.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $arrayOfDeviationValues;
}


/*******************************************************************************
 * Function Name: updateSieveStartingWeight($weight, $sieveId, $screen)
 * Description:
 * This function will:
 * Accept an weight value.
 * Accept an ID of a sieve stack.
 * Accept a value of a screen.
 * Update the sieve starting values in the database.
 * The sieve stack will be identified based on the sample id.
 *******************************************************************************/
function updateSieveStartingWeight($weight, $sieveId, $screen)
{
    $errorMessage = "qcfunctions.php - updateSieveStartingWeights() "; //requires pagevariables.php

    $returnValue = 0; //a value to tell us if the process was successful.

    try
    {

        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //direct SQL method
        //$sql = "UPDATE gb_qc_sieves SET `start_weight` = $weight WHERE `sieve_stack_id` = '" . $sieveId . "' AND `screen` = '" . $screen . "';";
        $sql = "CALL sp_gb_qc_SieveStartingWeightUpdate(" . $weight . ", " . $sieveId . ", '" . $screen . "')";

        //echo "sql = " . $sql;

        //direct SQL method
        if ($mySQLConnectionLocal->query($sql) === TRUE)
        {
            //echo "Record updated successfully<br/>";
            $returnValue = 1;
        }
        else
        {
            echo "Error updating record: " . $mySQLConnectionLocal->error . "<br/>";
            $returnValue = 0;
        }

        //stored procedure method example
        //$result = $mySQLConnectionLocal->query("CALL sp_UpdateUser('$id','$username','$first_name','$last_name','$display_name','$email','$company','$main_department_id','$last_logged','$start_date','$is_active','$require_password_reset','$password_reset_token','$password_token_expiration');"); //stored procedure method
        //CALL sp_UpdateSieveStartingWeight('100', '1', '40');

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error updating starting weights for a sieve stack.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {

            echo $errorMessage;

            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $returnValue;
}


/*******************************************************************************
 * Function Name: insertFinalPercentages()
 * Description:
 * This function will:
 * Take numerous values as parameters.
 * Create a record in the database table gb_qc_finalpercentages.
 * Return a value to confirm success.
 *******************************************************************************/
function insertFinalPercentages($sampleID, $value1, $value2, $value3, $value4, $value5, $value6, $value7, $value8, $value9, $value10, $value11, $value12, $value13, $value14, $value15, $value16, $value17, $value18, $valueTotal)
{
    $result = 1;
    $errorMessage = "qcfunctions.php - insertFinalPercentages() ";

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "INSERT INTO gb_qc_finalpercentages (sample_id, finalpercent1, finalpercent2, finalpercent3, finalpercent4, finalpercent5, finalpercent6, finalpercent7, finalpercent8, finalpercent9, finalpercent10, finalpercent11, finalpercent12, finalpercent13, finalpercent14, finalpercent15, finalpercent16, finalpercent17, finalpercent18, finalpercenttotal) VALUES ($sampleID, $value1, $value2, $value3, $value4, $value5, $value6, $value7, $value8, $value9, $value10, $value11, $value12, $value13, $value14, $value15, $value16, $value17, $value18, $valueTotal)"; //direct SQL method
        $sql = "CALL sp_gb_qc_FinalPercentagesInsert($sampleID, '$value1', '$value2', '$value3', '$value4', '$value5', '$value6', '$value7', '$value8', '$value9', '$value10', '$value11', '$value12', '$value13', '$value14', '$value15', '$value16', '$value17', '$value18', '$valueTotal', @insert_id);";
        //$sql2 = "SELECT @insert_id AS id;"; //select the last insert ID
        $sql2 = "CALL sp_gb_qc_MaxFinalPercentageIDGet();";

        $result = mysqli_query($mySQLConnectionLocal,$sql); //insert the record

        //get the new database row ID
        $result2 = $mySQLConnectionLocal->query($sql2); //query for the last insert ID
        $row2 = mysqli_fetch_array($result2);
        $returnValue = $row2["MAX(id)"];

        //check status
        if ($returnValue == 0)
        {
            $errorMessage = $errorMessage . "Error inserting final percentages.";
            //sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
            if($debugging == 1)
            {
                echo $errorMessage;
                echo "Error: " . $sql . "<br>" . $mySQLConnectionLocal->error;
            }
            $result = 0;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error inserting final percentages into MySQL.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            $error = $e->getMessage();
            echo $error;
        }
        $result = 0;
    }

    return $result;
}


/*******************************************************************************
 * Function Name: getFinalPercentagesById()
 * Description:
 * This function will:
 * Returns an array of objects containing final percentages for use in 30 day average and std dev calculations.
 *******************************************************************************/
function getFinalPercentagesById($sampleID)
{
    $errorMessage = "gb_qcfunctions.php - getFinalPercentages() ";
    $finalPercentages = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    if(($sampleID != NULL) && ($sampleID != ""))
    {
        try
        {
            $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

            //$sql = "SELECT * FROM gb_qc_finalpercentages WHERE sample_id = $sampleID LIMIT 1"; //direct SQL method
            $sql = "CALL sp_gb_qc_FinalPercentagesGetByID($sampleID)";
            $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

            $outputCount = 0;
            while($row = $result->fetch_assoc())
            {
                $finalPercentages[$outputCount]->vars["id"] = $row['id'];
                $finalPercentages[$outputCount]->vars["sample_id"] = $row['sample_id'];
                $finalPercentages[$outputCount]->vars["finalpercent1"] = $row['finalpercent1'];
                $finalPercentages[$outputCount]->vars["finalpercent2"] = $row['finalpercent2'];
                $finalPercentages[$outputCount]->vars["finalpercent3"] = $row['finalpercent3'];
                $finalPercentages[$outputCount]->vars["finalpercent4"] = $row['finalpercent4'];
                $finalPercentages[$outputCount]->vars["finalpercent5"] = $row['finalpercent5'];
                $finalPercentages[$outputCount]->vars["finalpercent6"] = $row['finalpercent6'];
                $finalPercentages[$outputCount]->vars["finalpercent7"] = $row['finalpercent7'];
                $finalPercentages[$outputCount]->vars["finalpercent8"] = $row['finalpercent8'];
                $finalPercentages[$outputCount]->vars["finalpercent9"] = $row['finalpercent9'];
                $finalPercentages[$outputCount]->vars["finalpercent10"] = $row['finalpercent10'];
                $finalPercentages[$outputCount]->vars["finalpercenttotal"] = $row['finalpercenttotal'];

                $outputCount++;
            }

            disconnectFromMySQLQC($mySQLConnectionLocal);

        }
        catch (Exception $e)
        {
            $errorMessage = $errorMessage . "Error querying MySQL for final percentages by ID.";
            sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
            if($debugging == 1)
            {
                echo $errorMessage;
                //$error = $e->getMessage();
                //echo $error;
            }
        }
    }

    return $finalPercentages;
}


/*******************************************************************************
 * Function Name: updateFinalPercentages($percentageObject)
 * Description:
 * This function will:
 * Accept an object containing sample info as an argument.
 * Update the sample in the database.
 * The sample will be identified based on the sample id.
 *******************************************************************************/
function updateFinalPercentages($percentageObject)
{
    $errorMessage = "qcfunctions.php - updateFinalPercentages() "; //requires pagevariables.php

    $returnValue = 0; //a value to tell us if the process was successful.

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        $sampleId = $percentageObject->vars["sample_id"];
        $value1 = $percentageObject->vars["finalpercent1"];
        $value2 = $percentageObject->vars["finalpercent2"];
        $value3 = $percentageObject->vars["finalpercent3"];
        $value4 = $percentageObject->vars["finalpercent4"];
        $value5 = $percentageObject->vars["finalpercent5"];
        $value6 = $percentageObject->vars["finalpercent6"];
        $value7 = $percentageObject->vars["finalpercent7"];
        $value8 = $percentageObject->vars["finalpercent8"];
        $value9 = $percentageObject->vars["finalpercent9"];
        $value10 = $percentageObject->vars["finalpercent10"];
        $value11 = $percentageObject->vars["finalpercent11"];
        $value12 = $percentageObject->vars["finalpercent12"];
        $value13 = $percentageObject->vars["finalpercent13"];
        $value14 = $percentageObject->vars["finalpercent14"];
        $value15 = $percentageObject->vars["finalpercent15"];
        $value16 = $percentageObject->vars["finalpercent16"];
        $value17 = $percentageObject->vars["finalpercent17"];
        $value18 = $percentageObject->vars["finalpercent18"];
        $valueTotal = $percentageObject->vars["finalpercenttotal"];

        //direct SQL method
        //$sql = "UPDATE gb_qc_finalpercentages SET `finalpercent1` = '$value1', `finalpercent2` = '$value2', `finalpercent3` = '$value3', `finalpercent4` = '$value4', `finalpercent5` = '$value5', `finalpercent6` = '$value6', `finalpercent7` = '$value7', `finalpercent8` = '$value8', `finalpercent9` = '$value9', `finalpercent10` = '$value10', `finalpercent11` = '$value11', `finalpercent12` = '$value12', `finalpercent13` = '$value13', `finalpercent14` = '$value14', `finalpercent15` = '$value15', `finalpercent16` = '$value16', `finalpercent17` = '$value17', `finalpercent18` = '$value18', `finalpercenttotal` = '$valueTotal' WHERE `sample_id` = '$sampleId';";
        $sql = "CALL sp_gb_qc_FinalPercentagesUpdate($value1, $value2, $value3, $value4, $value5, $value6, $value7, $value8, $value9, $value10, $value11, $value12, $value13, $value14, $value15, $value16, $value17, $value18, $valueTotal, $sampleId)";
        //echo "SQL: " . $sql . "<br/>";

        if($mySQLConnectionLocal->query($sql) === TRUE) //direct SQL method
        {
            //echo "Record updated successfully<br/>";
            $returnValue = 1;
        }
        else
        {
            echo "Error updating record: " . $mySQLConnectionLocal->error . "<br/>";
            $returnValue = 0;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error updating final percentages for a sample.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;

            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $returnValue;
}


/*******************************************************************************
 * Function Name: encodeWeights($weightsObject)
 * Description:
 * This function will:
 * Accept an object containing sieve weight info as an argument.
 * The information will then be squished down into a string based on a format
 * derived from the previous (Back Office) developer's work.
 * Note: This format is not ideal, or even consistent with modern development
 * standards. It is being reused in order to ensure backward compatability with
 * old data.

Example:
a:10:{i:40;s:5:"256.2";i:50;s:5:"250.8";i:60;s:5:"239.5";i:70;s:5:"244.8";i:80;s:3:"236";i:100;s:3:"229";i:120;s:5:"232.5";i:140;s:5:"221.2";i:200;s:5:"218.4";s:3:"PAN";s:5:"271.7";}

Formula:
'a:' + number of values stored + ':{' +
'i:"' + screensize + '";' +
's:' + length of value as a string + ':"' + Start Weight for screen 1 + '";' +
'i:"' + screensize + '";' +
's:' + length of value as a string + ':"' + Start Weight for screen 2 + '";' +
'i:"' + screensize + '";' +
's:' + length of value as a string + ':"' + Start Weight for screen 3 + '";' +
'i:"' + screensize + '";' +
's:' + length of value as a string + ':"' + Start Weight for screen 4 + '";' +
'i:"' + screensize + '";' +
's:' + length of value as a string + ':"' + Start Weight for screen 5 + '";' +
'i:"' + screensize + '";' +
's:' + length of value as a string + ':"' + Start Weight for screen 6 + '";' +
'i:"' + screensize + '";' +
's:' + length of value as a string + ':"' + Start Weight for screen 7 + '";' +
'i:"' + screensize + '";' +
's:' + length of value as a string + ':"' + Start Weight for screen 8 + '";' +
'i:"' + screensize + '";' +
's:' + length of value as a string + ':"' + Start Weight for screen 9 + '";' +
"s:3:"PAN";" +
"s:" + length of value as a string + ":"" + Start Weight for screen 10 + "";" +
"";}"

 *******************************************************************************/
function encodeWeights($weightsObject)
{
    //initialize variables
    $screenSize1 = "";
    $screenSize2 = "";
    $screenSize3 = "";
    $screenSize4 = "";
    $screenSize5 = "";
    $screenSize6 = "";
    $screenSize7 = "";
    $screenSize8 = "";
    $screenSize9 = "";
    $screenSize10 = "";
    $screenSize11 = "";
    $screenSize12 = "";
    $screenSize13 = "";
    $screenSize14 = "";
    $screenSize15 = "";
    $screenSize16 = "";
    $screenSize17 = "";
    $screenSize18 = "";

    $weightValue1 = "";
    $weightValue2 = "";
    $weightValue3 = "";
    $weightValue4 = "";
    $weightValue5 = "";
    $weightValue6 = "";
    $weightValue7 = "";
    $weightValue8 = "";
    $weightValue9 = "";
    $weightValue10 = "";
    $weightValue11 = "";
    $weightValue12 = "";
    $weightValue13 = "";
    $weightValue14 = "";
    $weightValue15 = "";
    $weightValue16 = "";
    $weightValue17 = "";
    $weightValue18 = "";

    $countOfWeights = 0;

    $squishedString = "";

    //read the parameters into easily understandable variables
    //also count how many values we have
    if(isset($weightsObject->vars['weightValue1']))
    {
        $weightValue1 = $weightsObject->vars['weightValue1'];
        $screenSize1 = $weightsObject->vars['screenSize1'];
        $countOfWeights++;

        //add the value to the squished string
        $squishedString = $squishedString . 'i:' . $screenSize1 . ';' .
            's:' . strlen($weightValue1) . ':"' . $weightValue1 . '";';
    }

    if(isset($weightsObject->vars['weightValue2']))
    {
        $weightValue2 = $weightsObject->vars['weightValue2'];
        $screenSize2 = $weightsObject->vars['screenSize2'];
        $countOfWeights++;

        //add the value to the squished string
        $squishedString = $squishedString . 'i:' . $screenSize2 . ';' .
            's:' . strlen($weightValue2) . ':"' . $weightValue2 . '";';
    }

    if(isset($weightsObject->vars['weightValue3']))
    {
        $weightValue3 = $weightsObject->vars['weightValue3'];
        $screenSize3 = $weightsObject->vars['screenSize3'];
        $countOfWeights++;

        //add the value to the squished string
        $squishedString = $squishedString . 'i:' . $screenSize3 . ';' .
            's:' . strlen($weightValue3) . ':"' . $weightValue3 . '";';
    }

    if(isset($weightsObject->vars['weightValue4']))
    {
        $weightValue4 = $weightsObject->vars['weightValue4'];
        $screenSize4 = $weightsObject->vars['screenSize4'];
        $countOfWeights++;

        //add the value to the squished string
        $squishedString = $squishedString . 'i:' . $screenSize4 . ';' .
            's:' . strlen($weightValue4) . ':"' . $weightValue4 . '";';
    }

    if(isset($weightsObject->vars['weightValue5']))
    {
        $weightValue5 = $weightsObject->vars['weightValue5'];
        $screenSize5 = $weightsObject->vars['screenSize5'];
        $countOfWeights++;

        //add the value to the squished string
        $squishedString = $squishedString . 'i:' . $screenSize5 . ';' .
            's:' . strlen($weightValue5) . ':"' . $weightValue5 . '";';
    }

    if(isset($weightsObject->vars['weightValue6']))
    {
        $weightValue6 = $weightsObject->vars['weightValue6'];
        $screenSize6 = $weightsObject->vars['screenSize6'];
        $countOfWeights++;

        //add the value to the squished string
        $squishedString = $squishedString . 'i:' . $screenSize6 . ';' .
            's:' . strlen($weightValue6) . ':"' . $weightValue6 . '";';
    }

    if(isset($weightsObject->vars['weightValue7']))
    {
        $weightValue7 = $weightsObject->vars['weightValue7'];
        $screenSize7 = $weightsObject->vars['screenSize7'];
        $countOfWeights++;

        //add the value to the squished string
        $squishedString = $squishedString . 'i:' . $screenSize7 . ';' .
            's:' . strlen($weightValue7) . ':"' . $weightValue7 . '";';
    }

    if(isset($weightsObject->vars['weightValue8']))
    {
        $weightValue8 = $weightsObject->vars['weightValue8'];
        $screenSize8 = $weightsObject->vars['screenSize8'];
        $countOfWeights++;

        //add the value to the squished string
        $squishedString = $squishedString . 'i:' . $screenSize8 . ';' .
            's:' . strlen($weightValue8) . ':"' . $weightValue8 . '";';
    }

    if(isset($weightsObject->vars['weightValue9']))
    {
        $weightValue9 = $weightsObject->vars['weightValue9'];
        $screenSize9 = $weightsObject->vars['screenSize9'];
        $countOfWeights++;

        //add the value to the squished string
        $squishedString = $squishedString . 'i:' . $screenSize9 . ';' .
            's:' . strlen($weightValue9) . ':"' . $weightValue9 . '";';
    }

    if(isset($weightsObject->vars['weightValue10']))
    {
        $weightValue10 = $weightsObject->vars['weightValue10'];
        $screenSize10 = $weightsObject->vars['screenSize10'];
        $countOfWeights++;

        //add the value to the squished string - NOTE: this one is different because the screensize is a string and not an integer
        $squishedString = $squishedString . 's:' . strlen($screenSize10) . ':"' . $screenSize10 . '";' .
            's:' . strlen($weightValue10) . ':"' . $weightValue10 . '";';
    }

    if(isset($weightsObject->vars['weightValue11']))
    {
        $weightValue11 = $weightsObject->vars['weightValue11'];
        $screenSize11 = $weightsObject->vars['screenSize11'];
        $countOfWeights++;

        //add the value to the squished string
        $squishedString = $squishedString . 'i:' . $screenSize11 . ';' .
            's:' . strlen($weightValue11) . ':"' . $weightValue11 . '";';
    }

    if(isset($weightsObject->vars['weightValue12']))
    {
        $weightValue12 = $weightsObject->vars['weightValue12'];
        $screenSize12 = $weightsObject->vars['screenSize12'];
        $countOfWeights++;

        //add the value to the squished string
        $squishedString = $squishedString . 'i:' . $screenSize12 . ';' .
            's:' . strlen($weightValue12) . ':"' . $weightValue12 . '";';
    }

    if(isset($weightsObject->vars['weightValue13']))
    {
        $weightValue13 = $weightsObject->vars['weightValue13'];
        $screenSize13 = $weightsObject->vars['screenSize13'];
        $countOfWeights++;

        //add the value to the squished string
        $squishedString = $squishedString . 'i:' . $screenSize13 . ';' .
            's:' . strlen($weightValue13) . ':"' . $weightValue13 . '";';
    }

    if(isset($weightsObject->vars['weightValue14']))
    {
        $weightValue14 = $weightsObject->vars['weightValue14'];
        $screenSize14 = $weightsObject->vars['screenSize14'];
        $countOfWeights++;

        //add the value to the squished string
        $squishedString = $squishedString . 'i:' . $screenSize14 . ';' .
            's:' . strlen($weightValue14) . ':"' . $weightValue14 . '";';
    }

    if(isset($weightsObject->vars['weightValue15']))
    {
        $weightValue15 = $weightsObject->vars['weightValue15'];
        $screenSize15 = $weightsObject->vars['screenSize15'];
        $countOfWeights++;

        //add the value to the squished string
        $squishedString = $squishedString . 'i:' . $screenSize15 . ';' .
            's:' . strlen($weightValue15) . ':"' . $weightValue15 . '";';
    }

    if(isset($weightsObject->vars['weightValue16']))
    {
        $weightValue16 = $weightsObject->vars['weightValue16'];
        $screenSize16 = $weightsObject->vars['screenSize16'];
        $countOfWeights++;

        //add the value to the squished string
        $squishedString = $squishedString . 'i:' . $screenSize16 . ';' .
            's:' . strlen($weightValue16) . ':"' . $weightValue16 . '";';
    }

    if(isset($weightsObject->vars['weightValue17']))
    {
        $weightValue17 = $weightsObject->vars['weightValue17'];
        $screenSize17 = $weightsObject->vars['screenSize17'];
        $countOfWeights++;

        //add the value to the squished string
        $squishedString = $squishedString . 'i:' . $screenSize17 . ';' .
            's:' . strlen($weightValue17) . ':"' . $weightValue17 . '";';
    }

    if(isset($weightsObject->vars['weightValue18']))
    {
        $weightValue18 = $weightsObject->vars['weightValue18'];
        $screenSize18 = $weightsObject->vars['screenSize18'];
        $countOfWeights++;

        //add the value to the squished string
        $squishedString = $squishedString . 'i:' . $screenSize18 . ';' .
            's:' . strlen($weightValue18) . ':"' . $weightValue18 . '";';
    }

    $squishedString = 'a:' . $countOfWeights . ':{' . $squishedString; //add the count of values to the front of squished string
    $squishedString = $squishedString . '}'; //add a closing bracket to the end of the string.
    return $squishedString;
}


/*******************************************************************************
 * Function Name: decodeWeights($squishedString)
 * Description:
 * This function will:
 * Accept an string containing squished down sieve weight values.
 * Return an array of the weights.
 * The format of the string is derived from the previous (Back Office) developer's work.
 * Note: This format is not ideal, or even consistent with modern development
 * standards. It is being reused in order to ensure backward compatability with
 * old data.

Example:
a:10:{i:40;s:5:"256.2";i:50;s:5:"250.8";i:60;s:5:"239.5";i:70;s:5:"244.8";i:80;s:3:"236";i:100;s:3:"229";i:120;s:5:"232.5";i:140;s:5:"221.2";i:200;s:5:"218.4";s:3:"PAN";s:5:"271.7";}

Formula:
'a:' + number of values stored + ':{' +
'i:"' + screensize + '";' +
's:' + length of value as a string + ':"' + Start Weight for screen 1 + '";' +
'i:"' + screensize + '";' +
's:' + length of value as a string + ':"' + Start Weight for screen 2 + '";' +
'i:"' + screensize + '";' +updat
's:' + length of value as a string + ':"' + Start Weight for screen 3 + '";' +
'i:"' + screensize + '";' +
's:' + length of value as a string + ':"' + Start Weight for screen 4 + '";' +
'i:"' + screensize + '";' +
's:' + length of value as a string + ':"' + Start Weight for screen 5 + '";' +
'i:"' + screensize + '";' +
's:' + length of value as a string + ':"' + Start Weight for screen 6 + '";' +
'i:"' + screensize + '";' +
's:' + length of value as a string + ':"' + Start Weight for screen 7 + '";' +
'i:"' + screensize + '";' +
's:' + length of value as a string + ':"' + Start Weight for screen 8 + '";' +
'i:"' + screensize + '";' +
's:' + length of value as a string + ':"' + Start Weight for screen 9 + '";' +
"s:3:"PAN";" +
"s:" + length of value as a string + ":"" + Start Weight for screen 10 + "";" +
"";}"

 *******************************************************************************/
function decodeWeights($squishedString)
{
    //initialize variables
    $screenSize1 = "";
    $screenSize2 = "";
    $screenSize3 = "";
    $screenSize4 = "";
    $screenSize5 = "";
    $screenSize6 = "";
    $screenSize7 = "";
    $screenSize8 = "";
    $screenSize9 = "";
    $screenSize10 = "";
    $screenSize11 = "";
    $screenSize12 = "";
    $screenSize13 = "";
    $screenSize14 = "";
    $screenSize15 = "";
    $screenSize16 = "";
    $screenSize17 = "";
    $screenSize18 = "";

    $weightValue1 = "";
    $weightValue2 = "";
    $weightValue3 = "";
    $weightValue4 = "";
    $weightValue5 = "";
    $weightValue6 = "";
    $weightValue7 = "";
    $weightValue8 = "";
    $weightValue9 = "";
    $weightValue10 = "";
    $weightValue11 = "";
    $weightValue12 = "";
    $weightValue13 = "";
    $weightValue14 = "";
    $weightValue15 = "";
    $weightValue16 = "";
    $weightValue17 = "";
    $weightValue18 = "";

    $countOfWeights = 0;

    $currentCharacter = 0;
    $substring = "";

    //echo "squishedString = " . $squishedString . "<br/>";

    //find the open bracket, so we can get the number of values
    $substring = substr($squishedString, 0, (-1 * (strlen($squishedString) - strpos($squishedString, "{") - 1)));
    //echo $substring . "<br/>";
    $tempArray = explode(":",$substring);
    //echo "count tempArray = " . count($tempArray) . "<br/>";
    if(count($tempArray) == 1)
    {
        $countOfWeights = 0;
    }
    else
    {
        $countOfWeights = $tempArray[1]; //tempArray[1] has the number of values
    }
    //echo $countOfWeights . "<br/>";

    //get the other values
    $substring = substr($squishedString, (-1 * (strlen($squishedString) - strpos($squishedString, "{")))); //second half with data
    //echo $substring . "<br/>";
    $tempArray = explode(";",$substring);
    //echo "<br/>";

    //weight 1
    if(($countOfWeights > 0) && isset($tempArray[1]))
    {
        $tempString = $tempArray[1]; //get the section
        $tempArray2 = explode(":",$tempString);
        if(isset($tempArray2[2]))
        {
            $weightValue1 = $tempArray2[2]; //get the weight value
            $weightValue1 =  str_replace('"', '', $weightValue1); //remove the double quotes
        }
    }

    //weight 2
    if(($countOfWeights > 1) && isset($tempArray[3]))
    {
        $tempString = $tempArray[3]; //get the section
        $tempArray2 = explode(":",$tempString);
        if(isset($tempArray2[2]))
        {
            $weightValue2 = $tempArray2[2]; //get the weight value
            $weightValue2 =  str_replace('"', '', $weightValue2); //remove the double quotes
        }
    }

    //weight 3
    if(($countOfWeights > 1) && isset($tempArray[5]))
    {
        $tempString = $tempArray[5]; //get the section
        $tempArray2 = explode(":",$tempString);
        if(isset($tempArray2[2]))
        {
            $weightValue3 = $tempArray2[2]; //get the weight value
            $weightValue3 =  str_replace('"', '', $weightValue3); //remove the double quotes
        }
    }

    //weight 4
    if(($countOfWeights > 1) && isset($tempArray[7]))
    {
        $tempString = $tempArray[7]; //get the section
        $tempArray2 = explode(":",$tempString);
        if(isset($tempArray2[2]))
        {
            $weightValue4 = $tempArray2[2]; //get the weight value
            $weightValue4 =  str_replace('"', '', $weightValue4); //remove the double quotes
        }
    }

    //weight 5
    if(($countOfWeights > 1) && isset($tempArray[9]))
    {
        $tempString = $tempArray[9]; //get the section
        $tempArray2 = explode(":",$tempString);
        if(isset($tempArray2[2]))
        {
            $weightValue5 = $tempArray2[2]; //get the weight value
            $weightValue5 =  str_replace('"', '', $weightValue5); //remove the double quotes
        }
    }

    //weight 6
    if(($countOfWeights > 1) && isset($tempArray[11]))
    {
        $tempString = $tempArray[11]; //get the section
        $tempArray2 = explode(":",$tempString);
        if(isset($tempArray2[2]))
        {
            $weightValue6 = $tempArray2[2]; //get the weight value
            $weightValue6 =  str_replace('"', '', $weightValue6); //remove the double quotes
        }
    }

    //weight 7
    if(($countOfWeights > 1) && isset($tempArray[13]))
    {
        $tempString = $tempArray[13]; //get the section
        $tempArray2 = explode(":",$tempString);
        if(isset($tempArray2[2]))
        {
            $weightValue7 = $tempArray2[2]; //get the weight value
            $weightValue7 =  str_replace('"', '', $weightValue7); //remove the double quotes
        }
    }

    //weight 8
    if(($countOfWeights > 1) && isset($tempArray[15]))
    {
        $tempString = $tempArray[15]; //get the section
        $tempArray2 = explode(":",$tempString);
        if(isset($tempArray2[2]))
        {
            $weightValue8 = $tempArray2[2]; //get the weight value
            $weightValue8 =  str_replace('"', '', $weightValue8); //remove the double quotes
        }
    }

    //weight 9
    if(($countOfWeights > 1) && isset($tempArray[17]))
    {
        $tempString = $tempArray[17]; //get the section
        $tempArray2 = explode(":",$tempString);
        if(isset($tempArray2[2]))
        {
            $weightValue9 = $tempArray2[2]; //get the weight value
            $weightValue9 =  str_replace('"', '', $weightValue9); //remove the double quotes
        }
    }

    //weight 10
    if(($countOfWeights > 1) && isset($tempArray[19]))
    {
        $tempString = $tempArray[19]; //get the section
        $tempArray2 = explode(":",$tempString);
        if(isset($tempArray2[2]))
        {
            $weightValue10 = $tempArray2[2]; //get the weight value
            $weightValue10 =  str_replace('"', '', $weightValue10); //remove the double quotes
        }
    }

    //weight 11
    if(($countOfWeights > 0) && isset($tempArray[21]))
    {
        $tempString = $tempArray[21]; //get the section
        $tempArray2 = explode(":",$tempString);
        if(isset($tempArray2[2]))
        {
            $weightValue11 = $tempArray2[2]; //get the weight value
            $weightValue11 =  str_replace('"', '', $weightValue11); //remove the double quotes
        }
    }

    //weight 12
    if(($countOfWeights > 0) && isset($tempArray[23]))
    {
        $tempString = $tempArray[23]; //get the section
        $tempArray2 = explode(":",$tempString);
        if(isset($tempArray2[2]))
        {
            $weightValue12 = $tempArray2[2]; //get the weight value
            $weightValue12 =  str_replace('"', '', $weightValue12); //remove the double quotes
        }
    }

    //weight 13
    if(($countOfWeights > 0) && isset($tempArray[25]))
    {
        $tempString = $tempArray[25]; //get the section
        $tempArray2 = explode(":",$tempString);
        if(isset($tempArray2[2]))
        {
            $weightValue13 = $tempArray2[2]; //get the weight value
            $weightValue13 =  str_replace('"', '', $weightValue13); //remove the double quotes
        }
    }

    //weight 14
    if(($countOfWeights > 0) && isset($tempArray[27]))
    {
        $tempString = $tempArray[27]; //get the section
        $tempArray2 = explode(":",$tempString);
        if(isset($tempArray2[2]))
        {
            $weightValue14 = $tempArray2[2]; //get the weight value
            $weightValue14 =  str_replace('"', '', $weightValue14); //remove the double quotes
        }
    }

    //weight 15
    if(($countOfWeights > 0) && isset($tempArray[29]))
    {
        $tempString = $tempArray[29]; //get the section
        $tempArray2 = explode(":",$tempString);
        if(isset($tempArray2[2]))
        {
            $weightValue15 = $tempArray2[2]; //get the weight value
            $weightValue15 =  str_replace('"', '', $weightValue15); //remove the double quotes
        }
    }

    //weight 16
    if(($countOfWeights > 0) && isset($tempArray[31]))
    {
        $tempString = $tempArray[31]; //get the section
        $tempArray2 = explode(":",$tempString);
        if(isset($tempArray2[2]))
        {
            $weightValue16 = $tempArray2[2]; //get the weight value
            $weightValue16 =  str_replace('"', '', $weightValue16); //remove the double quotes
        }
    }

    //weight 17
    if(($countOfWeights > 0) && isset($tempArray[33]))
    {
        $tempString = $tempArray[33]; //get the section
        $tempArray2 = explode(":",$tempString);
        if(isset($tempArray2[2]))
        {
            $weightValue17 = $tempArray2[2]; //get the weight value
            $weightValue17 =  str_replace('"', '', $weightValue17); //remove the double quotes
        }
    }

    //weight 18
    if(($countOfWeights > 0) && isset($tempArray[35]))
    {
        $tempString = $tempArray[35]; //get the section
        $tempArray2 = explode(":",$tempString);
        if(isset($tempArray2[2]))
        {
            $weightValue18 = $tempArray2[2]; //get the weight value
            $weightValue18 =  str_replace('"', '', $weightValue18); //remove the double quotes
        }
    }

    //output as an array
    $weightsArray = NULL;
    $weightsArray[0] = $weightValue1;
    $weightsArray[1] = $weightValue2;
    $weightsArray[2] = $weightValue3;
    $weightsArray[3] = $weightValue4;
    $weightsArray[4] = $weightValue5;
    $weightsArray[5] = $weightValue6;
    $weightsArray[6] = $weightValue7;
    $weightsArray[7] = $weightValue8;
    $weightsArray[8] = $weightValue9;
    $weightsArray[9] = $weightValue10;
    $weightsArray[10] = $weightValue11;
    $weightsArray[11] = $weightValue12;
    $weightsArray[12] = $weightValue13;
    $weightsArray[13] = $weightValue14;
    $weightsArray[14] = $weightValue15;
    $weightsArray[15] = $weightValue16;
    $weightsArray[16] = $weightValue17;
    $weightsArray[17] = $weightValue18;

    return $weightsArray;
}


/*******************************************************************************
 * Function Name: insertNewSieveStack()
 * Description:
 * This function will:
 * Take numerous values as parameters.
 * Create a record in the database tables gb_qc_sievestacks and gb_qc_sieves.
 * Return a value to confirm success.
 *******************************************************************************/
function insertNewSieveStack($debugging, $stackdescription, $siteId, $numberofsieves, $iscamsizer, $screensize1, $startweight1, $screensize2, $startweight2, $screensize3, $startweight3, $screensize4, $startweight4, $screensize5, $startweight5, $screensize6, $startweight6, $screensize7, $startweight7, $screensize8, $startweight8, $screensize9, $startweight9, $screensize10, $startweight10, $screensize11, $startweight11, $screensize12, $startweight12, $screensize13, $startweight13, $screensize14, $startweight14, $screensize15, $startweight15, $screensize16, $startweight16, $screensize17, $startweight17, $screensize18, $startweight18, $userId)
{
    $result = 1;
    $errorMessage = "qcfunctions.php - insertNewSieveStack() ";
    $newSieveStackID = 0;

    //Insert values into the table gb_qc_sieve_stacks
    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "INSERT INTO gb_qc_sieve_stacks (description, main_site_id, sort_order, is_active, is_camsizer) VALUES ('$stackdescription', $siteId, '1', '1', $iscamsizer)"; //direct SQL method

        $sql = "CALL sp_gb_qc_SieveStackInsert('" . $stackdescription . "'," . $siteId . ",100,1," . $iscamsizer . ",@insert_id);";
        //$sql2 = "SELECT @insert_id AS id;"; //select the last insert ID
        $sql2 = "CALL sp_gb_qc_MaxSieveStackIDGet();";

        $result = mysqli_query($mySQLConnectionLocal,$sql); //insert the record

        //get the new database row ID
        $result2 = $mySQLConnectionLocal->query($sql2); //query for the last insert ID
        $row2 = mysqli_fetch_array($result2);
        $newSieveStackID = $row2["MAX(id)"];

        //check status
        if ($newSieveStackID == 0)
        {
            $errorMessage = $errorMessage . "Error inserting final percentages.";
            //sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
            if($debugging == 1)
            {
                echo $errorMessage;
                echo "Error: " . $sql . "<br>" . $mySQLConnectionLocal->error;
            }
            $result = 0;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error creating a new sieve stack in the database.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            $error = $e->getMessage();
            echo $error;
        }
        $result = 0;
    }

    //Insert values into the table gb_qc_sieves
    //loop through the sieves (except the last), inserting each
    for($i = 0; $i < ($numberofsieves - 1); $i++)
    {
        try
        {
            $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

            if($i == 0)
            {
                $sql = "CALL sp_gb_qc_SieveInsert('" . $newSieveStackID . "', '" . $screensize1 . "', " . $startweight1 . ", 100, 1, " . $userId . ", @insert_id);";
            }
            else if($i == 1)
            {
                $sql = "CALL sp_gb_qc_SieveInsert('" . $newSieveStackID . "', '" . $screensize2 . "', " . $startweight2 . ", 100, 1, " . $userId . ", @insert_id);";
            }
            else if($i == 2)
            {
                $sql = "CALL sp_gb_qc_SieveInsert('" . $newSieveStackID . "', '" . $screensize3 . "', " . $startweight3 . ", 100, 1, " . $userId . ", @insert_id);";
            }
            else if($i == 3)
            {
                $sql = "CALL sp_gb_qc_SieveInsert('" . $newSieveStackID . "', '" . $screensize4 . "', " . $startweight4 . ", 100, 1, " . $userId . ", @insert_id);";
            }
            else if($i == 4)
            {
                $sql = "CALL sp_gb_qc_SieveInsert('" . $newSieveStackID . "', '" . $screensize5 . "', " . $startweight5 . ", 100, 1, " . $userId . ", @insert_id);";
            }
            else if($i == 5)
            {
                $sql = "CALL sp_gb_qc_SieveInsert('" . $newSieveStackID . "', '" . $screensize6 . "', " . $startweight6 . ", 100, 1, " . $userId . ", @insert_id);";
            }
            else if($i == 6)
            {
                $sql = "CALL sp_gb_qc_SieveInsert('" . $newSieveStackID . "', '" . $screensize7 . "', " . $startweight7 . ", 100, 1, " . $userId . ", @insert_id);";
            }
            else if($i == 7)
            {
                $sql = "CALL sp_gb_qc_SieveInsert('" . $newSieveStackID . "', '" . $screensize8 . "', " . $startweight8 . ", 100, 1, " . $userId . ", @insert_id);";
            }
            else if($i == 8)
            {
                $sql = "CALL sp_gb_qc_SieveInsert('" . $newSieveStackID . "', '" . $screensize9 . "', " . $startweight9 . ", 100, 1, " . $userId . ", @insert_id);";
            }
            else if($i == 9)
            {
                $sql = "CALL sp_gb_qc_SieveInsert('" . $newSieveStackID . "', '" . $screensize10 . "', " . $startweight10 . ", 100, 1, " . $userId . ", @insert_id);";
            }
            else if($i == 10)
            {
                $sql = "CALL sp_gb_qc_SieveInsert('" . $newSieveStackID . "', '" . $screensize11 . "', " . $startweight11 . ", 100, 1, " . $userId . ", @insert_id);";
            }
            else if($i == 11)
            {
                $sql = "CALL sp_gb_qc_SieveInsert('" . $newSieveStackID . "', '" . $screensize12 . "', " . $startweight12 . ", 100, 1, " . $userId . ", @insert_id);";
            }
            else if($i == 12)
            {
                $sql = "CALL sp_gb_qc_SieveInsert('" . $newSieveStackID . "', '" . $screensize13 . "', " . $startweight13 . ", 100, 1, " . $userId . ", @insert_id);";
            }
            else if($i == 13)
            {
                $sql = "CALL sp_gb_qc_SieveInsert('" . $newSieveStackID . "', '" . $screensize14 . "', " . $startweight14 . ", 100, 1, " . $userId . ", @insert_id);";
            }
            else if($i == 14)
            {
                $sql = "CALL sp_gb_qc_SieveInsert('" . $newSieveStackID . "', '" . $screensize15 . "', " . $startweight15 . ", 100, 1, " . $userId . ", @insert_id);";
            }
            else if($i == 15)
            {
                $sql = "CALL sp_gb_qc_SieveInsert('" . $newSieveStackID . "', '" . $screensize16 . "', " . $startweight16 . ", 100, 1, " . $userId . ", @insert_id);";
            }
            else if($i == 16)
            {
                $sql = "CALL sp_gb_qc_SieveInsert('" . $newSieveStackID . "', '" . $screensize17 . "', " . $startweight17 . ", 100, 1, " . $userId . ", @insert_id);";
            }


            //echo "sql = " . $sql . "<br/>";

            //direct SQL method to check status
            if ($mySQLConnectionLocal->query($sql) === TRUE)
            {
                $returnValue = mysqli_insert_id($mySQLConnectionLocal);
            }
            else
            {
                $errorMessage = $errorMessage . "Error creating a new sieve record in the database.";
                sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
                if($debugging == 1)
                {
                    echo $errorMessage;
                    echo "Error: " . $sql . "<br>" . $mySQLConnectionLocal->error;
                }
                $result = 0;
            }

            disconnectFromMySQLQC($mySQLConnectionLocal);

        }
        catch (Exception $e)
        {
            $errorMessage = $errorMessage . "Error inserting a new sieve record in MySQL.";
            sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
            if($debugging == 1)
            {
                echo $errorMessage;
                $error = $e->getMessage();
                echo $error;
            }
            $result = 0;
        }
    }

    //insert the last sieve
    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        $sql = "CALL sp_gb_qc_SieveInsert('" . $newSieveStackID . "', '" . $screensize18 . "', " . $startweight18 . ", 100, 1, " . $userId . ", @insert_id);";

        echo "sql = " . $sql . "<br/>";

        //direct SQL method to check status
        if ($mySQLConnectionLocal->query($sql) === TRUE)
        {
            $returnValue = mysqli_insert_id($mySQLConnectionLocal);
        }
        else
        {
            $errorMessage = $errorMessage . "Error creating a record of final percentages.";
            sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
            if($debugging == 1)
            {
                echo $errorMessage;
                echo "Error: " . $sql . "<br>" . $mySQLConnectionLocal->error;
            }
            $result = 0;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error inserting final percentages into MySQL.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            $error = $e->getMessage();
            echo $error;
        }
        $result = 0;
    }

    return $result;
}


/*******************************************************************************
 * Function Name: getRepeatabilityByUserId($userID)
 * Description:
 * This function will:
 * Returns the repeatability value for the user.
 * If the userID is not in the table, then the user will be inserted
 *******************************************************************************/
function getRepeatabilityByUserId($userID)
{
    $errorMessage = "qcfunctions.php - getRepeatabilityByUserId() ";
    $repeatabilityValue = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM gb_qc_user_repeatability WHERE user_id = $userID LIMIT 1"; //direct SQL method
        $sql = "CALL sp_gb_qc_RepeatabilityGetByUserID($userID)"; //stored procedure method

        $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        while($row = $result->fetch_assoc())
        {
            $repeatabilityValue = $row['repeatability_counter'];
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for final percentages by ID.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    //if the user doesn't exist in the database, then create it
    if($repeatabilityValue == NULL)
    {
        $insertResult = 0;
        $insertResult = insertRepeatabiltyUser($userID, 100);
        if($insertResult == 1)
        {
            $repeatabilityValue = 100;
        }
    }

    return $repeatabilityValue;
}


/*******************************************************************************
 * Function Name: updateRepeatability($userID, $repeatabilityValue)
 * Description:
 * This function will:
 * Accept a user ID.
 * Accept a new value for repeatability.
 * Update the repeatability value in the database to the new value.
 *******************************************************************************/
function updateRepeatability($userID, $repeatabilityValue)
{
    $errorMessage = "qcfunctions.php - updateRepeatability() ";

    $returnValue = 0; //a value to tell us if the process was successful.

    try
    {

        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "UPDATE gb_qc_user_repeatability SET `repeatability_counter` = $repeatabilityValue WHERE `user_id` = '" . $userID . "';"; //direct SQL method
        $sql = "CALL sp_gb_qc_RepeatabilityUpdate($repeatabilityValue, $userID)"; //stored procedure method

        //echo "sql = " . $sql;

        //direct SQL method
        if ($mySQLConnectionLocal->query($sql) === TRUE)
        {
            //echo "Record updated successfully<br/>";
            $returnValue = 1;
        }
        else
        {
            echo "Error updating record: " . $mySQLConnectionLocal->error . "<br/>";
            $returnValue = 0;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error updating repeatability value for a user.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            $error = $e->getMessage();
            echo $error;
        }
    }

    return $returnValue;
}


/*******************************************************************************
 * Function Name: insertRepeatabiltyUser($userID, $repeatabilityValue)
 * Description:
 * This function will:
 * Take a user ID and repeatability value as inputs.
 * Create a record in the database table gb_qc_user_repeatability.
 * Return a value to confirm success.
 *******************************************************************************/
function insertRepeatabiltyUser($userID, $repeatabilityValue)
{
    $result = 1;
    $errorMessage = "gb_qcfunctions.php - insertRepeatabiltyUser() ";
    $debugging = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "INSERT INTO gb_qc_user_repeatability (user_id, repeatability_counter) VALUES ($userID, $repeatabilityValue)"; //direct SQL method
        $sql = "CALL sp_gb_qc_RepeatabilityUserInsert($userID, $repeatabilityValue, @insert_id)"; //stored procedure method
        //$sql2 = "SELECT @insert_id AS id;"; //select the last insert ID
        $sql2 = "CALL sp_gb_qc_MaxRepeatabilityUserIDGet();";
        echo $sql;
        echo $sql2;
        $result = mysqli_query($mySQLConnectionLocal,$sql); //insert the record

        //get the new database row ID
        $result2 = $mySQLConnectionLocal->query($sql2); //query for the last insert ID
        $row2 = mysqli_fetch_array($result2);
        $returnValue = $row2["MAX(id)"];

        //check status
        if ($returnValue == 0)
        {
            $errorMessage = $errorMessage . "Error creating a repeatability record.";
            //sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
            if($debugging == 1)
            {
                echo $errorMessage;
                echo "Error: " . $sql . "<br>" . $mySQLConnectionLocal->error;
            }
            $result = 0;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error inserting a user repeatability record into MySQL.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            $error = $e->getMessage();
            echo $error;
        }
        $result = 0;
    }

    return $result;
}


/*******************************************************************************
 * Function Name: insertRepeatabiltySamplePair($originalSample, $repeatedSample)
 * Description:
 * This function will:
 * Take two sample ID's as inputs.
 * Create a record in the database table gb_qc_repeatability_pairs.
 * Return a value to confirm success.
 *******************************************************************************/
function insertRepeatabiltySamplePair($originalSample, $repeatedSample)
{
    $result = 1;
    $errorMessage = "qcfunctions.php - insertRepeatabiltySamplePair() ";

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "INSERT INTO gb_qc_repeatability_pairs (original_sample, repeated_sample) VALUES ($originalSample, $repeatedSample)"; //direct SQL method
        $sql = "CALL sp_gb_qc_RepeatabilitySamplePairInsert('$originalSample', '$repeatedSample', @insert_id)"; // stored procedure method
        //$sql2 = "SELECT @insert_id AS id;"; //select the last insert ID
        $sql2 = "CALL sp_gb_qc_MaxRepeatabilityPairIDGet();";

        $result = mysqli_query($mySQLConnectionLocal,$sql); //insert the record

        //get the new database row ID
        $result2 = $mySQLConnectionLocal->query($sql2); //query for the last insert ID
        $row2 = mysqli_fetch_array($result2);
        $returnValue = $row2["MAX(id)"];

        //check status
        if ($returnValue == 0)
        {
            $errorMessage = $errorMessage . "Error creating a sample pair.";
            //sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
            if($debugging == 1)
            {
                echo $errorMessage;
                echo "Error: " . $sql . "<br>" . $mySQLConnectionLocal->error;
            }
            $result = 0;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error creating a repeatability sample pair record.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            $error = $e->getMessage();
            echo $error;
        }
        $result = 0;
    }

    return $result;
}


/*******************************************************************************
 * Function Name: getRepeatabiltySamplePairByOriginalSample($argId)
 * Description:
 * This function will:
 * Take a sample ID # as a parameter.
 * Get the repeatability sample pair by the id of the original sample.
 * Return an object containing the repeatability sample pair information.
 *******************************************************************************/
function getRepeatabiltySamplePairByOriginalSample($argId)
{
    $errorMessage = "qcfunctions.php - getRepeatabiltySamplePairByOriginalSample() ";
    $pairObject = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    if(($argId != NULL) && ($argId != ""))
    {
        try
        {
            $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

            //$sql = "SELECT * FROM gb_qc_repeatability_pairs WHERE original_sample = $argId LIMIT 1"; //direct SQL method
            $sql = "CALL sp_gb_qc_RepeatabilitySamplePairsGetByOriginalSample('$argId');";

            //echo "DEBUG: SQL = " . $sql . "<br/>";

            $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

            while($row = $result->fetch_assoc())
            {
                $pairObject->vars["id"] = $row['id'];//sample no
                $pairObject->vars["original_sample"] = $row['original_sample'];
                $pairObject->vars["repeated_sample"] = $row['repeated_sample'];
            }

            disconnectFromMySQLQC($mySQLConnectionLocal);

        }
        catch (Exception $e)
        {
            $errorMessage = $errorMessage . "Error querying MySQL for a sample by ID.";
            sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
            if($debugging == 1)
            {
                echo $errorMessage;
                //$error = $e->getMessage();
                //echo $error;
            }
        }
    }
    return $pairObject;
}


/*******************************************************************************
 * Function Name: getRepeatabiltySamplePairByRepeatedSample($argId)
 * Description:
 * This function will:
 * Take a sample ID # as a parameter.
 * Get the repeatability sample pair by the id of the repeat sample.
 * Return an object containing the repeatability sample pair information.
 *******************************************************************************/
function getRepeatabiltySamplePairByRepeatedSample($argId)
{
    $errorMessage = "qcfunctions.php - getRepeatabiltySamplePairByOriginalSample() ";
    $pairObject = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    if(($argId != NULL) && ($argId != ""))
    {
        try
        {
            $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

            //$sql = "SELECT * FROM gb_qc_repeatability_pairs WHERE repeated_sample = $argId LIMIT 1"; //direct SQL method
            $sql = "CALL sp_gb_qc_RepeatabilitySamplePairsGetByRepeatedSample('$argId');";

            $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

            while($row = $result->fetch_assoc())
            {
                $pairObject->vars["id"] = $row['id'];//sample no
                $pairObject->vars["original_sample"] = $row['original_sample'];
                $pairObject->vars["repeated_sample"] = $row['repeated_sample'];
            }

            disconnectFromMySQLQC($mySQLConnectionLocal);

        }
        catch (Exception $e)
        {
            $errorMessage = $errorMessage . "Error querying the MySQL table gb_qc_repeatability_pairs.";
            sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
            if($debugging == 1)
            {
                echo $errorMessage;
                //$error = $e->getMessage();
                //echo $error;
            }
        }
    }

    return $pairObject;
}


/*******************************************************************************
 * Function Name: checkIfSampleIsComplete($argId)
 * Description:
 * This function will:
 * Take a sample ID # as a parameter.
 * Check if the sample is complete.
 * Return the value "1" if complete, or the value "0" if not complete.
 *******************************************************************************/
function checkIfSampleIsComplete($argId)
{
    $errorMessage = "qcfunctions.php - checkIfSampleIsComplete() ";
    $sampleObject = NULL;
    $sampleIsComplete = 0;
    $sql = 0;
    $row = 0;
    $functionDebugging = 0;

    try
    {

        $sampleObject = getSampleById($argId);

        /*
    DEV NOTES:
    A sample is complete if:
    - (If Sieve Stack is selected and Total Weight is greater than 0.
    - OR, if Test Type = Inhibited
    - OR, if Sample Location = James Hardie Moisture Rate AND Moisture Rate is not 0.)
    - OR, if Sample Location = Press Cake Moisture Rate AND Moisture Rate is not 0.)
    - AND none of the Sieve Camsizer/Final Weight values are negative
    A sample is incomplete if:
    - (Sieve Stack is NOT selected OR Total Weight is 0 or less)
    - AND Test Type != "Inhibited"
    - AND Sample Location != "James Hardie Moisture Rate" OR Moisture Rate is 0
     - AND Sample Location != "Press Cake Moisture Rate" OR Moisture Rate is 0
    - AND all of the Sieve Camsizer/Final Weight values are greater than or equal to 0
    */

        if($functionDebugging == 1)
        {
            echo "sampleObject = ";
            echo var_dump($sampleObject);
            echo "<br/>";

            echo "checking Sample ID " . $argId . " for completeness<br/>";
            echo "Sieve Stack = " . $sampleObject->vars["sieveMethod"] . "<br/>";
            echo "totalFinalWeight = " . $sampleObject->vars["totalFinalWeight"] . "<br/>";
            echo "testType = " . $sampleObject->vars["testType"] . "<br/>";
            echo "location = " . $sampleObject->vars["location"] . "<br/>";
            echo "moistureRate = " . $sampleObject->vars["moistureRate"] . "<br/>";
        }

        //If Sieve Stack is selected and Total Weight is not 0.
        if($sampleObject != NULL)
        {
            if(($sampleObject->vars["sieveMethod"] != "") && ($sampleObject->vars["totalFinalWeight"] > 0) && ($sampleObject->vars["totalFinalWeight"] != ""))
            {
                $sampleIsComplete = 1;
            }

            //if Test Type = Inhibited
            if($sampleObject->vars["testType"] == 1) //test type 1 == inhibited
            {
                $sampleIsComplete = 1;
            }

            //if Sample Location = James Hardie Moisture Rate AND Moisture Rate is not 0.
            if(($sampleObject->vars["location"] == 67) && ($sampleObject->vars["moistureRate"] != 0)) //tl qc locatoin 67 == James Hardie Moisture Rate
            {
                $sampleIsComplete = 1;
            }

            //if Sample Location = Press Cake Moisture Rate AND Moisture Rate is not 0.
            if(($sampleObject->vars["location"] == 146) && ($sampleObject->vars["moistureRate"] != 0)) //tl qc locatoin 67 == James Hardie Moisture Rate
            {
                $sampleIsComplete = 1;
            }

            //check for negative values
            //if final weight values exist
            //if the current value is negative
            //then flag the sample as incomplete
            if($functionDebugging == 1) { echo "DEBUG: sieve1Value = " . $sampleObject->vars["sieve1Value"] . "<br/>"; }
            if($sampleObject->vars["sieve1Value"] != NULL)
            {
                if($functionDebugging == 1) { echo "DEBUG: sieve1Value is not null<br/>"; }
                if($sampleObject->vars["sieve1Value"] < 0)
                {
                    if($functionDebugging == 1) { echo "DEBUG: sieve1Value is less than 0<br/>"; }
                    $sampleIsComplete = 0;
                }
            }

            if($sampleObject->vars["sieve2Value"] != NULL)
            {
                if($sampleObject->vars["sieve2Value"] < 0)
                {
                    $sampleIsComplete = 0;
                }
            }

            if($sampleObject->vars["sieve3Value"] != NULL)
            {
                if($sampleObject->vars["sieve3Value"] < 0)
                {
                    $sampleIsComplete = 0;
                }
            }

            if($sampleObject->vars["sieve4Value"] != NULL)
            {
                if($sampleObject->vars["sieve4Value"] < 0)
                {
                    $sampleIsComplete = 0;
                }
            }

            if($sampleObject->vars["sieve5Value"] != NULL)
            {
                if($sampleObject->vars["sieve5Value"] < 0)
                {
                    $sampleIsComplete = 0;
                }
            }

            if($sampleObject->vars["sieve6Value"] != NULL)
            {
                if($sampleObject->vars["sieve6Value"] < 0)
                {
                    $sampleIsComplete = 0;
                }
            }

            if($sampleObject->vars["sieve7Value"] != NULL)
            {
                if($sampleObject->vars["sieve7Value"] < 0)
                {
                    $sampleIsComplete = 0;
                }
            }

            if($sampleObject->vars["sieve8Value"] != NULL)
            {
                if($sampleObject->vars["sieve8Value"] < 0)
                {
                    $sampleIsComplete = 0;
                }
            }

            if($sampleObject->vars["sieve9Value"] != NULL)
            {
                if($sampleObject->vars["sieve9Value"] < 0)
                {
                    $sampleIsComplete = 0;
                }
            }

            if($sampleObject->vars["sieve10Value"] != NULL)
            {
                if($sampleObject->vars["sieve10Value"] < 0)
                {
                    $sampleIsComplete = 0;
                }
            }

            if($sampleObject->vars["sieve11Value"] != NULL)
            {
                if($sampleObject->vars["sieve11Value"] < 0)
                {
                    $sampleIsComplete = 0;
                }
            }

            if($sampleObject->vars["sieve12Value"] != NULL)
            {
                if($sampleObject->vars["sieve12Value"] < 0)
                {
                    $sampleIsComplete = 0;
                }
            }

            if($sampleObject->vars["sieve13Value"] != NULL)
            {
                if($sampleObject->vars["sieve13Value"] < 0)
                {
                    $sampleIsComplete = 0;
                }
            }

            if($sampleObject->vars["sieve14Value"] != NULL)
            {
                if($sampleObject->vars["sieve14Value"] < 0)
                {
                    $sampleIsComplete = 0;
                }
            }

            if($sampleObject->vars["sieve15Value"] != NULL)
            {
                if($sampleObject->vars["sieve15Value"] < 0)
                {
                    $sampleIsComplete = 0;
                }
            }

            if($sampleObject->vars["sieve16Value"] != NULL)
            {
                if($sampleObject->vars["sieve16Value"] < 0)
                {
                    $sampleIsComplete = 0;
                }
            }

            if($sampleObject->vars["sieve17Value"] != NULL)
            {
                if($sampleObject->vars["sieve17Value"] < 0)
                {
                    $sampleIsComplete = 0;
                }
            }

            if($sampleObject->vars["sieve18Value"] != NULL)
            {
                if($sampleObject->vars["sieve18Value"] < 0)
                {
                    $sampleIsComplete = 0;
                }
            }

            if($functionDebugging == 1)
            {
                echo "sampleIsComplete = " . $sampleIsComplete . "<br/>";
            }
        }
    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error checking if a sample is complete.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $sampleIsComplete;
}


/*******************************************************************************
 * Function Name: getDateRangePercentMax($argLocation, $startDate, $endDate)
 * Description:
 * This function will:
 * Accept a parameter with a location ID #.
 * Accept start and end date parameters.
 * Exclude samples based on certain criteria: exclude samples where void status = V, test type != test, test type != retest
 * Return an array of objects containing averages of sample final percentages.
 * Is used in the QC Overview page data.
 *******************************************************************************/
function getDateRangePercentMax($argLocation, $startDate, $endDate)
{

    $errorMessage = "gb_qcfunctions.php -  getDateRangePercentMax() ";
    $arrayOfMaxValues = NULL;
    $outputArray = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //select the samples from the location and time period
        /*
    $sql = "SELECT gb_qc_samples.id, DATE_FORMAT(gb_qc_samples.date, '%Y-%m-%d') as 'date', gb_qc_finalpercentages.finalpercent1, gb_qc_finalpercentages.finalpercent2, gb_qc_finalpercentages.finalpercent3, gb_qc_finalpercentages.finalpercent4, gb_qc_finalpercentages.finalpercent5, gb_qc_finalpercentages.finalpercent6, gb_qc_finalpercentages.finalpercent7, gb_qc_finalpercentages.finalpercent8, gb_qc_finalpercentages.finalpercent9, gb_qc_finalpercentages.finalpercent10, gb_qc_finalpercentages.finalpercent11, gb_qc_finalpercentages.finalpercent12, gb_qc_finalpercentages.finalpercent13, gb_qc_finalpercentages.finalpercent14, gb_qc_finalpercentages.finalpercent15, gb_qc_finalpercentages.finalpercent16, gb_qc_finalpercentages.finalpercent17, gb_qc_finalpercentages.finalpercent18, gb_qc_samples.plus_70, gb_qc_samples.minus_40_plus_70, gb_qc_samples.minus_70, gb_qc_samples.minus_70_plus_140, gb_qc_samples.plus_140, gb_qc_samples.minus_140 "
    . "FROM gb_qc_samples "
    . "LEFT JOIN gb_qc_finalpercentages ON gb_qc_samples.id = gb_qc_finalpercentages.sample_id "
    . "WHERE test_type_id > 1 AND test_type_id < 4 AND void_status_code != 'V' AND location_id = $argLocation AND sieve_method_id is NOT NULL AND date >= '" . $startDate . "' AND date <= '" . $endDate . "'"; //direct SQL method
    */
        $sql = "Call sp_gb_qc_DateRangePercentSamplesGet(" . $argLocation . ", '" . $startDate . "', '" . $endDate . "')"; //stored procedure method

        $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        //initialize values
        $arrayOfMaxValues[0] = 0;
        $arrayOfMaxValues[1] = 0;
        $arrayOfMaxValues[2] = 0;
        $arrayOfMaxValues[3] = 0;
        $arrayOfMaxValues[4] = 0;
        $arrayOfMaxValues[5] = 0;
        $arrayOfMaxValues[6] = 0;
        $arrayOfMaxValues[7] = 0;
        $arrayOfMaxValues[8] = 0;
        $arrayOfMaxValues[9] = 0;
        $arrayOfMaxValues[10] = 0;
        $arrayOfMaxValues[11] = 0;
        $arrayOfMaxValues[12] = 0;
        $arrayOfMaxValues[13] = 0;
        $arrayOfMaxValues[14] = 0;
        $arrayOfMaxValues[15] = 0;
        $arrayOfMaxValues[16] = 0;
        $arrayOfMaxValues[17] = 0;

        $arrayOfMaxValues[18] = 0; // +10 (OS)
        $arrayOfMaxValues[19] = 0; //-10+40
        $arrayOfMaxValues[20] = 0; //-40+70
        $arrayOfMaxValues[21] = 0; //-60+70
        $arrayOfMaxValues[22] = 0; //-70 +140
        $arrayOfMaxValues[23] = 0; //-50+140
        $arrayOfMaxValues[24] = 0; //Near Size
        $arrayOfMaxValues[25] = 0; // -140+325
        $arrayOfMaxValues[26] = 0; //-140

        while($row = $result->fetch_assoc())
        {
            if(checkIfSampleIsComplete($row['id']) == 1) //only include the sample in the data if the sample is complete
            {

                if($row['sieve_1_value'] != NULL)
                {
                    if($row['sieve_1_value'] > $arrayOfMaxValues[0])
                    {
                        $arrayOfMaxValues[0] = $row['sieve_1_value'];
                    }
                }

                if($row['sieve_2_value'] != NULL)
                {
                    if($row['sieve_2_value'] > $arrayOfMaxValues[1])
                    {
                        $arrayOfMaxValues[1] = $row['sieve_2_value'];
                    }
                }

                if($row['sieve_3_value'] != NULL)
                {
                    if($row['sieve_3_value'] > $arrayOfMaxValues[2])
                    {
                        $arrayOfMaxValues[2] = $row['sieve_3_value'];
                    }
                }

                if($row['sieve_4_value'] != NULL)
                {
                    if($row['sieve_4_value'] > $arrayOfMaxValues[3])
                    {
                        $arrayOfMaxValues[3] = $row['sieve_4_value'];
                    }
                }

                if($row['sieve_5_value'] != NULL)
                {
                    if($row['sieve_5_value'] > $arrayOfMaxValues[4])
                    {
                        $arrayOfMaxValues[4] = $row['sieve_5_value'];
                    }
                }

                if($row['sieve_6_value'] != NULL)
                {
                    if($row['sieve_6_value'] > $arrayOfMaxValues[5])
                    {
                        $arrayOfMaxValues[5] = $row['sieve_6_value'];
                    }
                }

                if($row['sieve_7_value'] != NULL)
                {
                    if($row['sieve_7_value'] > $arrayOfMaxValues[6])
                    {
                        $arrayOfMaxValues[6] = $row['sieve_7_value'];
                    }
                }

                if($row['sieve_8_value'] != NULL)
                {
                    if($row['sieve_8_value'] > $arrayOfMaxValues[7])
                    {
                        $arrayOfMaxValues[7] = $row['sieve_8_value'];
                    }
                }

                if($row['sieve_9_value'] != NULL)
                {
                    if($row['sieve_9_value'] > $arrayOfMaxValues[8])
                    {
                        $arrayOfMaxValues[8] = $row['sieve_9_value'];
                    }
                }

                if($row['sieve_10_value'] != NULL)
                {
                    if($row['sieve_10_value'] > $arrayOfMaxValues[9])
                    {
                        $arrayOfMaxValues[9] = $row['sieve_10_value'];
                    }
                }


                if($row['sieve_11_value'] != NULL)
                {
                    if($row['sieve_11_value'] > $arrayOfMaxValues[10])
                    {
                        $arrayOfMaxValues[10] = $row['sieve_11_value'];
                    }
                }

                if($row['sieve_12_value'] != NULL)
                {
                    if($row['sieve_12_value'] > $arrayOfMaxValues[11])
                    {
                        $arrayOfMaxValues[11] = $row['sieve_12_value'];
                    }
                }

                if($row['sieve_13_value'] != NULL)
                {
                    if($row['sieve_13_value'] > $arrayOfMaxValues[12])
                    {
                        $arrayOfMaxValues[12] = $row['sieve_13_value'];
                    }
                }

                if($row['sieve_14_value'] != NULL)
                {
                    if($row['sieve_14_value'] > $arrayOfMaxValues[13])
                    {
                        $arrayOfMaxValues[13] = $row['sieve_14_value'];
                    }
                }

                if($row['sieve_15_value'] != NULL)
                {
                    if($row['sieve_15_value'] > $arrayOfMaxValues[14])
                    {
                        $arrayOfMaxValues[14] = $row['sieve_15_value'];
                    }
                }

                if($row['sieve_16_value'] != NULL)
                {
                    if($row['sieve_16_value'] > $arrayOfMaxValues[15])
                    {
                        $arrayOfMaxValues[15] = $row['sieve_16_value'];
                    }
                }

                if($row['sieve_17_value'] != NULL)
                {
                    if($row['sieve_17_value'] > $arrayOfMaxValues[16])
                    {
                        $arrayOfMaxValues[16] = $row['sieve_17_value'];
                    }
                }

                if($row['sieve_18_value'] != NULL)
                {

                    if($row['sieve_17_value'] > $arrayOfMaxValues[17])
                    {
                        $arrayOfMaxValues[17] = $row['sieve_17_value'];
                    }
                }

                //sieve ranges
                if($row['oversize_percent'] != NULL)
                {

                    if($row['oversize_percent'] > $arrayOfMaxValues[18])
                    {
                        $arrayOfMaxValues[18] = $row['oversize_percent'];
                    }
                }

                if($row['plus_40'] != NULL)
                {

                    if($row['plus_40'] > $arrayOfMaxValues[19])
                    {
                        $arrayOfMaxValues[19] = $row['plus_40'];
                    }
                }

                if($row['minus_40_plus_70'] != NULL)
                {

                    if($row['minus_40_plus_70'] > $arrayOfMaxValues[20])
                    {
                        $arrayOfMaxValues[20] = $row['minus_40_plus_70'];
                    }
                }

                if($row['minus_60_plus_70'] != NULL)
                {

                    if($row['minus_60_plus_70'] > $arrayOfMaxValues[21])
                    {
                        $arrayOfMaxValues[21] = $row['minus_60_plus_70'];
                    }
                }

                if($row['minus_70_plus_140'] != NULL)
                {

                    if($row['minus_70_plus_140'] > $arrayOfMaxValues[22])
                    {
                        $arrayOfMaxValues[22] = $row['minus_70_plus_140'];
                    }
                }

                if($row['minus_50_plus_140'] != NULL)
                {

                    if($row['minus_50_plus_140'] > $arrayOfMaxValues[23])
                    {
                        $arrayOfMaxValues[23] = $row['minus_50_plus_140'];
                    }
                }

                if($row['near_size'] != NULL)
                {

                    if($row['near_size'] > $arrayOfMaxValues[24])
                    {
                        $arrayOfMaxValues[24] = $row['near_size'];
                    }
                }

                if($row['minus_140_plus_325'] != NULL)
                {

                    if($row['minus_140_plus_325'] > $arrayOfMaxValues[25])
                    {
                        $arrayOfMaxValues[25] = $row['minus_140_plus_325'];
                    }
                }

                if($row['minus_140'] != NULL)
                {

                    if($row['minus_140'] > $arrayOfMaxValues[26])
                    {
                        $arrayOfMaxValues[26] = $row['minus_140'];
                    }
                }
            }
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying/calculating 30 day maximums of sample percentages.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $arrayOfMaxValues;
}


/*******************************************************************************
 * Function Name: getMostRecentSampleByLocation($argId)
 * Description:
 * This function will:
 * Take a location ID # as a parameter.
 * Return an object containing the information on the most recent sample for that location.
 * Note, this returns the most recent COMPLETE sample based on the is_complete flag.
 *******************************************************************************/
function getMostRecentSampleByLocation($argId)
{
    $errorMessage = "qcfunctions.php - getMostRecentSampleByLocation() ";
    $sampleObject = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM gb_qc_samples WHERE void_status_code != 'V' AND location_id = $argId AND is_complete = 1 ORDER BY id DESC LIMIT 1"; //direct SQL method
        $sql = "CALL sp_gb_qc_SampleByLocationMostRecentGet($argId);"; //stored procedure method

        $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        while($row = $result->fetch_assoc())
        {
            $sampleObject->vars["id"] = $row['id']; //sample no
            $sampleObject->vars["description"] = $row['description'];
            $sampleObject->vars["repeatabilityId"] = $row['repeatability_id'];
            $sampleObject->vars["testType"] = $row['test_type_id'];
            $sampleObject->vars["compositeType"] = $row['composite_type_id'];
            $sampleObject->vars["sieveMethod"] = $row['sieve_method_id'];
            $sampleObject->vars["siteId"] = $row['site_id'];
            $sampleObject->vars["plantId"] = $row['plant_id'];
            $sampleObject->vars["location"] = $row['location_id'];
            $sampleObject->vars["specificLocation"] = $row['specific_location_id'];
            $sampleObject->vars["date"] = $row['date'];
            $sampleObject->vars["dateShort"] = $row['date_short'];
            $sampleObject->vars["time"] = $row['time'];
            $sampleObject->vars["groupTime"] = $row['group_time'];
            $sampleObject->vars["groupStartDateTime"] = $row['group_start_dt'];
            $sampleObject->vars["finishDateTime"] = $row['finish_dt'];
            $sampleObject->vars["durationMinutes"] = $row['duration_minutes'];
            $sampleObject->vars["duration"] = $row['duration'];
            $sampleObject->vars["dt"] = $row['dt'];
            $sampleObject->vars["dateTimeShort"] = $row['dt_short'];
            $sampleObject->vars["shiftDate"] = $row['shift_date'];
            $sampleObject->vars["shift"] = $row['shift'];
            $sampleObject->vars["sampler"] = $row['sampler'];
            $sampleObject->vars["labTech"] = $row['lab_tech'];
            $sampleObject->vars["operator"] = $row['operator'];
            $sampleObject->vars["railCarId"] = $row['rail_car_id'];
            $sampleObject->vars["railCarProductId"] = $row['rail_car_product_id'];
            $sampleObject->vars["railCarAvailableDateTime"] = $row['rail_car_available_dt'];
            $sampleObject->vars["startingWeight"] = $row['starting_weight'];
            $sampleObject->vars["endingWeight"] = $row['ending_weight'];
            $sampleObject->vars["moistureRate"] = $row['moisture_rate'];
            $sampleObject->vars["drillholeNo"] = $row['drillhole_no'];
            $sampleObject->vars["depthFrom"] = $row['depth_from'];
            $sampleObject->vars["depthTo"] = $row['depth_to'];
            $sampleObject->vars["beginningWetWeight"] = $row['beginning_wet_weight'];
            $sampleObject->vars["preWashDryWeight"] = $row['prewash_dry_weight'];
            $sampleObject->vars["postWashDryWeight"] = $row['postwash_dry_weight'];
            $sampleObject->vars["oversizeWeight"] = $row['oversize_weight'];
            $sampleObject->vars["splitSampleWeight"] = $row['split_sample_weight'];
            $sampleObject->vars["splitSampleWeightDelta"] = $row['split_sample_weight_delta'];
            $sampleObject->vars["oversizePercent"] = $row['oversize_percent'];
            $sampleObject->vars["slimesPercent"] = $row['slimes_percent'];
            $sampleObject->vars["orePercent"] = $row['ore_percent'];
            $sampleObject->vars["notes"] = $row['notes'];
            $sampleObject->vars["reviewNotes"] = $row['review_notes'];
            $sampleObject->vars["turbidity"] = $row['turbidity'];
            $sampleObject->vars["containerSlurryWeight"] = $row['container_slurry_weight'];
            $sampleObject->vars["containerWaterWeight"] = $row['container_water_weight'];
            $sampleObject->vars["containerEmptyWeight"] = $row['container_empty_weight'];
            $sampleObject->vars["kValue"] = $row['k_value'];
            $sampleObject->vars["pan1"] = $row['k_pan_1'];
            $sampleObject->vars["pan2"] = $row['k_pan_2'];
            $sampleObject->vars["pan3"] = $row['k_pan_3'];
            $sampleObject->vars["kPercentFines"] = $row['k_percent_fines'];
            $sampleObject->vars["kValueFail"] = $row['k_value_fail'];
            $sampleObject->vars["pan1Fail"] = $row['k_pan_1_fail'];
            $sampleObject->vars["pan2Fail"] = $row['k_pan_2_fail'];
            $sampleObject->vars["pan3Fail"] = $row['k_pan_3_fail'];
            $sampleObject->vars["kPercentFinesFail"] = $row['k_percent_fines_fail'];
            $sampleObject->vars["roundness"] = $row['roundness'];
            $sampleObject->vars["sphericity"] = $row['sphericity'];
            $sampleObject->vars["sieve_1_desc"] = $row['sieve_1_desc'];
            $sampleObject->vars["sieve_1_value"] = $row['sieve_1_value'];
            $sampleObject->vars["sieve_1_value_cumulative"] = $row['sieve_1_value_cumulative'];
            $sampleObject->vars["sieve_1_value_cumulative_passing"] = $row['sieve_1_value_cumulative_passing'];
            $sampleObject->vars["sieve_2_desc"] = $row['sieve_2_desc'];
            $sampleObject->vars["sieve_2_value"] = $row['sieve_2_value'];
            $sampleObject->vars["sieve_2_value_cumulative"] = $row['sieve_2_value_cumulative'];
            $sampleObject->vars["sieve_2_value_cumulative_passing"] = $row['sieve_2_value_cumulative_passing'];
            $sampleObject->vars["sieve_3_desc"] = $row['sieve_3_desc'];
            $sampleObject->vars["sieve_3_value"] = $row['sieve_3_value'];
            $sampleObject->vars["sieve_3_value_cumulative"] = $row['sieve_3_value_cumulative'];
            $sampleObject->vars["sieve_3_value_cumulative_passing"] = $row['sieve_3_value_cumulative_passing'];
            $sampleObject->vars["sieve_4_desc"] = $row['sieve_4_desc'];
            $sampleObject->vars["sieve_4_value"] = $row['sieve_4_value'];
            $sampleObject->vars["sieve_4_value_cumulative"] = $row['sieve_4_value_cumulative'];
            $sampleObject->vars["sieve_4_value_cumulative_passing"] = $row['sieve_4_value_cumulative_passing'];
            $sampleObject->vars["sieve_5_desc"] = $row['sieve_5_desc'];
            $sampleObject->vars["sieve_5_value"] = $row['sieve_5_value'];
            $sampleObject->vars["sieve_5_value_cumulative"] = $row['sieve_5_value_cumulative'];
            $sampleObject->vars["sieve_5_value_cumulative_passing"] = $row['sieve_5_value_cumulative_passing'];
            $sampleObject->vars["sieve_6_desc"] = $row['sieve_6_desc'];
            $sampleObject->vars["sieve_6_value"] = $row['sieve_6_value'];
            $sampleObject->vars["sieve_6_value_cumulative"] = $row['sieve_6_value_cumulative'];
            $sampleObject->vars["sieve_6_value_cumulative_passing"] = $row['sieve_6_value_cumulative_passing'];
            $sampleObject->vars["sieve_7_desc"] = $row['sieve_7_desc'];
            $sampleObject->vars["sieve_7_value"] = $row['sieve_7_value'];
            $sampleObject->vars["sieve_7_value_cumulative"] = $row['sieve_7_value_cumulative'];
            $sampleObject->vars["sieve_7_value_cumulative_passing"] = $row['sieve_7_value_cumulative_passing'];
            $sampleObject->vars["sieve_8_desc"] = $row['sieve_8_desc'];
            $sampleObject->vars["sieve_8_value"] = $row['sieve_8_value'];
            $sampleObject->vars["sieve_8_value_cumulative"] = $row['sieve_8_value_cumulative'];
            $sampleObject->vars["sieve_8_value_cumulative_passing"] = $row['sieve_8_value_cumulative_passing'];
            $sampleObject->vars["sieve_9_desc"] = $row['sieve_9_desc'];
            $sampleObject->vars["sieve_9_value"] = $row['sieve_9_value'];
            $sampleObject->vars["sieve_9_value_cumulative"] = $row['sieve_9_value_cumulative'];
            $sampleObject->vars["sieve_9_cumulative_passing"] = $row['sieve_9_value_cumulative_passing'];
            $sampleObject->vars["sieve_10_desc"] = $row['sieve_10_desc'];
            $sampleObject->vars["sieve_10_value"] = $row['sieve_10_value'];
            $sampleObject->vars["sieve_10_value_cumulative"] = $row['sieve_10_value_cumulative'];
            $sampleObject->vars["sieve_10_value_cumulative_passing"] = $row['sieve_10_value_cumulative_passing'];
            $sampleObject->vars["totalFinalWeight"] = $row['sieves_total'];
            $sampleObject->vars["startWeightsRaw"] = $row['start_weights_raw'];
            $sampleObject->vars["endWeightsRaw"] = $row['end_weights_raw'];
            $sampleObject->vars["finalWeightsRaw"] = $row['sieves_raw'];
            $sampleObject->vars["feedRowNo"] = $row['feed_row_no'];
            $sampleObject->vars["plus_70"] = $row['plus_70'];
            $sampleObject->vars["plus_50"] = $row['plus_50'];
            $sampleObject->vars["plus_40"] = $row['plus_40'];
            $sampleObject->vars["minus_40_plus_70"] = $row['minus_40_plus_70'];
            $sampleObject->vars["minus_50_plus_140"] = $row['minus_50_plus_140'];
            $sampleObject->vars["minus_140_plus_325"] = $row['minus_140_plus_325'];
            $sampleObject->vars["minus_60_plus_70"] = $row['minus_60_plus_70'];
            $sampleObject->vars["minus_70"] = $row['minus_70'];
            $sampleObject->vars["minus_70_plus_140"] = $row['minus_70_plus_140'];
            $sampleObject->vars["plus_140"] = $row['plus_140'];
            $sampleObject->vars["minus_140"] = $row['minus_140'];
            $sampleObject->vars["nearSize"] = $row['near_size'];
            $sampleObject->vars["cutRatio"] = $row['cut_ratio'];
            $sampleObject->vars["wpMoistureRatio"] = $row['wp_moisture_rate'];
            $sampleObject->vars["percentSolids"] = $row['percent_solids'];
            $sampleObject->vars["stph"] = $row['stph'];
            $sampleObject->vars["tonsRepresented"] = $row['tons_represented'];
            $sampleObject->vars["tphRepresented"] = $row['tph_represented'];
            $sampleObject->vars["recoveryPlusSeventy"] = $row['recovery_plus_70'];
            $sampleObject->vars["recoveryPlusOneForty"] = $row['recovery_plus_140'];
            $sampleObject->vars["isRemoved"] = $row['is_removed'];
            $sampleObject->vars["voidStatusCode"] = $row['void_status_code'];
            $sampleObject->vars["createDateTime"] = $row['create_dt'];
            $sampleObject->vars["createUserId"] = $row['create_user_id'];
            $sampleObject->vars["editDateTime"] = $row['edit_dt'];
            $sampleObject->vars["editUserId"] = $row['edit_user_id'];

            $sampleObject->vars["sieve_11_desc"] = $row['sieve_11_desc'];
            $sampleObject->vars["sieve_11_value"] = $row['sieve_11_value'];
            $sampleObject->vars["sieve_11_value_cumulative"] = $row['sieve_11_value_cumulative'];
            $sampleObject->vars["sieve_11_value_cumulative_passing"] = $row['sieve_11_value_cumulative_passing'];

            $sampleObject->vars["sieve_12_desc"] = $row['sieve_12_desc'];
            $sampleObject->vars["sieve_12_value"] = $row['sieve_12_value'];
            $sampleObject->vars["sieve_12_value_cumulative"] = $row['sieve_12_value_cumulative'];
            $sampleObject->vars["sieve_12_value_cumulative_passing"] = $row['sieve_12_value_cumulative_passing'];

            $sampleObject->vars["sieve_13_desc"] = $row['sieve_13_desc'];
            $sampleObject->vars["sieve_13_value"] = $row['sieve_13_value'];
            $sampleObject->vars["sieve_13_value_cumulative"] = $row['sieve_13_value_cumulative'];
            $sampleObject->vars["sieve_13_value_cumulative_passing"] = $row['sieve_13_value_cumulative_passing'];

            $sampleObject->vars["sieve_14_desc"] = $row['sieve_14_desc'];
            $sampleObject->vars["sieve_14_value"] = $row['sieve_14_value'];
            $sampleObject->vars["sieve_14_value_cumulative"] = $row['sieve_14_value_cumulative'];
            $sampleObject->vars["sieve_14_value_cumulative_passing"] = $row['sieve_14_value_cumulative_passing'];

            $sampleObject->vars["sieve_15_desc"] = $row['sieve_15_desc'];
            $sampleObject->vars["sieve_15_value"] = $row['sieve_15_value'];
            $sampleObject->vars["sieve_15_value_cumulative"] = $row['sieve_15_value_cumulative'];
            $sampleObject->vars["sieve_15_value_cumulative_passing"] = $row['sieve_15_value_cumulative_passing'];

            $sampleObject->vars["sieve_16_desc"] = $row['sieve_16_desc'];
            $sampleObject->vars["sieve_16_value"] = $row['sieve_16_value'];
            $sampleObject->vars["sieve_16_value_cuulative"] = $row['sieve_16_value_cumulative'];
            $sampleObject->vars["sieve_16_value_cumulative_passing"] = $row['sieve_16_value_cumulative_passing'];

            $sampleObject->vars["sieve_17_desc"] = $row['sieve_17_desc'];
            $sampleObject->vars["sieve_17_value"] = $row['sieve_17_value'];
            $sampleObject->vars["sieve_17_value_cumulative"] = $row['sieve_17_value_cumulative'];
            $sampleObject->vars["sieve_17_value_cumulative_passing"] = $row['sieve_17_value_cumulative_passing'];

            $sampleObject->vars["sieve_18_desc"] = $row['sieve_18_desc'];
            $sampleObject->vars["sieve_18_value"] = $row['sieve_18_value'];
            $sampleObject->vars["sieve_18_value_cumulative"] = $row['sieve_18_value_cumulative'];
            $sampleObject->vars["sieve_18_value_cumulative_passing"] = $row['sieve_18_value_cumulative_passing'];

        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a sample by ID.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $sampleObject;
}


/*******************************************************************************
 * Function Name: getDateRangePercentMin($argLocation, $startDate, $endDate)
 * Description:
 * This function will:
 * Accept a parameter with a location ID #.
 * Exclude samples based on certain criteria: exclude samples where void status = V, test type != test, test type != retest
 * Return an array of objects containing averages of sample final percentages.
 * Is used in the QC Overview page data.
 *******************************************************************************/
function getDateRangePercentMin($argLocation, $startDate, $endDate)
{

    $errorMessage = "qcfunctions.php -  getDateRangePercentMin() ";
    $arrayOfMinValues = NULL;
    $outputArray = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //select the samples from the location and time period
        /*
    $sql = "SELECT gb_qc_samples.id, DATE_FORMAT(gb_qc_samples.date, '%Y-%m-%d') as 'date', gb_qc_finalpercentages.finalpercent1, gb_qc_finalpercentages.finalpercent2, gb_qc_finalpercentages.finalpercent3, gb_qc_finalpercentages.finalpercent4, gb_qc_finalpercentages.finalpercent5, gb_qc_finalpercentages.finalpercent6, gb_qc_finalpercentages.finalpercent7, gb_qc_finalpercentages.finalpercent8, gb_qc_finalpercentages.finalpercent9, gb_qc_finalpercentages.finalpercent10, gb_qc_finalpercentages.finalpercent11, gb_qc_finalpercentages.finalpercent12, gb_qc_finalpercentages.finalpercent13, gb_qc_finalpercentages.finalpercent14, gb_qc_finalpercentages.finalpercent15, gb_qc_finalpercentages.finalpercent16, gb_qc_finalpercentages.finalpercent17, gb_qc_finalpercentages.finalpercent18, gb_qc_samples.plus_70, gb_qc_samples.minus_40_plus_70, gb_qc_samples.minus_70, gb_qc_samples.minus_70_plus_140, gb_qc_samples.plus_140, gb_qc_samples.minus_140 "
    . "FROM gb_qc_samples "
    . "LEFT JOIN gb_qc_finalpercentages ON gb_qc_samples.id = gb_qc_finalpercentages.sample_id "
    . "WHERE test_type_id > 1 AND test_type_id < 4 AND void_status_code != 'V' AND location_id = $argLocation AND sieve_method_id is NOT NULL AND date >= '" . $startDate . "' AND date <= '" . $endDate . "'"; //direct SQL method
    */
        $sql = "Call sp_gb_qc_DateRangePercentSamplesGet(" . $argLocation . ", '" . $startDate . "', '" . $endDate . "')"; //stored procedure method
        //echo "SQL : " . $sql;

        $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        //initialize values
        $arrayOfMinValues[0] = 1;
        $arrayOfMinValues[1] = 1;
        $arrayOfMinValues[2] = 1;
        $arrayOfMinValues[3] = 1;
        $arrayOfMinValues[4] = 1;
        $arrayOfMinValues[5] = 1;
        $arrayOfMinValues[6] = 1;
        $arrayOfMinValues[7] = 1;
        $arrayOfMinValues[8] = 1;
        $arrayOfMinValues[9] = 1;
        $arrayOfMinValues[10] = 1;
        $arrayOfMinValues[11] = 1;
        $arrayOfMinValues[12] = 1;
        $arrayOfMinValues[13] = 1;
        $arrayOfMinValues[14] = 1;
        $arrayOfMinValues[15] = 1;
        $arrayOfMinValues[16] = 1;
        $arrayOfMinValues[17] = 1;

        $arrayOfMinValues[18] = 0; // +10 (OS)
        $arrayOfMinValues[19] = 0; //-10+40
        $arrayOfMinValues[20] = 0; //-40+70
        $arrayOfMinValues[21] = 0; //-60+70
        $arrayOfMinValues[22] = 0; //-70 +140
        $arrayOfMinValues[23] = 0; //-50+140
        $arrayOfMinValues[24] = 0; //Near Size
        $arrayOfMinValues[25] = 0; // -140+325
        $arrayOfMinValues[26] = 0; //-140

        $arrayOfMaxValues = NULL;

        while($row = $result->fetch_assoc())
        {
            if(checkIfSampleIsComplete($row['id']) == 1) //only include the sample in the data if the sample is complete
            {
                if(($row['sieve_1_value'] != NULL) && ($row['sieve_1_value'] != 0))
                {
                    if($row['sieve_1_value'] < $arrayOfMinValues[0])
                    {
                        $arrayOfMinValues[0] = $row['sieve_1_value'];
                    }
                }

                if(($row['sieve_2_value'] != NULL) && ($row['sieve_2_value'] != 0))
                {
                    if($row['sieve_2_value'] < $arrayOfMinValues[1])
                    {
                        $arrayOfMinValues[1] = $row['sieve_2_value'];
                    }
                }

                if(($row['sieve_3_value'] != NULL) && ($row['sieve_3_value'] != 0))
                {
                    if($row['sieve_3_value'] < $arrayOfMinValues[2])
                    {
                        $arrayOfMinValues[2] = $row['sieve_3_value'];
                    }
                }

                if(($row['sieve_4_value'] != NULL) && ($row['sieve_4_value'] != 0))
                {
                    if($row['sieve_4_value'] < $arrayOfMinValues[3])
                    {
                        $arrayOfMinValues[3] = $row['sieve_4_value'];
                    }
                }

                if(($row['sieve_5_value'] != NULL) && ($row['sieve_5_value'] != 0))
                {
                    if($row['sieve_5_value'] < $arrayOfMinValues[4])
                    {
                        $arrayOfMinValues[4] = $row['sieve_5_value'];
                    }
                }

                if(($row['sieve_6_value'] != NULL) && ($row['sieve_6_value'] != 0))
                {
                    if($row['sieve_6_value'] < $arrayOfMinValues[5])
                    {
                        $arrayOfMinValues[5] = $row['sieve_6_value'];
                    }
                }

                if(($row['sieve_7_value'] != NULL) && ($row['sieve_7_value'] != 0))
                {
                    if($row['sieve_7_value'] < $arrayOfMinValues[6])
                    {
                        $arrayOfMinValues[6] = $row['sieve_7_value'];
                    }
                }

                if(($row['sieve_8_value'] != NULL) && ($row['sieve_8_value'] != 0))
                {
                    if($row['sieve_8_value'] < $arrayOfMinValues[7])
                    {
                        $arrayOfMinValues[7] = $row['sieve_8_value'];
                    }
                }

                if(($row['sieve_9_value'] != NULL) && ($row['sieve_9_value'] != 0))
                {
                    if($row['sieve_9_value'] < $arrayOfMinValues[8])
                    {
                        $arrayOfMinValues[8] = $row['sieve_9_value'];
                    }
                }

                if(($row['sieve_10_value'] != NULL) && ($row['sieve_10_value'] != 0))
                {
                    if($row['sieve_10_value'] < $arrayOfMinValues[9])
                    {
                        $arrayOfMinValues[9] = $row['sieve_10_value'];
                    }
                }

                if(($row['sieve_11_value'] != NULL) && ($row['sieve_11_value'] != 0))
                {
                    if($row['sieve_11_value'] < $arrayOfMinValues[10])
                    {
                        $arrayOfMinValues[10] = $row['sieve_11_value'];
                    }
                }

                if(($row['sieve_12_value'] != NULL) && ($row['sieve_12_value'] != 0))
                {
                    if($row['sieve_12_value'] < $arrayOfMinValues[11])
                    {
                        $arrayOfMinValues[11] = $row['sieve_12_value'];
                    }
                }

                if(($row['sieve_13_value'] != NULL) && ($row['sieve_13_value'] != 0))
                {
                    if($row['sieve_13_value'] < $arrayOfMinValues[12])
                    {
                        $arrayOfMinValues[12] = $row['sieve_13_value'];
                    }
                }

                if(($row['sieve_14_value'] != NULL) && ($row['sieve_14_value'] != 0))
                {
                    if($row['sieve_14_value'] < $arrayOfMinValues[13])
                    {
                        $arrayOfMinValues[13] = $row['sieve_14_value'];
                    }
                }

                if(($row['sieve_15_value'] != NULL) && ($row['sieve_15_value'] != 0))
                {
                    if($row['sieve_15_value'] < $arrayOfMinValues[14])
                    {
                        $arrayOfMinValues[14] = $row['sieve_15_value'];
                    }
                }

                if(($row['sieve_16_value'] != NULL) && ($row['sieve_16_value'] != 0))
                {
                    if($row['sieve_16_value'] < $arrayOfMinValues[15])
                    {
                        $arrayOfMinValues[15] = $row['sieve_16_value'];
                    }
                }

                if(($row['sieve_17_value'] != NULL) && ($row['sieve_17_value'] != 0))
                {
                    if($row['sieve_17_value'] < $arrayOfMinValues[16])
                    {
                        $arrayOfMinValues[16] = $row['sieve_17_value'];
                    }
                }

                if(($row['sieve_18_value'] != NULL) && ($row['sieve_18_value'] != 0))
                {
                    if($row['sieve_18_value'] < $arrayOfMinValues[17])
                    {
                        $arrayOfMinValues[17] = $row['sieve_18_value'];
                    }
                }


                //sieve ranges
                if($row['oversize_percent'] != NULL)
                {

                    if($row['oversize_percent'] < $arrayOfMinValues[18])
                    {
                        $arrayOfMinValues[18] = $row['oversize_percent'];
                    }
                }

                if($row['plus_40'] != NULL)
                {

                    if($row['plus_40'] < $arrayOfMinValues[19])
                    {
                        $arrayOfMinValues[19] = $row['plus_40'];
                    }
                }

                if($row['minus_40_plus_70'] != NULL)
                {

                    if($row['minus_40_plus_70'] < $arrayOfMinValues[20])
                    {
                        $arrayOfMinValues[20] = $row['minus_40_plus_70'];
                    }
                }

                if($row['minus_60_plus_70'] != NULL)
                {

                    if($row['minus_60_plus_70'] < $arrayOfMinValues[21])
                    {
                        $arrayOfMinValues[21] = $row['minus_60_plus_70'];
                    }
                }

                if($row['minus_70_plus_140'] != NULL)
                {

                    if($row['minus_70_plus_140'] < $arrayOfMinValues[22])
                    {
                        $arrayOfMinValues[22] = $row['minus_70_plus_140'];
                    }
                }

                if($row['minus_50_plus_140'] != NULL)
                {

                    if($row['minus_50_plus_140'] < $arrayOfMinValues[23])
                    {
                        $arrayOfMinValues[23] = $row['minus_50_plus_140'];
                    }
                }

                if($row['near_size'] != NULL)
                {

                    if($row['near_size'] < $arrayOfMinValues[24])
                    {
                        $arrayOfMinValues[24] = $row['near_size'];
                    }
                }

                if($row['minus_140_plus_325'] != NULL)
                {

                    if($row['minus_140_plus_325'] < $arrayOfMinValues[25])
                    {
                        $arrayOfMinValues[25] = $row['minus_140_plus_325'];
                    }
                }

                if($row['minus_140'] != NULL)
                {

                    if($row['minus_140'] < $arrayOfMinValues[26])
                    {
                        $arrayOfMinValues[26] = $row['minus_140'];
                    }
                }
            }
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying/calculating minimums of sample percentages.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $arrayOfMinValues;
}


/*******************************************************************************
 * Function Name: getQCThresholds($screenName, $locationId)
 * Description:
 * This function will:
 * Take a string (sieve name) and a Location Id as parameters.
 * Returns an object containing the high and low thresholds.
 * This function is used to determines which cells to highlight in the QC Overview page tables.
 *******************************************************************************/
function getQCThresholds($screenName, $locationId)
{
    $errorMessage = "qcfunctions.php - getQCThresholds() ";
    $thresholdObject = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    //defaults in case this screen and location combination is not in the database
    $thresholdObject->vars["low_threshold"] = "0";
    $thresholdObject->vars["high_threshold"] = "1";

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM gb_qc_thresholds WHERE location_id = " . $locationId . " AND screen = '" . $screenName . "'"; //direct SQL method
        $sql = "CALL sp_gb_qc_QCThresholdsGet('$locationId','$screenName');";

        $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        while($row = $result->fetch_assoc())
        {
            $thresholdObject->vars["id"] = $row['id'];
            $thresholdObject->vars["screen"] = $row['screen'];
            $thresholdObject->vars["location_id"] = $row['location_id'];
            $thresholdObject->vars["low_threshold"] = $row['low_threshold'];
            $thresholdObject->vars["high_threshold"] = $row['high_threshold'];
            $thresholdObject->vars["is_active"] = $row['is_active'];
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for QC thresholds.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            $error = $e->getMessage();
            echo $error;
        }
    }

    return $thresholdObject;
}


/*******************************************************************************
 * Function Name: performanceCyclesGet($startDate, $endDate)
 * Description:
 * This function will:
 * Accept a starting date and an ending date.
 * Return an array of objects containing values to populate the Cycles table on the QC Peformance page.
 *******************************************************************************/
function performanceCyclesGet($startDate, $endDate)
{
    $errorMessage = "gb_qcfunctions.php - performanceCyclesGet() ";
    $arrayOfTesterObjects = NULL;

    $result = 0;
    $sql = 0;
    $row = 0;

    $result2 = 0;
    $sql2 = 0;
    $row2 = 0;

    $outputCount = 0;

    //query MySQL for a list of plants
    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        $result = $mySQLConnectionLocal->query("CALL sp_GetPlants();"); //get a list of Plants

        while($row = $result->fetch_assoc())
        {

            //query MySQL for the lab tech counts
            try
            {
                $mySQLConnectionLocal2 = connectToMySQLQC(); //connect to the database

                //test 2 = Test
                //test 3 = Retest
                //test 4 = Misc
                //test 5 = Calibration
                //test 6 = Repeatability
                //test 7 - Resample

                $sql2 = "CALL sp_gb_qc_PerformanceCyclesGet(" . $row['id'] . ",'" . $startDate . "','" . $endDate . "');";

                $result2 =  $mySQLConnectionLocal2->query($sql2); //direct SQL method

                while($row2 = $result2->fetch_assoc())
                {
                    $arrayOfTesterObjects[$outputCount]->vars["plant_id"] = $row['id'];

                    $arrayOfTesterObjects[$outputCount]->vars["lab_tech_id"] = $row2['lab_tech'];
                    //Dev Note: test type 1 is not included, because those are "inhibited" samples, or samples that couldn't occur
                    $arrayOfTesterObjects[$outputCount]->vars["test_count"] = $row2['test_type_2_count'];
                    $arrayOfTesterObjects[$outputCount]->vars["retest_count"] = $row2['test_type_3_count'];
                    $arrayOfTesterObjects[$outputCount]->vars["misc_count"] = $row2['test_type_4_count'];
                    $arrayOfTesterObjects[$outputCount]->vars["calibration_count"] = $row2['test_type_5_count'];
                    $arrayOfTesterObjects[$outputCount]->vars["repeatability_count"] = $row2['test_type_6_count'];
                    $arrayOfTesterObjects[$outputCount]->vars["resample_count"] = $row2['test_type_7_count'];

                    $arrayOfTesterObjects[$outputCount]->vars["avg_hours"] = $row2['duration'];;

                    $outputCount++;
                }

                disconnectFromMySQLQC($mySQLConnectionLocal2);
            }
            catch (Exception $e)
            {
                $errorMessage = $errorMessage . "Error querying MySQL for QC Performance Cycle info.";
                sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
                if($debugging == 1)
                {
                    echo $errorMessage;
                    //$error = $e->getMessage();
                    //echo $error;
                }
            }
            //end of querying MySQL for the lab tech counts

        }//end of query for plants

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for QC Performance Cycle info.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $arrayOfTesterObjects;
}


/*******************************************************************************
 * Function Name: performanceCyclesGetByLabTech($startDate, $endDate, $labTech)
 * Description:
 * This function will:
 * Accept a starting date and an ending date.
 * Return an array of objects containing values to populate the Cycles table on the QC Peformance page.
 *******************************************************************************/
function performanceCyclesGetByLabTech($startDate, $endDate, $labTech)
{
    $errorMessage = "qcfunctions.php - performanceCyclesGetByLabTech() ";
    $arrayOfTesterObjects = NULL;

    $result = 0;
    $sql = 0;
    $row = 0;

    $result2 = 0;
    $sql2 = 0;
    $row2 = 0;

    $outputCount = 0;

    //query MySQL for a list of plants
    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM main_plants"; //direct SQL method
        //$result =  $mySQLConnectionLocal->query($sql); //direct SQL method
        $result = $mySQLConnectionLocal->query("CALL sp_GetPlants();"); //stored procedure method

        while($row = $result->fetch_array())
        {
            //$row[0] = plant id

            //query MySQL for the lab tech counts
            try
            {
                $mySQLConnectionLocal2 = connectToMySQLQC(); //connect to the database

                //test 2 = Test
                //test 3 = Retest
                //test 4 = Misc
                //test 5 = Calibration
                //test 6 = Repeatability
                //test 7 = Resample

                $sql2 = "CALL sp_gb_qc_PerformanceCyclesGetByLabTech(" . $row['id'] . "," . $labTech . ",'" . $startDate . "','" . $endDate . "');";

                $result2 =  $mySQLConnectionLocal2->query($sql2); //direct SQL method

                while($row2 = $result2->fetch_assoc())
                {
                    $arrayOfTesterObjects[$outputCount]->vars["plant_id"] = $row['id'];

                    $arrayOfTesterObjects[$outputCount]->vars["lab_tech_id"] = $row2['lab_tech'];
                    //Dev Note: test type 1 is not included, because those are "inhibited" samples, or samples that couldn't occur
                    $arrayOfTesterObjects[$outputCount]->vars["test_count"] = $row2['test_type_2_count'];
                    $arrayOfTesterObjects[$outputCount]->vars["retest_count"] = $row2['test_type_3_count'];
                    $arrayOfTesterObjects[$outputCount]->vars["misc_count"] = $row2['test_type_4_count'];
                    $arrayOfTesterObjects[$outputCount]->vars["calibration_count"] = $row2['test_type_5_count'];
                    $arrayOfTesterObjects[$outputCount]->vars["repeatability_count"] = $row2['test_type_6_count'];
                    $arrayOfTesterObjects[$outputCount]->vars["resample_count"] = $row2['test_type_7_count'];

                    $arrayOfTesterObjects[$outputCount]->vars["avg_hours"] = $row2['duration'];;

                    $outputCount++;
                }

                disconnectFromMySQLQC($mySQLConnectionLocal2);
            }
            catch (Exception $e)
            {
                $errorMessage = $errorMessage . "Error querying MySQL for QC Performance Cycle info by lab tech.";
                sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
                if($debugging == 1)
                {
                    echo $errorMessage;
                    //$error = $e->getMessage();
                    //echo $error;
                }
            }
            //end of querying MySQL for the lab tech counts

        }//end of query for plants

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for QC Performance Cycle info by lab tech.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $arrayOfTesterObjects;
}


/*******************************************************************************
 * Function Name: getRepeatabiltySamplePairs($startDate, $endDate)
 * Description:
 * This function will:
 * Accept starting and ending datetimes as parameters.
 * Get the repeatability sample pairs for the date range (based on the datetime of the repeated sample).
 * Return an object containing the repeatability sample pair information.
 *******************************************************************************/
function getRepeatabiltySamplePairs($startDate, $endDate)
{
    $errorMessage = "qcfunctions.php - getRepeatabilitySamplePairs() ";
    $arrayOfPairObjects = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;
    $resultCount = 0;

    $original30 = 0;
    $original40 = 0;
    $original45 = 0;
    $original50 = 0;
    $original60 = 0;
    $original70 = 0;
    $original80 = 0;
    $original100 = 0;
    $original120 = 0;
    $original140 = 0;
    $original200 = 0;
    $originalPAN = 0;
    $originalPlus70 = 0;

    $repeat30 = 0;
    $repeat40 = 0;
    $repeat45 = 0;
    $repeat50 = 0;
    $repeat60 = 0;
    $repeat70 = 0;
    $repeat80 = 0;
    $repeat100 = 0;
    $repeat120 = 0;
    $repeat140 = 0;
    $repeat200 = 0;
    $repeatPAN = 0;
    $repeatPlus70 = 0;

    $difference30 = 0;
    $difference40 = 0;
    $difference45 = 0;
    $difference50 = 0;
    $difference60 = 0;
    $difference70 = 0;
    $difference80 = 0;
    $difference100 = 0;
    $difference120 = 0;
    $difference140 = 0;
    $difference200 = 0;
    $differencePAN = 0;
    $differencePlus70 = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        /*
    $sql = "SELECT pairs.id, pairs.original_sample, pairs.repeated_sample, original.date, repeated.date, original.lab_tech, repeated.lab_tech, original.location_id, repeated.location_id, original.sieve_method_id, repeated.sieve_method_id, original.sieve_1_desc, original.sieve_2_desc, original.sieve_3_desc, original.sieve_4_desc, original.sieve_5_desc, original.sieve_6_desc, original.sieve_7_desc, original.sieve_8_desc, original.sieve_9_desc, original.sieve_10_desc, original.sieve_1_value, original.sieve_2_value, original.sieve_3_value, original.sieve_4_value, original.sieve_5_value, original.sieve_6_value, original.sieve_7_value, original.sieve_8_value, original.sieve_9_value, original.sieve_10_value, original.plus_70, repeated.sieve_1_desc, repeated.sieve_2_desc, repeated.sieve_3_desc, repeated.sieve_4_desc, repeated.sieve_5_desc, repeated.sieve_6_desc, repeated.sieve_7_desc, repeated.sieve_8_desc, repeated.sieve_9_desc, repeated.sieve_10_desc, repeated.sieve_1_value, repeated.sieve_2_value, repeated.sieve_3_value, repeated.sieve_4_value, repeated.sieve_5_value, repeated.sieve_6_value, repeated.sieve_7_value, repeated.sieve_8_value, repeated.sieve_9_value, repeated.sieve_10_value, repeated.plus_70 " .
      "FROM gb_qc_repeatability_pairs AS pairs " .
      "LEFT JOIN gb_qc_samples AS original ON pairs.original_sample = original.id " .
      "LEFT JOIN gb_qc_samples AS repeated ON pairs.repeated_sample = repeated.id " .
      "WHERE original.date >= '" . $startDate ."' " .
      "AND original.date <= '" . $endDate . " ';";
    */
        $sql = "CALL sp_gb_qc_RepeatabilitySamplePairsGet('$startDate','$endDate');";

        //echo "DEBUG: SQL from getRepeatabiltySamplePairs() function = " . $sql . "<br/><br/>";

        $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        while($row = $result->fetch_assoc())
        {
            //check that both samples are complete
            if((checkIfSampleIsComplete($row['original_sample']) == 1) && (checkIfSampleIsComplete($row['repeated_sample']) == 1))
            {

                $arrayOfPairObjects[$resultCount]->vars["id"] = $row['id'];
                $arrayOfPairObjects[$resultCount]->vars["original_sample"] = $row['original_sample'];
                $arrayOfPairObjects[$resultCount]->vars["repeated_sample"] = $row['repeated_sample'];
                $arrayOfPairObjects[$resultCount]->vars["datetime"] = $row['original_date'];
                $arrayOfPairObjects[$resultCount]->vars["location"] = $row['original_location_id'];
                $arrayOfPairObjects[$resultCount]->vars["lab_tech"] = $row['original_lab_tech'];
                $arrayOfPairObjects[$resultCount]->vars["sieve_stack"] = $row['original_sieve_method_id'];

                //case switch to get the value for each screen size for the original sample
                switch ($row['original_sieve_1_desc']) //sieve 1 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_1_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_1_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_1_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_1_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_1_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_1_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_1_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_1_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_1_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_1_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_1_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_1_value'];
                        break;
                }
                switch ($row['original_sieve_2_desc']) //sieve 2 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_2_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_2_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_2_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_2_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_2_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_2_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_2_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_2_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_2_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_2_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_2_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_2_value'];
                        break;
                }
                switch ($row['original_sieve_3_desc']) //sieve 3 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_3_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_3_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_3_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_3_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_3_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_3_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_3_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_3_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_3_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_3_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_3_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_3_value'];
                        break;
                }
                switch ($row['original_sieve_4_desc']) //sieve 4 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_4_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_4_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_4_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_4_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_4_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_4_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_4_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_4_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_4_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_4_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_4_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_4_value'];
                        break;
                }
                switch ($row['original_sieve_5_desc']) //sieve 5 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_5_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_5_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_5_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_5_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_5_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_5_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_5_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_5_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_5_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_5_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_5_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_5_value'];
                        break;
                }
                switch ($row['original_sieve_6_desc']) //sieve 6 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_6_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_6_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_6_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_6_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_6_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_6_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_6_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_6_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_6_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_6_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_6_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_6_value'];
                        break;
                }
                switch ($row['original_sieve_7_desc']) //sieve 7 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_7_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_7_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_7_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_7_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_7_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_7_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_7_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_7_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_7_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_7_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_7_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_7_value'];
                        break;
                }
                switch ($row['original_sieve_8_desc']) //sieve 8 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_8_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_8_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_8_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_8_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_8_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_8_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_8_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_8_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_8_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_8_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_8_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_8_value'];
                        break;
                }
                switch ($row['original_sieve_9_desc']) //sieve 9 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_9_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_9_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_9_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_9_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_9_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_9_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_9_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_9_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_9_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_9_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_9_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_9_value'];
                        break;
                }
                switch ($row['original_sieve_10_desc']) //sieve 10 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_10_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_10_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_10_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_10_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_10_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_10_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_10_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_10_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_10_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_10_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_10_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_10_value'];
                        break;
                }
                switch ($row['original_sieve_11_desc']) //sieve 11 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_11_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_11_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_11_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_11_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_11_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_11_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_11_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_11_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_11_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_11_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_11_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_11_value'];
                        break;
                }
                switch ($row['original_sieve_12_desc']) //sieve 12 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_12_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_12_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_12_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_12_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_12_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_12_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_12_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_12_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_12_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_12_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_12_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_12_value'];
                        break;
                }
                switch ($row['original_sieve_13_desc']) //sieve 13 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_13_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_13_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_13_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_13_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_13_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_13_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_13_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_13_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_13_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_13_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_13_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_13_value'];
                        break;
                }
                switch ($row['original_sieve_14_desc']) //sieve 14 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_14_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_14_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_14_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_14_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_14_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_14_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_14_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_14_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_14_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_14_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_14_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_14_value'];
                        break;
                }
                switch ($row['original_sieve_15_desc']) //sieve 5 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_15_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_15_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_15_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_15_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_15_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_15_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_15_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_15_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_15_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_15_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_15_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_15_value'];
                        break;
                }
                switch ($row['original_sieve_16_desc']) //sieve 16 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_16_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_16_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_16_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_16_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_16_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_16_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_16_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_16_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_16_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_16_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_16_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_16_value'];
                        break;
                }
                switch ($row['original_sieve_17_desc']) //sieve 17 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_17_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_17_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_17_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_17_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_17_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_17_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_17_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_17_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_17_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_17_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_17_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_17_value'];
                        break;
                }
                switch ($row['original_sieve_18_desc']) //sieve 18 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_18_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_18_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_18_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_18_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_18_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_18_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_18_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_18_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_18_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_18_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_18_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_18_value'];
                        break;
                }

                //case switch to get the value for each screen size for the repeat sample
                switch ($row['repeated_sieve_1_desc']) //sieve 1 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_1_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_1_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_1_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_1_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_1_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_1_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_1_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_1_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_1_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_1_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_1_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_1_value'];
                        break;
                }
                switch ($row['repeated_sieve_2_desc']) //sieve 2 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_2_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_2_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_2_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_2_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_2_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_2_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_2_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_2_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_2_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_2_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_2_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_2_value'];
                        break;
                }
                switch ($row['repeated_sieve_3_desc']) //sieve 3 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_3_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_3_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_3_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_3_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_3_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_3_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_3_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_3_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_3_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_3_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_3_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_3_value'];
                        break;
                }
                switch ($row['repeated_sieve_4_desc']) //sieve 4 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_4_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_4_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_4_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_4_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_4_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_4_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_4_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_4_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_4_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_4_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_4_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_4_value'];
                        break;
                }
                switch ($row['repeated_sieve_5_desc']) //sieve 5 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_5_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_5_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_5_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_5_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_5_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_5_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_5_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_5_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_5_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_5_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_5_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_5_value'];
                        break;
                }
                switch ($row['repeated_sieve_6_desc']) //sieve 6 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_6_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_6_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_6_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_6_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_6_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_6_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_6_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_6_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_6_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_6_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_6_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_6_value'];
                        break;
                }
                switch ($row['repeated_sieve_7_desc']) //sieve 7 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_7_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_7_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_7_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_7_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_7_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_7_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_7_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_7_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_7_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_7_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_7_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_7_value'];
                        break;
                }
                switch ($row['repeated_sieve_8_desc']) //sieve 8 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_8_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_8_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_8_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_8_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_8_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_8_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_8_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_8_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_8_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_8_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_8_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_8_value'];
                        break;
                }
                switch ($row['repeated_sieve_9_desc']) //sieve 9 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_9_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_9_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_9_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_9_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_9_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_9_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_9_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_9_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_9_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_9_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_9_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_9_value'];
                        break;
                }
                switch ($row['repeated_sieve_10_desc']) //sieve 10 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_10_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_10_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_10_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_10_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_10_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_10_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_10_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_10_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_10_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_10_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_10_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_10_value'];
                        break;
                }
                switch ($row['repeated_sieve_11_desc']) //sieve 11 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_11_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_11_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_11_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_11_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_11_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_11_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_11_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_11_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_11_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_11_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_11_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_11_value'];
                        break;
                }
                switch ($row['repeated_sieve_12_desc']) //sieve 12 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_12_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_12_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_12_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_12_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_12_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_12_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_12_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_12_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_12_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_12_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_12_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_12_value'];
                        break;
                }
                switch ($row['repeated_sieve_13_desc']) //sieve 13 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_13_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_13_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_13_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_13_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_13_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_13_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_13_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_13_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_13_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_13_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_13_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_13_value'];
                        break;
                }
                switch ($row['repeated_sieve_14_desc']) //sieve 14 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_14_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_14_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_14_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_14_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_14_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_14_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_14_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_14_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_14_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_14_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_14_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_14_value'];
                        break;
                }
                switch ($row['repeated_sieve_15_desc']) //sieve 15 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_15_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_15_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_15_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_15_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_15_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_15_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_15_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_15_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_15_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_15_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_15_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_15_value'];
                        break;
                }
                switch ($row['repeated_sieve_16_desc']) //sieve 16 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_16_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_16_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_16_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_16_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_16_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_16_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_16_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_16_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_16_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_16_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_16_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_16_value'];
                        break;
                }
                switch ($row['repeated_sieve_17_desc']) //sieve 17 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_17_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_17_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_17_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_17_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_17_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_17_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_17_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_17_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_17_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_17_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_17_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_17_value'];
                        break;
                }
                switch ($row['repeated_sieve_18_desc']) //sieve 18 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_18_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_18_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_18_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_18_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_18_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_18_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_18_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_18_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_18_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_18_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_18_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_18_value'];
                        break;
                }

                //for each screen size, calculate
                //if either the original or the repeated sample is blank, then set the return value as blank
                //else set the return value to the difference
                if(($original30 != 0) && ($repeat30 != 0))
                {
                    $difference30 = abs($original30 - $repeat30);
                }
                else
                {
                    $difference30 = "";
                }
                if(($original40 != 0) && ($repeat40 != 0))
                {
                    $difference40 = abs($original40 - $repeat40);
                }
                else
                {
                    $difference40 = "";
                }
                if(($original45 != 0) && ($repeat45 != 0))
                {
                    $difference45 = abs($original45 - $repeat45);
                }
                else
                {
                    $difference45 = "";
                }
                if(($original50 != 0) && ($repeat50 != 0))
                {
                    $difference50 = abs($original50 - $repeat50);
                }
                else
                {
                    $difference50 = "";
                }
                if(($original60 != 0) && ($repeat60 != 0))
                {
                    $difference60 = abs($original60 - $repeat60);
                }
                else
                {
                    $difference60 = "";
                }
                if(($original70 != 0) && ($repeat70 != 0))
                {
                    $difference70 = abs($original70 - $repeat70);
                }
                else
                {
                    $difference70 = "";
                }
                if(($original80 != 0) && ($repeat80 != 0))
                {
                    $difference80 = abs($original80 - $repeat80);
                }
                else
                {
                    $difference80 = "";
                }
                if(($original100 != 0) && ($repeat100 != 0))
                {
                    $difference100 = abs($original100 - $repeat100);
                }
                else
                {
                    $difference100 = "";
                }
                if(($original120 != 0) && ($repeat120 != 0))
                {
                    $difference120 = abs($original120 - $repeat120);
                }
                else
                {
                    $difference120 = "";
                }
                if(($original140 != 0) && ($repeat140 != 0))
                {
                    $difference140 = abs($original140 - $repeat140);
                }
                else
                {
                    $difference140 = "";
                }
                if(($originalPAN != 0) && ($repeatPAN != 0))
                {
                    $differencePAN = abs($originalPAN - $repeatPAN);
                }
                else
                {
                    $differencePAN = "";
                }

                $arrayOfPairObjects[$resultCount]->vars["difference30"] = $difference30;
                $arrayOfPairObjects[$resultCount]->vars["difference40"] = $difference40;
                $arrayOfPairObjects[$resultCount]->vars["difference45"] = $difference45;
                $arrayOfPairObjects[$resultCount]->vars["difference50"] = $difference50;
                $arrayOfPairObjects[$resultCount]->vars["difference60"] = $difference60;
                $arrayOfPairObjects[$resultCount]->vars["difference70"] = $difference70;
                $arrayOfPairObjects[$resultCount]->vars["difference80"] = $difference80;
                $arrayOfPairObjects[$resultCount]->vars["difference100"] = $difference100;
                $arrayOfPairObjects[$resultCount]->vars["difference120"] = $difference120;
                $arrayOfPairObjects[$resultCount]->vars["difference140"] = $difference140;
                $arrayOfPairObjects[$resultCount]->vars["difference200"] = $difference200;
                $arrayOfPairObjects[$resultCount]->vars["differencePAN"] = $differencePAN;

                //calculate and store the plus70 value
                $originalPlus70 = $row['original_plus_70'];
                $repeatPlus70 = $row['repeated_plus_70'];
                if(($originalPlus70 != 0) && ($repeatPlus70 != 0))
                {
                    $differencePlus70 = abs($originalPlus70 - $repeatPlus70);
                }
                else
                {
                    $differencePlus70 = "";
                }
                $arrayOfPairObjects[$resultCount]->vars["differencePlus70"] = $differencePlus70;

                //increment the counter, for the next item to add to the array
                $resultCount += 1;

            }
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a repeatability sample pairs.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $arrayOfPairObjects;
}


/*******************************************************************************
 * Function Name: getRepeatabiltySamplePairsByLabTech($startDate, $endDate, $labTech)
 * Description:
 * This function will:
 * Accept starting datetime, ending datetime, and lab tech ID as parameters.
 * Get the repeatability sample pairs for the date range (based on the datetime of the repeated sample).
 * Return an object containing the repeatability sample pair information.
 *******************************************************************************/
function getRepeatabiltySamplePairsByLabTech($startDate, $endDate, $labTech)
{
    $errorMessage = "qcfunctions.php - getRepeatabiltySamplePairs() ";
    $arrayOfPairObjects = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;
    $resultCount = 0;

    $original30 = 0;
    $original40 = 0;
    $original45 = 0;
    $original50 = 0;
    $original60 = 0;
    $original70 = 0;
    $original80 = 0;
    $original100 = 0;
    $original120 = 0;
    $original140 = 0;
    $original200 = 0;
    $originalPAN = 0;
    $originalPlus70 = 0;

    $repeat30 = 0;
    $repeat40 = 0;
    $repeat45 = 0;
    $repeat50 = 0;
    $repeat60 = 0;
    $repeat70 = 0;
    $repeat80 = 0;
    $repeat100 = 0;
    $repeat120 = 0;
    $repeat140 = 0;
    $repeat200 = 0;
    $repeatPAN = 0;
    $repeatPlus70 = 0;

    $difference30 = 0;
    $difference40 = 0;
    $difference45 = 0;
    $difference50 = 0;
    $difference60 = 0;
    $difference70 = 0;
    $difference80 = 0;
    $difference100 = 0;
    $difference120 = 0;
    $difference140 = 0;
    $difference200 = 0;
    $differencePAN = 0;
    $differencePlus70 = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database
        /*
    $sql = "SELECT pairs.id, pairs.original_sample, pairs.repeated_sample, original.date, repeated.date, original.lab_tech, repeated.lab_tech, original.location_id, repeated.location_id, original.sieve_method_id, repeated.sieve_method_id, original.sieve_1_desc, original.sieve_2_desc, original.sieve_3_desc, original.sieve_4_desc, original.sieve_5_desc, original.sieve_6_desc, original.sieve_7_desc, original.sieve_8_desc, original.sieve_9_desc, original.sieve_10_desc, original.sieve_1_value, original.sieve_2_value, original.sieve_3_value, original.sieve_4_value, original.sieve_5_value, original.sieve_6_value, original.sieve_7_value, original.sieve_8_value, original.sieve_9_value, original.sieve_10_value, original.plus_70, repeated.sieve_1_desc, repeated.sieve_2_desc, repeated.sieve_3_desc, repeated.sieve_4_desc, repeated.sieve_5_desc, repeated.sieve_6_desc, repeated.sieve_7_desc, repeated.sieve_8_desc, repeated.sieve_9_desc, repeated.sieve_10_desc, repeated.sieve_1_value, repeated.sieve_2_value, repeated.sieve_3_value, repeated.sieve_4_value, repeated.sieve_5_value, repeated.sieve_6_value, repeated.sieve_7_value, repeated.sieve_8_value, repeated.sieve_9_value, repeated.sieve_10_value, repeated.plus_70 " .
      "FROM gb_qc_repeatability_pairs AS pairs " .
      "LEFT JOIN gb_qc_samples AS original ON pairs.original_sample = original.id " .
      "LEFT JOIN gb_qc_samples AS repeated ON pairs.repeated_sample = repeated.id " .
      "WHERE original.date >= '" . $startDate . "' " .
      "AND original.date <= '" . $endDate . "' " .
      "AND original.lab_tech = '" . $labTech . "';";
    */
        $sql = "CALL sp_gb_qc_RepeatabilitySamplePairsGetByLabTech('$startDate','$endDate','$labTech');";
        //echo "DEBUG: SQL = " . $sql . "<br/><br/>";

        $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        while($row = $result->fetch_assoc())
        {
            //check that both samples are complete
            if((checkIfSampleIsComplete($row['original_sample']) == 1) && (checkIfSampleIsComplete($row['repeated_sample']) == 1))
            {

                $arrayOfPairObjects[$resultCount]->vars["id"] = $row['id'];
                $arrayOfPairObjects[$resultCount]->vars["original_sample"] = $row['original_sample'];
                $arrayOfPairObjects[$resultCount]->vars["repeated_sample"] = $row['repeated_sample'];
                $arrayOfPairObjects[$resultCount]->vars["datetime"] = $row['original_date'];
                $arrayOfPairObjects[$resultCount]->vars["location"] = $row['original_location_id'];
                $arrayOfPairObjects[$resultCount]->vars["lab_tech"] = $row['original_lab_tech'];
                $arrayOfPairObjects[$resultCount]->vars["sieve_stack"] = $row['original_sieve_method_id'];

                //case switch to get the value for each screen size for the original sample
                switch ($row['original_sieve_1_desc']) //sieve 1 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_1_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_1_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_1_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_1_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_1_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_1_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_1_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_1_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_1_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_1_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_1_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_1_value'];
                        break;
                }
                switch ($row['original_sieve_2_desc']) //sieve 2 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_2_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_2_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_2_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_2_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_2_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_2_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_2_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_2_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_2_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_2_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_2_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_2_value'];
                        break;
                }
                switch ($row['original_sieve_3_desc']) //sieve 3 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_3_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_3_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_3_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_3_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_3_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_3_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_3_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_3_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_3_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_3_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_3_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_3_value'];
                        break;
                }
                switch ($row['original_sieve_4_desc']) //sieve 4 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_4_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_4_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_4_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_4_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_4_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_4_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_4_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_4_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_4_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_4_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_4_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_4_value'];
                        break;
                }
                switch ($row['original_sieve_5_desc']) //sieve 5 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_5_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_5_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_5_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_5_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_5_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_5_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_5_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_5_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_5_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_5_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_5_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_5_value'];
                        break;
                }
                switch ($row['original_sieve_6_desc']) //sieve 6 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_6_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_6_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_6_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_6_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_6_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_6_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_6_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_6_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_6_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_6_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_6_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_6_value'];
                        break;
                }
                switch ($row['original_sieve_7_desc']) //sieve 7 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_7_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_7_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_7_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_7_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_7_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_7_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_7_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_7_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_7_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_7_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_7_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_7_value'];
                        break;
                }
                switch ($row['original_sieve_8_desc']) //sieve 8 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_8_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_8_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_8_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_8_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_8_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_8_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_8_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_8_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_8_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_8_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_8_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_8_value'];
                        break;
                }
                switch ($row['original_sieve_9_desc']) //sieve 9 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_9_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_9_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_9_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_9_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_9_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_9_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_9_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_9_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_9_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_9_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_9_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_9_value'];
                        break;
                }
                switch ($row['original_sieve_10_desc']) //sieve 10 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_10_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_10_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_10_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_10_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_10_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_10_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_10_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_10_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_10_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_10_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_10_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_10_value'];
                        break;
                }
                switch ($row['original_sieve_11_desc']) //sieve 11 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_11_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_11_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_11_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_11_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_11_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_11_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_11_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_11_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_11_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_11_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_11_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_11_value'];
                        break;
                }
                switch ($row['original_sieve_12_desc']) //sieve 12 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_12_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_12_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_12_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_12_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_12_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_12_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_12_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_12_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_12_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_12_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_12_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_12_value'];
                        break;
                }
                switch ($row['original_sieve_13_desc']) //sieve 13 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_13_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_13_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_13_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_13_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_13_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_13_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_13_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_13_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_13_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_13_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_13_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_13_value'];
                        break;
                }
                switch ($row['original_sieve_14_desc']) //sieve 14 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_14_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_14_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_14_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_14_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_14_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_14_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_14_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_14_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_14_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_14_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_14_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_14_value'];
                        break;
                }
                switch ($row['original_sieve_15_desc']) //sieve 5 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_15_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_15_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_15_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_15_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_15_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_15_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_15_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_15_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_15_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_15_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_15_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_15_value'];
                        break;
                }
                switch ($row['original_sieve_16_desc']) //sieve 16 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_16_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_16_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_16_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_16_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_16_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_16_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_16_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_16_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_16_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_16_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_16_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_16_value'];
                        break;
                }
                switch ($row['original_sieve_17_desc']) //sieve 17 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_17_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_17_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_17_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_17_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_17_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_17_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_17_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_17_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_17_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_17_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_17_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_17_value'];
                        break;
                }
                switch ($row['original_sieve_18_desc']) //sieve 18 desc
                {
                    case "30":
                        $original30 = $row['original_sieve_18_value'];
                        break;
                    case "40":
                        $original40 = $row['original_sieve_18_value'];
                        break;
                    case "45":
                        $original45 = $row['original_sieve_18_value'];
                        break;
                    case "50":
                        $original50 = $row['original_sieve_18_value'];
                        break;
                    case "60":
                        $original60 = $row['original_sieve_18_value'];
                        break;
                    case "70":
                        $original70 = $row['original_sieve_18_value'];
                        break;
                    case "80":
                        $original80 = $row['original_sieve_18_value'];
                        break;
                    case "100":
                        $original100 = $row['original_sieve_18_value'];
                        break;
                    case "120":
                        $original120 = $row['original_sieve_18_value'];
                        break;
                    case "140":
                        $original140 = $row['original_sieve_18_value'];
                        break;
                    case "200":
                        $original200 = $row['original_sieve_18_value'];
                        break;
                    case "PAN":
                        $originalPAN = $row['original_sieve_18_value'];
                        break;
                }

                //case switch to get the value for each screen size for the repeat sample
                switch ($row['repeated_sieve_1_desc']) //sieve 1 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_1_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_1_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_1_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_1_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_1_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_1_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_1_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_1_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_1_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_1_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_1_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_1_value'];
                        break;
                }
                switch ($row['repeated_sieve_2_desc']) //sieve 2 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_2_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_2_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_2_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_2_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_2_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_2_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_2_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_2_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_2_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_2_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_2_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_2_value'];
                        break;
                }
                switch ($row['repeated_sieve_3_desc']) //sieve 3 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_3_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_3_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_3_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_3_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_3_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_3_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_3_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_3_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_3_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_3_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_3_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_3_value'];
                        break;
                }
                switch ($row['repeated_sieve_4_desc']) //sieve 4 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_4_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_4_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_4_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_4_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_4_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_4_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_4_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_4_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_4_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_4_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_4_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_4_value'];
                        break;
                }
                switch ($row['repeated_sieve_5_desc']) //sieve 5 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_5_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_5_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_5_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_5_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_5_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_5_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_5_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_5_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_5_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_5_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_5_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_5_value'];
                        break;
                }
                switch ($row['repeated_sieve_6_desc']) //sieve 6 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_6_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_6_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_6_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_6_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_6_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_6_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_6_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_6_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_6_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_6_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_6_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_6_value'];
                        break;
                }
                switch ($row['repeated_sieve_7_desc']) //sieve 7 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_7_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_7_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_7_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_7_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_7_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_7_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_7_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_7_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_7_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_7_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_7_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_7_value'];
                        break;
                }
                switch ($row['repeated_sieve_8_desc']) //sieve 8 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_8_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_8_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_8_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_8_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_8_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_8_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_8_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_8_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_8_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_8_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_8_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_8_value'];
                        break;
                }
                switch ($row['repeated_sieve_9_desc']) //sieve 9 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_9_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_9_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_9_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_9_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_9_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_9_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_9_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_9_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_9_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_9_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_9_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_9_value'];
                        break;
                }
                switch ($row['repeated_sieve_10_desc']) //sieve 10 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_10_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_10_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_10_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_10_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_10_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_10_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_10_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_10_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_10_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_10_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_10_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_10_value'];
                        break;
                }
                switch ($row['repeated_sieve_11_desc']) //sieve 11 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_11_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_11_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_11_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_11_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_11_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_11_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_11_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_11_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_11_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_11_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_11_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_11_value'];
                        break;
                }
                switch ($row['repeated_sieve_12_desc']) //sieve 12 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_12_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_12_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_12_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_12_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_12_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_12_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_12_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_12_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_12_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_12_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_12_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_12_value'];
                        break;
                }
                switch ($row['repeated_sieve_13_desc']) //sieve 13 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_13_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_13_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_13_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_13_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_13_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_13_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_13_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_13_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_13_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_13_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_13_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_13_value'];
                        break;
                }
                switch ($row['repeated_sieve_14_desc']) //sieve 14 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_14_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_14_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_14_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_14_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_14_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_14_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_14_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_14_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_14_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_14_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_14_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_14_value'];
                        break;
                }
                switch ($row['repeated_sieve_15_desc']) //sieve 15 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_15_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_15_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_15_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_15_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_15_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_15_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_15_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_15_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_15_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_15_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_15_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_15_value'];
                        break;
                }
                switch ($row['repeated_sieve_16_desc']) //sieve 16 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_16_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_16_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_16_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_16_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_16_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_16_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_16_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_16_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_16_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_16_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_16_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_16_value'];
                        break;
                }
                switch ($row['repeated_sieve_17_desc']) //sieve 17 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_17_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_17_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_17_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_17_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_17_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_17_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_17_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_17_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_17_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_17_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_17_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_17_value'];
                        break;
                }
                switch ($row['repeated_sieve_18_desc']) //sieve 18 desc
                {
                    case "30":
                        $repeat30 = $row['repeated_sieve_18_value'];
                        break;
                    case "40":
                        $repeat40 = $row['repeated_sieve_18_value'];
                        break;
                    case "45":
                        $repeat45 = $row['repeated_sieve_18_value'];
                        break;
                    case "50":
                        $repeat50 = $row['repeated_sieve_18_value'];
                        break;
                    case "60":
                        $repeat60 = $row['repeated_sieve_18_value'];
                        break;
                    case "70":
                        $repeat70 = $row['repeated_sieve_18_value'];
                        break;
                    case "80":
                        $repeat80 = $row['repeated_sieve_18_value'];
                        break;
                    case "100":
                        $repeat100 = $row['repeated_sieve_18_value'];
                        break;
                    case "120":
                        $repeat120 = $row['repeated_sieve_18_value'];
                        break;
                    case "140":
                        $repeat140 = $row['repeated_sieve_18_value'];
                        break;
                    case "200":
                        $repeat200 = $row['repeated_sieve_18_value'];
                        break;
                    case "PAN":
                        $repeatPAN = $row['repeated_sieve_18_value'];
                        break;
                }

                //for each screen size, calculate
                //if either the original or the repeated sample is blank, then set the return value as blank
                //else set the return value to the difference
                if(($original30 != 0) && ($repeat30 != 0))
                {
                    $difference30 = abs($original30 - $repeat30);
                }
                else
                {
                    $difference30 = "";
                }
                if(($original40 != 0) && ($repeat40 != 0))
                {
                    $difference40 = abs($original40 - $repeat40);
                }
                else
                {
                    $difference40 = "";
                }
                if(($original45 != 0) && ($repeat45 != 0))
                {
                    $difference45 = abs($original45 - $repeat45);
                }
                else
                {
                    $difference45 = "";
                }
                if(($original50 != 0) && ($repeat50 != 0))
                {
                    $difference50 = abs($original50 - $repeat50);
                }
                else
                {
                    $difference50 = "";
                }
                if(($original60 != 0) && ($repeat60 != 0))
                {
                    $difference60 = abs($original60 - $repeat60);
                }
                else
                {
                    $difference60 = "";
                }
                if(($original70 != 0) && ($repeat70 != 0))
                {
                    $difference70 = abs($original70 - $repeat70);
                }
                else
                {
                    $difference70 = "";
                }
                if(($original80 != 0) && ($repeat80 != 0))
                {
                    $difference80 = abs($original80 - $repeat80);
                }
                else
                {
                    $difference80 = "";
                }
                if(($original100 != 0) && ($repeat100 != 0))
                {
                    $difference100 = abs($original100 - $repeat100);
                }
                else
                {
                    $difference100 = "";
                }
                if(($original120 != 0) && ($repeat120 != 0))
                {
                    $difference120 = abs($original120 - $repeat120);
                }
                else
                {
                    $difference120 = "";
                }
                if(($original140 != 0) && ($repeat140 != 0))
                {
                    $difference140 = abs($original140 - $repeat140);
                }
                else
                {
                    $difference140 = "";
                }
                if(($originalPAN != 0) && ($repeatPAN != 0))
                {
                    $differencePAN = abs($originalPAN - $repeatPAN);
                }
                else
                {
                    $differencePAN = "";
                }

                $arrayOfPairObjects[$resultCount]->vars["difference30"] = $difference30;
                $arrayOfPairObjects[$resultCount]->vars["difference40"] = $difference40;
                $arrayOfPairObjects[$resultCount]->vars["difference45"] = $difference45;
                $arrayOfPairObjects[$resultCount]->vars["difference50"] = $difference50;
                $arrayOfPairObjects[$resultCount]->vars["difference60"] = $difference60;
                $arrayOfPairObjects[$resultCount]->vars["difference70"] = $difference70;
                $arrayOfPairObjects[$resultCount]->vars["difference80"] = $difference80;
                $arrayOfPairObjects[$resultCount]->vars["difference100"] = $difference100;
                $arrayOfPairObjects[$resultCount]->vars["difference120"] = $difference120;
                $arrayOfPairObjects[$resultCount]->vars["difference140"] = $difference140;
                $arrayOfPairObjects[$resultCount]->vars["difference200"] = $difference200;
                $arrayOfPairObjects[$resultCount]->vars["differencePAN"] = $differencePAN;

                //calculate and store the plus70 value
                $originalPlus70 = $row['original_plus_70'];
                $repeatPlus70 = $row['repeated_plus_70'];
                if(($originalPlus70 != 0) && ($repeatPlus70 != 0))
                {
                    $differencePlus70 = abs($originalPlus70 - $repeatPlus70);
                }
                else
                {
                    $differencePlus70 = "";
                }
                $arrayOfPairObjects[$resultCount]->vars["differencePlus70"] = $differencePlus70;

                //increment the counter, for the next item to add to the array
                $resultCount += 1;

            }
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a repeatability sample pairs.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $arrayOfPairObjects;
}


/*******************************************************************************
 * Function Name: getCompletedSamplesInDateRange($argStartDate, $argEndDate)
 * Description:
 * This function will:
 * Accept start and stop dates as parameters.
 * Returns an array of objects containing sample information within the date range.
 * The samples will be determined to be complete based on the finish_dt field.
 * The samples will be sorted based on the dt field.
 *******************************************************************************/
function getCompletedSamplesInDateRange($argStartDate, $argEndDate)
{
    $errorMessage = "qcfunctions.php - getCompletedSamplesInDateRange() ";
    $arrayOfSamples = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM gb_qc_samples WHERE void_status_code != 'V' AND dt >= '" . $argStartDate . "' AND dt <= '" . $argEndDate . "' ORDER BY date ASC"; //direct SQL method
        //$sql = "SELECT * FROM gb_qc_samples WHERE void_status_code != 'V' AND date >= '" . $argStartDate . "' AND date <= '" . $argEndDate . "' ORDER BY date ASC"; //direct SQL method

        $sql = "CALL sp_gb_qc_CompletedSamplesInDateRangeGet('$argStartDate','$argEndDate');";

        $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        //echo "DEBUG: sql from function getCompletedSamplesInDateRange() = " . $sql . "<br/>";

        $outputCount = 0;
        while($row = $result->fetch_assoc())
        {
            if(checkIfSampleIsComplete($row['id']) == 1)
            {
                $arrayOfSamples[$outputCount]->vars["id"] = $row['id']; //sample no
                $arrayOfSamples[$outputCount]->vars["description"] = $row['description'];
                $arrayOfSamples[$outputCount]->vars["repeatabilityId"] = $row['repeatability_id'];
                $arrayOfSamples[$outputCount]->vars["testType"] = $row['test_type_id'];
                $arrayOfSamples[$outputCount]->vars["compositeType"] = $row['composite_type_id'];
                $arrayOfSamples[$outputCount]->vars["sieveMethod"] = $row['sieve_method_id'];
                $arrayOfSamples[$outputCount]->vars["siteId"] = $row['site_id'];
                $arrayOfSamples[$outputCount]->vars["plantId"] = $row['plant_id'];
                $arrayOfSamples[$outputCount]->vars["location"] = $row['location_id'];
                $arrayOfSamples[$outputCount]->vars["specificLocation"] = $row['specific_location_id'];
                $arrayOfSamples[$outputCount]->vars["date"] = $row['date'];
                $arrayOfSamples[$outputCount]->vars["dateShort"] = $row['date_short'];
                $arrayOfSamples[$outputCount]->vars["time"] = $row['time'];
                $arrayOfSamples[$outputCount]->vars["groupTime"] = $row['group_time'];
                $arrayOfSamples[$outputCount]->vars["groupStartDateTime"] = $row['group_start_dt'];
                $arrayOfSamples[$outputCount]->vars["finishDateTime"] = $row['finish_dt'];
                $arrayOfSamples[$outputCount]->vars["durationMinutes"] = $row['duration_minutes'];
                $arrayOfSamples[$outputCount]->vars["duration"] = $row['duration'];
                $arrayOfSamples[$outputCount]->vars["dateTime"] = $row['dt'];
                $arrayOfSamples[$outputCount]->vars["dateTimeShort"] = $row['dt_short'];
                $arrayOfSamples[$outputCount]->vars["shiftDate"] = $row['shift_date'];
                $arrayOfSamples[$outputCount]->vars["shift"] = $row['shift'];
                $arrayOfSamples[$outputCount]->vars["sampler"] = $row['sampler'];
                $arrayOfSamples[$outputCount]->vars["labTech"] = $row['lab_tech'];
                $arrayOfSamples[$outputCount]->vars["operator"] = $row['operator'];
                $arrayOfSamples[$outputCount]->vars["railCarId"] = $row['rail_car_id'];
                $arrayOfSamples[$outputCount]->vars["railCarProductId"] = $row['rail_car_product_id'];
                $arrayOfSamples[$outputCount]->vars["railCarAvailableDateTime"] = $row['rail_car_available_dt'];
                $arrayOfSamples[$outputCount]->vars["startingWeight"] = $row['starting_weight'];
                $arrayOfSamples[$outputCount]->vars["endingWeight"] = $row['ending_weight'];
                $arrayOfSamples[$outputCount]->vars["moisture_rate"] = $row['moisture_rate'];
                $arrayOfSamples[$outputCount]->vars["drillholeNo"] = $row['drillhole_no'];
                $arrayOfSamples[$outputCount]->vars["depthFrom"] = $row['depth_from'];
                $arrayOfSamples[$outputCount]->vars["depthTo"] = $row['depth_to'];
                $arrayOfSamples[$outputCount]->vars["beginningWetWeight"] = $row['beginning_wet_weight'];
                $arrayOfSamples[$outputCount]->vars["preWashDryWeight"] = $row['prewash_dry_weight'];
                $arrayOfSamples[$outputCount]->vars["postWashDryWeight"] = $row['postwash_dry_weight'];
                $arrayOfSamples[$outputCount]->vars["oversizeWeight"] = $row['oversize_weight'];
                $arrayOfSamples[$outputCount]->vars["splitSampleWeight"] = $row['split_sample_weight'];
                $arrayOfSamples[$outputCount]->vars["splitSampleWeightDelta"] = $row['split_sample_weight_delta'];
                $arrayOfSamples[$outputCount]->vars["oversizePercent"] = $row['oversize_percent'];
                $arrayOfSamples[$outputCount]->vars["slimesPercent"] = $row['slimes_percent'];
                $arrayOfSamples[$outputCount]->vars["orePercent"] = $row['ore_percent'];
                $arrayOfSamples[$outputCount]->vars["notes"] = $row['notes'];
                $arrayOfSamples[$outputCount]->vars["reviewNotes"] = $row['review_notes'];
                $arrayOfSamples[$outputCount]->vars["turbidity"] = $row['turbidity'];
                $arrayOfSamples[$outputCount]->vars["containerSlurryWeight"] = $row['container_slurry_weight'];
                $arrayOfSamples[$outputCount]->vars["containerWaterWeight"] = $row['container_water_weight'];
                $arrayOfSamples[$outputCount]->vars["containerEmptyWeight"] = $row['container_empty_weight'];
                $arrayOfSamples[$outputCount]->vars["kValue"] = $row['k_value'];
                $arrayOfSamples[$outputCount]->vars["pan1"] = $row['k_pan_1'];
                $arrayOfSamples[$outputCount]->vars["pan2"] = $row['k_pan_2'];
                $arrayOfSamples[$outputCount]->vars["pan3"] = $row['k_pan_3'];
                $arrayOfSamples[$outputCount]->vars["kPercentFines"] = $row['k_percent_fines'];
                $arrayOfSamples[$outputCount]->vars["kValueFail"] = $row['k_value_fail'];
                $arrayOfSamples[$outputCount]->vars["pan1Fail"] = $row['k_pan_1_fail'];
                $arrayOfSamples[$outputCount]->vars["pan2Fail"] = $row['k_pan_2_fail'];
                $arrayOfSamples[$outputCount]->vars["pan3Fail"] = $row['k_pan_3_fail'];
                $arrayOfSamples[$outputCount]->vars["kPercentFinesFail"] = $row['k_percent_fines_fail'];
                $arrayOfSamples[$outputCount]->vars["roundness"] = $row['roundness'];
                $arrayOfSamples[$outputCount]->vars["sphericity"] = $row['sphericity'];
                $arrayOfSamples[$outputCount]->vars["sieve1Desc"] = $row['sieve_1_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve1Value"] = $row['sieve_1_value'];
                $arrayOfSamples[$outputCount]->vars["sieve1ValueCumulative"] = $row['sieve_1_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve1ValueCumulativePassing"] = $row['sieve_1_value_cumulative_passing'];
                $arrayOfSamples[$outputCount]->vars["sieve2Desc"] = $row['sieve_2_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve2Value"] = $row['sieve_2_value'];
                $arrayOfSamples[$outputCount]->vars["sieve2ValueCumulative"] = $row['sieve_2_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve2ValueCumulativePassing"] = $row['sieve_2_value_cumulative_passing'];
                $arrayOfSamples[$outputCount]->vars["sieve3Desc"] = $row['sieve_3_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve3Value"] = $row['sieve_3_value'];
                $arrayOfSamples[$outputCount]->vars["sieve3ValueCumulative"] = $row['sieve_3_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve3ValueCumulativePassing"] = $row['sieve_3_value_cumulative_passing'];
                $arrayOfSamples[$outputCount]->vars["sieve4Desc"] = $row['sieve_4_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve4Value"] = $row['sieve_4_value'];
                $arrayOfSamples[$outputCount]->vars["sieve4ValueCumulative"] = $row['sieve_4_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve4ValueCumulativePassing"] = $row['sieve_4_value_cumulative_passing'];
                $arrayOfSamples[$outputCount]->vars["sieve5Desc"] = $row['sieve_5_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve5Value"] = $row['sieve_5_value'];
                $arrayOfSamples[$outputCount]->vars["sieve5ValueCumulative"] = $row['sieve_5_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve5ValueCumulativePassing"] = $row['sieve_5_value_cumulative_passing'];
                $arrayOfSamples[$outputCount]->vars["sieve6Desc"] = $row['sieve_6_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve6Value"] = $row['sieve_6_value'];
                $arrayOfSamples[$outputCount]->vars["sieve6ValueCumulative"] = $row['sieve_6_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve6ValueCumulativePassing"] = $row['sieve_6_value_cumulative_passing'];
                $arrayOfSamples[$outputCount]->vars["sieve7Desc"] = $row['sieve_7_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve7Value"] = $row['sieve_7_value'];
                $arrayOfSamples[$outputCount]->vars["sieve7ValueCumulative"] = $row['sieve_7_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve7ValueCumulativePassing"] = $row['sieve_7_value_cumulative_passing'];
                $arrayOfSamples[$outputCount]->vars["sieve8Desc"] = $row['sieve_8_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve8Value"] = $row['sieve_8_value'];
                $arrayOfSamples[$outputCount]->vars["sieve8ValueCumulative"] = $row['sieve_8_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve8ValueCumulativePassing"] = $row['sieve_8_value_cumulative_passing'];
                $arrayOfSamples[$outputCount]->vars["sieve9Desc"] = $row['sieve_9_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve9Value"] = $row['sieve_9_value'];
                $arrayOfSamples[$outputCount]->vars["sieve9ValueCumulative"] = $row['sieve_9_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve9ValueCumulativePassing"] = $row['sieve_9_value_cumulative_passing'];
                $arrayOfSamples[$outputCount]->vars["sieve10Desc"] = $row['sieve_10_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve10Value"] = $row['sieve_10_value'];
                $arrayOfSamples[$outputCount]->vars["sieve10ValueCumulative"] = $row['sieve_10_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve10ValueCumulativePassing"] = $row['sieve_10_value_cumulative_passing'];
                $arrayOfSamples[$outputCount]->vars["sievesTotal"] = $row['sieves_total'];
                $arrayOfSamples[$outputCount]->vars["startWeightsRaw"] = $row['start_weights_raw'];
                $arrayOfSamples[$outputCount]->vars["endWeightsRaw"] = $row['end_weights_raw'];
                $arrayOfSamples[$outputCount]->vars["sieves_raw"] = $row['sieves_raw'];
                $arrayOfSamples[$outputCount]->vars["feedRowNo"] = $row['feed_row_no'];
                $arrayOfSamples[$outputCount]->vars["plus70"] = $row['plus_70'];
                $arrayOfSamples[$outputCount]->vars["plus50"] = $row['plus_50'];
                $arrayOfSamples[$outputCount]->vars["plus40"] = $row['plus_40'];
                $arrayOfSamples[$outputCount]->vars["neg50Plus140"] = $row['minus_50_plus_140'];
                $arrayOfSamples[$outputCount]->vars["neg40Plus70"] = $row['minus_40_plus_70'];
                $arrayOfSamples[$outputCount]->vars["neg70"] = $row['minus_70'];
                $arrayOfSamples[$outputCount]->vars["neg70Plus140"] = $row['minus_70_plus_140'];
                $arrayOfSamples[$outputCount]->vars["neg60Plus70"] = $row['minus_60_plus_70'];
                $arrayOfSamples[$outputCount]->vars["neg140Plus325"] = $row['minus_140_plus_325'];
                $arrayOfSamples[$outputCount]->vars["plus140"] = $row['plus_140'];
                $arrayOfSamples[$outputCount]->vars["neg140"] = $row['minus_140'];
                $arrayOfSamples[$outputCount]->vars["nearSize"] = $row['near_size'];
                $arrayOfSamples[$outputCount]->vars["cutRatio"] = $row['cut_ratio'];
                $arrayOfSamples[$outputCount]->vars["wpMoistureRatio"] = $row['wp_moisture_rate'];
                $arrayOfSamples[$outputCount]->vars["percentSolids"] = $row['percent_solids'];
                $arrayOfSamples[$outputCount]->vars["stph"] = $row['stph'];
                $arrayOfSamples[$outputCount]->vars["tonsRepresented"] = $row['tons_represented'];
                $arrayOfSamples[$outputCount]->vars["tphRepresented"] = $row['tph_represented'];
                $arrayOfSamples[$outputCount]->vars["recoveryPlusSeventy"] = $row['recovery_plus_70'];
                $arrayOfSamples[$outputCount]->vars["recoveryPlusOneForty"] = $row['recovery_plus_140'];
                $arrayOfSamples[$outputCount]->vars["isRemoved"] = $row['is_removed'];
                $arrayOfSamples[$outputCount]->vars["voidStatusCode"] = $row['void_status_code'];
                $arrayOfSamples[$outputCount]->vars["createDateTime"] = $row['create_dt'];
                $arrayOfSamples[$outputCount]->vars["createUserId"] = $row['create_user_id'];
                $arrayOfSamples[$outputCount]->vars["editDateTime"] = $row['edit_dt'];
                $arrayOfSamples[$outputCount]->vars["editUserId"] = $row['edit_user_id'];

                $arrayOfSamples[$outputCount]->vars["sieve11Desc"] = $row['sieve_11_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve11Value"] = $row['sieve_11_value'];
                $arrayOfSamples[$outputCount]->vars["sieve11ValueCumulative"] = $row['sieve_11_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve11ValueCumulativePassing"] = $row['sieve_11_value_cumulative_passing'];

                $arrayOfSamples[$outputCount]->vars["sieve12Desc"] = $row['sieve_12_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve12Value"] = $row['sieve_12_value'];
                $arrayOfSamples[$outputCount]->vars["sieve12ValueCumulative"] = $row['sieve_12_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve12ValueCumulativePassing"] = $row['sieve_12_value_cumulative_passing'];

                $arrayOfSamples[$outputCount]->vars["sieve13Desc"] = $row['sieve_13_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve13Value"] = $row['sieve_13_value'];
                $arrayOfSamples[$outputCount]->vars["sieve13ValueCumulative"] = $row['sieve_13_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve13ValueCumulativePassing"] = $row['sieve_13_value_cumulative_passing'];

                $arrayOfSamples[$outputCount]->vars["sieve14Desc"] = $row['sieve_14_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve14Value"] = $row['sieve_14_value'];
                $arrayOfSamples[$outputCount]->vars["sieve14ValueCumulative"] = $row['sieve_14_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve14ValueCumulativePassing"] = $row['sieve_14_value_cumulative_passing'];

                $arrayOfSamples[$outputCount]->vars["sieve15Desc"] = $row['sieve_15_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve15Value"] = $row['sieve_15_value'];
                $arrayOfSamples[$outputCount]->vars["sieve15ValueCumulative"] = $row['sieve_15_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve15ValueCumulativePassing"] = $row['sieve_15_value_cumulative_passing'];

                $arrayOfSamples[$outputCount]->vars["sieve16Desc"] = $row['sieve_16_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve16Value"] = $row['sieve_16_value'];
                $arrayOfSamples[$outputCount]->vars["sieve16ValueCumulative"] = $row['sieve_16_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve16ValueCumulativePassing"] = $row['sieve_16_value_cumulative_passing'];

                $arrayOfSamples[$outputCount]->vars["sieve17Desc"] = $row['sieve_17_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve17Value"] = $row['sieve_17_value'];
                $arrayOfSamples[$outputCount]->vars["sieve17ValueCumulative"] = $row['sieve_17_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve17ValueCumulativePassing"] = $row['sieve_17_value_cumulative_passing'];

                $arrayOfSamples[$outputCount]->vars["sieve18Desc"] = $row['sieve_18_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve18Value"] = $row['sieve_18_value'];
                $arrayOfSamples[$outputCount]->vars["sieve18ValueCumulative"] = $row['sieve_18_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve18ValueCumulativePassing"] = $row['sieve_18_value_cumulative_passing'];

                $outputCount++;

            }
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a list of samples.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $arrayOfSamples;
}


/*******************************************************************************
 * Function Name: getCompletedSamplesInDateRangeByLabTech($argStartDate, $argEndDate, $argLabTech)
 * Description:
 * This function will:
 * Accept a start date, a stop date, and a lab tech as parameters.
 * Returns an array of objects containing sample information within the parameters.
 * The samples will be determined to be complete based on the finish_dt field.
 * The samples will be sorted based on the dt field.
 *******************************************************************************/
function getCompletedSamplesInDateRangeByLabTech($argStartDate, $argEndDate, $argLabTech)
{
    $errorMessage = "qcfunctions.php - getCompletedSamplesInDateRangeByLabTech() ";
    $arrayOfSamples = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM gb_qc_samples WHERE lab_tech = '" . $argLabTech . "' AND void_status_code != 'V' AND date >= '" . $argStartDate . "' AND date <= '" . $argEndDate . "' ORDER BY date ASC"; //direct SQL method
        $sql = "CALL sp_gb_qc_CompletedSamplesInDateRangeGetByLabTech('$argLabTech','$argStartDate','$argEndDate')";

        $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        //echo "DEBUG: sql from function getCompletedSamplesInDateRangeByLabTech() = " . $sql . "<br/>";

        $outputCount = 0;
        while($row = $result->fetch_assoc())
        {
            if(checkIfSampleIsComplete($row['id']) == 1)
            {
                $arrayOfSamples[$outputCount]->vars["id"] = $row['id']; //sample no
                $arrayOfSamples[$outputCount]->vars["description"] = $row['description'];
                $arrayOfSamples[$outputCount]->vars["repeatabilityId"] = $row['repeatability_id'];
                $arrayOfSamples[$outputCount]->vars["testType"] = $row['test_type_id'];
                $arrayOfSamples[$outputCount]->vars["compositeType"] = $row['composite_type_id'];
                $arrayOfSamples[$outputCount]->vars["sieveMethod"] = $row['sieve_method_id'];
                $arrayOfSamples[$outputCount]->vars["siteId"] = $row['site_id'];
                $arrayOfSamples[$outputCount]->vars["plantId"] = $row['plant_id'];
                $arrayOfSamples[$outputCount]->vars["location"] = $row['location_id'];
                $arrayOfSamples[$outputCount]->vars["specificLocation"] = $row['specific_location_id'];
                $arrayOfSamples[$outputCount]->vars["date"] = $row['date'];
                $arrayOfSamples[$outputCount]->vars["dateShort"] = $row['date_short'];
                $arrayOfSamples[$outputCount]->vars["time"] = $row['time'];
                $arrayOfSamples[$outputCount]->vars["groupTime"] = $row['group_time'];
                $arrayOfSamples[$outputCount]->vars["groupStartDateTime"] = $row['group_start_dt'];
                $arrayOfSamples[$outputCount]->vars["finishDateTime"] = $row['finish_dt'];
                $arrayOfSamples[$outputCount]->vars["durationMinutes"] = $row['duration_minutes'];
                $arrayOfSamples[$outputCount]->vars["duration"] = $row['duration'];
                $arrayOfSamples[$outputCount]->vars["dateTime"] = $row['dt'];
                $arrayOfSamples[$outputCount]->vars["dateTimeShort"] = $row['dt_short'];
                $arrayOfSamples[$outputCount]->vars["shiftDate"] = $row['shift_date'];
                $arrayOfSamples[$outputCount]->vars["shift"] = $row['shift'];
                $arrayOfSamples[$outputCount]->vars["sampler"] = $row['sampler'];
                $arrayOfSamples[$outputCount]->vars["labTech"] = $row['lab_tech'];
                $arrayOfSamples[$outputCount]->vars["operator"] = $row['operator'];
                $arrayOfSamples[$outputCount]->vars["railCarId"] = $row['rail_car_id'];
                $arrayOfSamples[$outputCount]->vars["railCarProductId"] = $row['rail_car_product_id'];
                $arrayOfSamples[$outputCount]->vars["railCarAvailableDateTime"] = $row['rail_car_available_dt'];
                $arrayOfSamples[$outputCount]->vars["startingWeight"] = $row['starting_weight'];
                $arrayOfSamples[$outputCount]->vars["endingWeight"] = $row['ending_weight'];
                $arrayOfSamples[$outputCount]->vars["moisture_rate"] = $row['moisture_rate'];
                $arrayOfSamples[$outputCount]->vars["drillholeNo"] = $row['drillhole_no'];
                $arrayOfSamples[$outputCount]->vars["depthFrom"] = $row['depth_from'];
                $arrayOfSamples[$outputCount]->vars["depthTo"] = $row['depth_to'];
                $arrayOfSamples[$outputCount]->vars["beginningWetWeight"] = $row['beginning_wet_weight'];
                $arrayOfSamples[$outputCount]->vars["preWashDryWeight"] = $row['prewash_dry_weight'];
                $arrayOfSamples[$outputCount]->vars["postWashDryWeight"] = $row['postwash_dry_weight'];
                $arrayOfSamples[$outputCount]->vars["oversizeWeight"] = $row['oversize_weight'];
                $arrayOfSamples[$outputCount]->vars["splitSampleWeight"] = $row['split_sample_weight'];
                $arrayOfSamples[$outputCount]->vars["splitSampleWeightDelta"] = $row['split_sample_weight_delta'];
                $arrayOfSamples[$outputCount]->vars["oversizePercent"] = $row['oversize_percent'];
                $arrayOfSamples[$outputCount]->vars["slimesPercent"] = $row['slimes_percent'];
                $arrayOfSamples[$outputCount]->vars["orePercent"] = $row['ore_percent'];
                $arrayOfSamples[$outputCount]->vars["notes"] = $row['notes'];
                $arrayOfSamples[$outputCount]->vars["reviewNotes"] = $row['review_notes'];
                $arrayOfSamples[$outputCount]->vars["turbidity"] = $row['turbidity'];
                $arrayOfSamples[$outputCount]->vars["containerSlurryWeight"] = $row['container_slurry_weight'];
                $arrayOfSamples[$outputCount]->vars["containerWaterWeight"] = $row['container_water_weight'];
                $arrayOfSamples[$outputCount]->vars["containerEmptyWeight"] = $row['container_empty_weight'];
                $arrayOfSamples[$outputCount]->vars["kValue"] = $row['k_value'];
                $arrayOfSamples[$outputCount]->vars["pan1"] = $row['k_pan_1'];
                $arrayOfSamples[$outputCount]->vars["pan2"] = $row['k_pan_2'];
                $arrayOfSamples[$outputCount]->vars["pan3"] = $row['k_pan_3'];
                $arrayOfSamples[$outputCount]->vars["kPercentFines"] = $row['k_percent_fines'];
                $arrayOfSamples[$outputCount]->vars["kValueFail"] = $row['k_value_fail'];
                $arrayOfSamples[$outputCount]->vars["pan1Fail"] = $row['k_pan_1_fail'];
                $arrayOfSamples[$outputCount]->vars["pan2Fail"] = $row['k_pan_2_fail'];
                $arrayOfSamples[$outputCount]->vars["pan3Fail"] = $row['k_pan_3_fail'];
                $arrayOfSamples[$outputCount]->vars["kPercentFinesFail"] = $row['k_percent_fines_fail'];
                $arrayOfSamples[$outputCount]->vars["roundness"] = $row['roundness'];
                $arrayOfSamples[$outputCount]->vars["sphericity"] = $row['sphericity'];
                $arrayOfSamples[$outputCount]->vars["sieve1Desc"] = $row['sieve_1_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve1Value"] = $row['sieve_1_value'];
                $arrayOfSamples[$outputCount]->vars["sieve1ValueCumulative"] = $row['sieve_1_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve1ValueCumulativePassing"] = $row['sieve_1_value_cumulative_passing'];
                $arrayOfSamples[$outputCount]->vars["sieve2Desc"] = $row['sieve_2_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve2Value"] = $row['sieve_2_value'];
                $arrayOfSamples[$outputCount]->vars["sieve2ValueCumulative"] = $row['sieve_2_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve2ValueCumulativePassing"] = $row['sieve_2_value_cumulative_passing'];
                $arrayOfSamples[$outputCount]->vars["sieve3Desc"] = $row['sieve_3_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve3Value"] = $row['sieve_3_value'];
                $arrayOfSamples[$outputCount]->vars["sieve3ValueCumulative"] = $row['sieve_3_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve3ValueCumulativePassing"] = $row['sieve_3_value_cumulative_passing'];
                $arrayOfSamples[$outputCount]->vars["sieve4Desc"] = $row['sieve_4_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve4Value"] = $row['sieve_4_value'];
                $arrayOfSamples[$outputCount]->vars["sieve4ValueCumulative"] = $row['sieve_4_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve4ValueCumulativePassing"] = $row['sieve_4_value_cumulative_passing'];
                $arrayOfSamples[$outputCount]->vars["sieve5Desc"] = $row['sieve_5_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve5Value"] = $row['sieve_5_value'];
                $arrayOfSamples[$outputCount]->vars["sieve5ValueCumulative"] = $row['sieve_5_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve5ValueCumulativePassing"] = $row['sieve_5_value_cumulative_passing'];
                $arrayOfSamples[$outputCount]->vars["sieve6Desc"] = $row['sieve_6_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve6Value"] = $row['sieve_6_value'];
                $arrayOfSamples[$outputCount]->vars["sieve6ValueCumulative"] = $row['sieve_6_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve6ValueCumulativePassing"] = $row['sieve_6_value_cumulative_passing'];
                $arrayOfSamples[$outputCount]->vars["sieve7Desc"] = $row['sieve_7_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve7Value"] = $row['sieve_7_value'];
                $arrayOfSamples[$outputCount]->vars["sieve7ValueCumulative"] = $row['sieve_7_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve7ValueCumulativePassing"] = $row['sieve_7_value_cumulative_passing'];
                $arrayOfSamples[$outputCount]->vars["sieve8Desc"] = $row['sieve_8_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve8Value"] = $row['sieve_8_value'];
                $arrayOfSamples[$outputCount]->vars["sieve8ValueCumulative"] = $row['sieve_8_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve8ValueCumulativePassing"] = $row['sieve_8_value_cumulative_passing'];
                $arrayOfSamples[$outputCount]->vars["sieve9Desc"] = $row['sieve_9_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve9Value"] = $row['sieve_9_value'];
                $arrayOfSamples[$outputCount]->vars["sieve9ValueCumulative"] = $row['sieve_9_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve9ValueCumulativePassing"] = $row['sieve_9_value_cumulative_passing'];
                $arrayOfSamples[$outputCount]->vars["sieve10Desc"] = $row['sieve_10_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve10Value"] = $row['sieve_10_value'];
                $arrayOfSamples[$outputCount]->vars["sieve10ValueCumulative"] = $row['sieve_10_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve10ValueCumulativePassing"] = $row['sieve_10_value_cumulative_passing'];
                $arrayOfSamples[$outputCount]->vars["sievesTotal"] = $row['sieves_total'];
                $arrayOfSamples[$outputCount]->vars["startWeightsRaw"] = $row['start_weights_raw'];
                $arrayOfSamples[$outputCount]->vars["endWeightsRaw"] = $row['end_weights_raw'];
                $arrayOfSamples[$outputCount]->vars["sieves_raw"] = $row['sieves_raw'];
                $arrayOfSamples[$outputCount]->vars["feedRowNo"] = $row['feed_row_no'];
                $arrayOfSamples[$outputCount]->vars["plus70"] = $row['plus_70'];
                $arrayOfSamples[$outputCount]->vars["plus50"] = $row['plus_50'];
                $arrayOfSamples[$outputCount]->vars["plus40"] = $row['plus_40'];
                $arrayOfSamples[$outputCount]->vars["neg50Plus140"] = $row['minus_50_plus_140'];
                $arrayOfSamples[$outputCount]->vars["neg40Plus70"] = $row['minus_40_plus_70'];
                $arrayOfSamples[$outputCount]->vars["neg70"] = $row['minus_70'];
                $arrayOfSamples[$outputCount]->vars["neg70Plus140"] = $row['minus_70_plus_140'];
                $arrayOfSamples[$outputCount]->vars["neg60Plus70"] = $row['minus_60_plus_70'];
                $arrayOfSamples[$outputCount]->vars["neg140Plus325"] = $row['minus_140_plus_325'];
                $arrayOfSamples[$outputCount]->vars["plus140"] = $row['plus_140'];
                $arrayOfSamples[$outputCount]->vars["neg140"] = $row['minus_140'];
                $arrayOfSamples[$outputCount]->vars["nearSize"] = $row['near_size'];
                $arrayOfSamples[$outputCount]->vars["cutRatio"] = $row['cut_ratio'];
                $arrayOfSamples[$outputCount]->vars["wpMoistureRatio"] = $row['wp_moisture_rate'];
                $arrayOfSamples[$outputCount]->vars["percentSolids"] = $row['percent_solids'];
                $arrayOfSamples[$outputCount]->vars["stph"] = $row['stph'];
                $arrayOfSamples[$outputCount]->vars["tonsRepresented"] = $row['tons_represented'];
                $arrayOfSamples[$outputCount]->vars["tphRepresented"] = $row['tph_represented'];
                $arrayOfSamples[$outputCount]->vars["recoveryPlusSeventy"] = $row['recovery_plus_70'];
                $arrayOfSamples[$outputCount]->vars["recoveryPlusOneForty"] = $row['recovery_plus_140'];
                $arrayOfSamples[$outputCount]->vars["isRemoved"] = $row['is_removed'];
                $arrayOfSamples[$outputCount]->vars["voidStatusCode"] = $row['void_status_code'];
                $arrayOfSamples[$outputCount]->vars["createDateTime"] = $row['create_dt'];
                $arrayOfSamples[$outputCount]->vars["createUserId"] = $row['create_user_id'];
                $arrayOfSamples[$outputCount]->vars["editDateTime"] = $row['edit_dt'];
                $arrayOfSamples[$outputCount]->vars["editUserId"] = $row['edit_user_id'];

                $arrayOfSamples[$outputCount]->vars["sieve11Desc"] = $row['sieve_11_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve11Value"] = $row['sieve_11_value'];
                $arrayOfSamples[$outputCount]->vars["sieve11ValueCumulative"] = $row['sieve_11_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve11ValueCumulativePassing"] = $row['sieve_11_value_cumulative_passing'];

                $arrayOfSamples[$outputCount]->vars["sieve12Desc"] = $row['sieve_12_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve12Value"] = $row['sieve_12_value'];
                $arrayOfSamples[$outputCount]->vars["sieve12ValueCumulative"] = $row['sieve_12_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve12ValueCumulativePassing"] = $row['sieve_12_value_cumulative_passing'];

                $arrayOfSamples[$outputCount]->vars["sieve13Desc"] = $row['sieve_13_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve13Value"] = $row['sieve_13_value'];
                $arrayOfSamples[$outputCount]->vars["sieve13ValueCumulative"] = $row['sieve_13_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve13ValueCumulativePassing"] = $row['sieve_13_value_cumulative_passing'];

                $arrayOfSamples[$outputCount]->vars["sieve14Desc"] = $row['sieve_14_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve14Value"] = $row['sieve_14_value'];
                $arrayOfSamples[$outputCount]->vars["sieve14ValueCumulative"] = $row['sieve_14_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve14ValueCumulativePassing"] = $row['sieve_14_value_cumulative_passing'];

                $arrayOfSamples[$outputCount]->vars["sieve15Desc"] = $row['sieve_15_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve15Value"] = $row['sieve_15_value'];
                $arrayOfSamples[$outputCount]->vars["sieve15ValueCumulative"] = $row['sieve_15_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve15ValueCumulativePassing"] = $row['sieve_15_value_cumulative_passing'];

                $arrayOfSamples[$outputCount]->vars["sieve16Desc"] = $row['sieve_16_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve16Value"] = $row['sieve_16_value'];
                $arrayOfSamples[$outputCount]->vars["sieve16ValueCumulative"] = $row['sieve_16_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve16ValueCumulativePassing"] = $row['sieve_16_value_cumulative_passing'];

                $arrayOfSamples[$outputCount]->vars["sieve17Desc"] = $row['sieve_17_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve17Value"] = $row['sieve_17_value'];
                $arrayOfSamples[$outputCount]->vars["sieve17ValueCumulative"] = $row['sieve_17_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve17ValueCumulativePassing"] = $row['sieve_17_value_cumulative_passing'];

                $arrayOfSamples[$outputCount]->vars["sieve18Desc"] = $row['sieve_18_desc'];
                $arrayOfSamples[$outputCount]->vars["sieve18Value"] = $row['sieve_18_value'];
                $arrayOfSamples[$outputCount]->vars["sieve18ValueCumulative"] = $row['sieve_18_value_cumulative'];
                $arrayOfSamples[$outputCount]->vars["sieve18ValueCumulativePassing"] = $row['sieve_18_value_cumulative_passing'];

                $outputCount++;

            }
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a list of samples.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $arrayOfSamples;
}


/*******************************************************************************
 * Function Name: getPLCTags()
 * Description:
 * This function will:
 * Returns an array of objects containing all PLC tag information.
 *******************************************************************************/
function getPLCTags()
{
    $errorMessage = "qcfunctions.php - getPLCTags() ";
    $PLCArray = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM prod_auto_plant_analog_tags WHERE is_mir = 1 AND is_hidden = 0 AND is_removed = 0"; //direct SQL method
        $sql = "CALL sp_gb_qc_PLCTagsGet();";

        $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        $outputCount = 0;
        while($row = $result->fetch_assoc())
        {
            $PLCArray[$outputCount]->vars["id"] = $row['id'];
            $PLCArray[$outputCount]->vars["device"] = $row['device'];
            $PLCArray[$outputCount]->vars["classification"] = $row['classification'];
            $PLCArray[$outputCount]->vars["tag"] = $row['tag'];
            $PLCArray[$outputCount]->vars["tag_plc"] = $row['tag_plc'];
            $PLCArray[$outputCount]->vars["units"] = $row['units'];
            $PLCArray[$outputCount]->vars["plant_id"] = $row['plant_id'];
            $PLCArray[$outputCount]->vars["is_mir"] = $row['is_mir'];
            $PLCArray[$outputCount]->vars["is_kpi"] = $row['is_kpi'];
            $PLCArray[$outputCount]->vars["is_hidden"] = $row['is_hidden'];
            $PLCArray[$outputCount]->vars["is_removed"] = $row['is_removed'];

            $outputCount++;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a list of PLC tags.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            $error = $e->getMessage();
            echo $error;
        }
    }

    return $PLCArray;
}


/*******************************************************************************
 * Function Name: getPLCTagsByPlantID($plantID)
 * Description:
 * This function will:
 * Take a Plant ID number as a parameter
 * Returns an array of objects containing PLC tag information.
 *******************************************************************************/
function getPLCTagsByPlantID($plantID)
{
    $errorMessage = "qcfunctions.php - getPLCTagsByPlantID() ";
    $PLCArray = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM prod_auto_plant_analog_tags WHERE is_mir = 1 AND is_hidden = 0 AND is_removed = 0 AND plant_id = " . $plantID; //direct SQL method
        $sql = "CALL sp_gb_qc_PLCTagsGetByPlantID($plantID);";

        $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        $outputCount = 0;
        while($row = $result->fetch_assoc())
        {
            $PLCArray[$outputCount]->vars["id"] = $row['id'];
            $PLCArray[$outputCount]->vars["device"] = $row['device'];
            $PLCArray[$outputCount]->vars["classification"] = $row['classification'];
            $PLCArray[$outputCount]->vars["tag"] = $row['tag'];
            $PLCArray[$outputCount]->vars["tag_plc"] = $row['tag_plc'];
            $PLCArray[$outputCount]->vars["units"] = $row['units'];
            $PLCArray[$outputCount]->vars["plant_id"] = $row['plant_id'];
            $PLCArray[$outputCount]->vars["is_mir"] = $row['is_mir'];
            $PLCArray[$outputCount]->vars["is_kpi"] = $row['is_kpi'];
            $PLCArray[$outputCount]->vars["is_hidden"] = $row['is_hidden'];
            $PLCArray[$outputCount]->vars["is_removed"] = $row['is_removed'];

            $outputCount++;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a list of PLC tags.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            $error = $e->getMessage();
            echo $error;
        }
    }

    return $PLCArray;
}


/*******************************************************************************
 * Function Name: getKPIPLCTagsByPlantID($plantID)
 * Description:
 * This function will:
 * Take a Plant ID number as a parameter
 * Returns an array of objects containing PLC tag information.
 *******************************************************************************/
function getKPIPLCTagsByPlantID($plantID)
{
    $errorMessage = "qcfunctions.php - getKPIPLCTagsByPlantID() ";
    $PLCArray = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM prod_auto_plant_analog_tags WHERE is_kpi = 1 AND is_mir = 1 AND is_hidden = 0 AND is_removed = 0 AND plant_id = " . $plantID; //direct SQL method
        $sql = "CALL sp_gb_qc_KPIPLCTagsGetByPlantID('$plantID');";

        $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        $outputCount = 0;
        while($row = $result->fetch_assoc())
        {
            $PLCArray[$outputCount]->vars["id"] = $row['id'];
            $PLCArray[$outputCount]->vars["device"] = $row['device'];
            $PLCArray[$outputCount]->vars["classification"] = $row['classification'];
            $PLCArray[$outputCount]->vars["tag"] = $row['tag'];
            $PLCArray[$outputCount]->vars["tag_plc"] = $row['tag_plc'];
            $PLCArray[$outputCount]->vars["units"] = $row['units'];
            $PLCArray[$outputCount]->vars["plant_id"] = $row['plant_id'];
            $PLCArray[$outputCount]->vars["is_mir"] = $row['is_mir'];
            $PLCArray[$outputCount]->vars["is_kpi"] = $row['is_kpi'];
            $PLCArray[$outputCount]->vars["is_hidden"] = $row['is_hidden'];
            $PLCArray[$outputCount]->vars["is_removed"] = $row['is_removed'];

            $outputCount++;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a list of PLC tags.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            $error = $e->getMessage();
            echo $error;
        }
    }

    return $PLCArray;
}


/*******************************************************************************
 * Function Name: getPlantSettingsDataByTagAndSampleId($tagID)
 * Description:
 * This function will:
 * Take a Tag ID number as a parameter
 * Returns an array of objects containing PLC data information.
 *******************************************************************************/
function getPlantSettingsDataByTagAndSampleId($tagID, $sampleID)
{
    $errorMessage = "qcfunctions.php - getPlantSettingsDataByAndSampleTagId() ";
    $plcDataObject = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //get the values recorded
        //$sql = "SELECT prod_plant_mir_data.id, prod_plant_mir_data.sample_id, prod_plant_mir_data.tag_id, prod_plant_mir_data.value, prod_auto_plant_analog_tags.device FROM prod_plant_mir_data LEFT JOIN prod_auto_plant_analog_tags ON prod_plant_mir_data.tag_id = prod_auto_plant_analog_tags.id WHERE prod_plant_mir_data.sample_id = " . $sampleID . " AND prod_plant_mir_data.tag_id = " . $tagID . " LIMIT 1";
        $sql = "CALL sp_gb_qc_PlantSettingsDataByTagAndSampleIDGet('$sampleID','$tagID');";

        $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        //echo "DEBUG: sql = " . $sql . "<br/>";

        while($row = $result->fetch_assoc())
        {
            $plcDataObject->vars["id"] = $row['id'];
            $plcDataObject->vars["sample_id"] = $row['sample_id'];
            $plcDataObject->vars["tag_id"] = $row['tag_id'];
            $plcDataObject->vars["value"] = $row['value'];
            $plcDataObject->vars["device"] = $row['device'];
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for PLC data.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            $error = $e->getMessage();
            echo $error;
        }
    }

    return $plcDataObject;
}


/*******************************************************************************
 * Function Name: insertPlantSettingsRecord()
 * Description:
 * This function will:
 * Take numerous values as parameters.
 * Create a record in the database table prod_plant_mir_data.
 * Return a value to confirm success.
 *******************************************************************************/
function insertPlantSettingsRecord($argSampleId, $argTagId, $argValue)
{
    $result = 1;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "INSERT INTO prod_plant_mir_data (sample_id, tag_id, value) VALUES (" . $argSampleId . ", " . $argTagId . ", '" . $argValue . "')"; //direct SQL method
        $sql = "CALL sp_gb_qc_PlantSettingsRecordInsert('$argSampleId','$argTagId','$argValue');";

        //echo "sql = " . $sql . "<br/>";

        //direct SQL method to check status
        if ($mySQLConnectionLocal->query($sql) === TRUE)
        {
            $returnValue = mysqli_insert_id($mySQLConnectionLocal);
        }
        else
        {
            $errorMessage = $errorMessage . "Error inserting Plant Settings data into MySQL. ";
            $errorMessage = $errorMessage . "The SQL command was: " . $sql;
            //echo "DEBUG: " . $errorMessage;
            sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
            if($debugging == 1)
            {
                echo $errorMessage;
                echo "Error: " . $sql . "<br>" . $mySQLConnectionLocal->error;
            }
            $result = 0;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error inserting Plant Settings data into MySQL.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            $error = $e->getMessage();
            echo $error;
        }
        $result = 0;
    }

    return $returnValue;
}


/*******************************************************************************
 * Function Name: updatePlantSettingsRecord($recordID, $plcValue)
 * Description:
 * This function will:
 * Accept a record ID.
 * Accept a new value for the database.
 * Update the repeatability value in the database to the new value.
 *******************************************************************************/
function updatePlantSettingsRecord($recordID, $plcValue)
{
    $errorMessage = "qcfunctions.php - updatePlantSettingsRecord() ";

    $returnValue = 0; //a value to tell us if the process was successful.

    try
    {

        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //direct SQL method
        //$sql = "UPDATE prod_plant_mir_data SET `value` = $plcValue WHERE `id` = '" . $recordID . "';";
        $sql = "CALL sp_gb_qc_PlantSettingsRecordUpdate('$plcValue','$recordID');";

        //echo "sql = " . $sql;

        //direct SQL method
        if ($mySQLConnectionLocal->query($sql) === TRUE)
        {
            //echo "Record updated successfully<br/>";
            $returnValue = 1;
        }
        else
        {
            echo "Error updating plant setting record: " . $mySQLConnectionLocal->error . "<br/>";
            $returnValue = 0;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error updating plant setting record.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            $error = $e->getMessage();
            echo $error;
        }
    }

    return $returnValue;
}


/*******************************************************************************
 * Function Name: getPlantsBySite($siteID)
 * Description:
 * This function will:
 * Take a Site ID number as a parameter
 * Returns an array of objects containing Plant information.
 *******************************************************************************/
function getPlantsBySite($siteID)
{
    $errorMessage = "qcfunctions.php - getPlantsBySite() ";
    $plantArray = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM main_plants WHERE is_active = 1 AND main_site_id = " . $siteID . " ORDER BY sort_order ASC"; //direct SQL method
        $sql = "CALL sp_gb_qc_PlantsGetBySite($siteID)";

        $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        $outputCount = 0;
        while($row = $result->fetch_assoc())
        {
            $plantArray[$outputCount]->vars["id"] = $row['id'];
            $plantArray[$outputCount]->vars["main_site_id"] = $row['main_site_id'];
            $plantArray[$outputCount]->vars["name"] = $row['name'];

            $plantArray[$outputCount]->vars["description"] = $row['description'];
            $plantArray[$outputCount]->vars["sort_order"] = $row['sort_order'];
            $plantArray[$outputCount]->vars["tceq_max_tpy"] = $row['tceq_max_tpy'];
            $plantArray[$outputCount]->vars["tceq_max_tph"] = $row['tceq_max_tph'];
            $plantArray[$outputCount]->vars["tceq_max_upy"] = $row['tceq_max_upy'];
            $plantArray[$outputCount]->vars["tceq_moisture_rate"] = $row['tceq_moisture_rate'];
            $plantArray[$outputCount]->vars["tceq_description"] = $row['tceq_description'];
            $plantArray[$outputCount]->vars["tceq_notes"] = $row['tceq_notes'];
            $plantArray[$outputCount]->vars["tceq_sort_order"] = $row['tceq_sort_order'];
            $plantArray[$outputCount]->vars["is_active"] = $row['is_active'];

            $outputCount++;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a filtered list of Plants.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            $error = $e->getMessage();
            echo $error;
        }
    }

    return $plantArray;
}


/*******************************************************************************
 * Function Name: getLocationsByPlant($plantID)
 * Description:
 * This function will:
 * Take a Plant ID number as a parameter
 * Returns an array of objects containing Location information.
 *******************************************************************************/
function getLocationsByPlant($plantID)
{
    $errorMessage = "qcfunctions.php - getLocationsByPlant() ";
    $locationArray = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM gb_qc_locations WHERE is_active = 1 AND main_plant_id = " . $plantID . " ORDER BY sort_order ASC"; //direct SQL method
        $sql = "CALL sp_gb_qc_LocationsGetByPlant('$plantID')";

        $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        $outputCount = 0;
        while($row = $result->fetch_assoc())
        {
            $locationArray[$outputCount]->vars["id"] = $row['id'];
            $locationArray[$outputCount]->vars["description"] = $row['description'];
            $locationArray[$outputCount]->vars["main_site_id"] = $row['main_site_id'];
            $locationArray[$outputCount]->vars["main_plant_id"] = $row['main_plant_id'];
            $locationArray[$outputCount]->vars["main_product_id"] = $row['main_product_id'];
            $locationArray[$outputCount]->vars["type_code"] = $row['type_code'];
            $locationArray[$outputCount]->vars["is_split_sample_only"] = $row['is_split_sample_only'];
            $locationArray[$outputCount]->vars["email_list_id"] = $row['email_list_id'];
            $locationArray[$outputCount]->vars["is_send_email"] = $row['is_send_email'];
            $locationArray[$outputCount]->vars["sort_order"] = $row['sort_order'];
            $locationArray[$outputCount]->vars["is_active"] = $row['is_active'];

            $outputCount++;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a filtered list of Locations.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            $error = $e->getMessage();
            echo $error;
        }
    }

    return $locationArray;
}


/*******************************************************************************
 * Function Name: getSpecificLocationsByLocation($locationID)
 * Description:
 * This function will:
 * Take a Location ID number as a parameter
 * Returns an array of objects containing Specific Location information.
 *******************************************************************************/
function getSpecificLocationsByLocation($locationID)
{
    $errorMessage = "qcfunctions.php - getSpecificLocationsByLocation() ";
    $specificLocationArray = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM gb_qc_locations_details WHERE is_active = 1 AND qc_location_id = " . $locationID . " ORDER BY sort_order ASC"; //direct SQL method
        $sql = "CALL sp_gb_qc_SpecificLocationsGetByLocation(" . $locationID . ")"; //stored procedure method
        $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        //echo "DEBUG: sql = " . $sql . "<br/>";

        $outputCount = 0;
        while($row = $result->fetch_assoc())
        {
            $specificLocationArray[$outputCount]->vars["id"] = $row['id'];
            $specificLocationArray[$outputCount]->vars["qc_location_id"] = $row['qc_location_id'];
            $specificLocationArray[$outputCount]->vars["description"] = $row['description'];
            $specificLocationArray[$outputCount]->vars["sort_order"] = $row['sort_order'];
            $specificLocationArray[$outputCount]->vars["is_active"] = $row['is_active'];

            $outputCount++;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a filtered list of Specific Locations.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            $error = $e->getMessage();
            echo $error;
        }
    }

    return $specificLocationArray;
}


/*******************************************************************************
 * Function Name: getSpecificLocationByID($specificLocationID)
 * Description:
 * This function will:
 * Take a Specific Location ID number as a parameter
 * Returns an array of objects containing Specific Location information.
 *******************************************************************************/
function getSpecificLocationByID($specificLocationID)
{
    $errorMessage = "qcfunctions.php - getSpecificLocationByID() ";
    $specificLocationObject = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM gb_qc_locations_details WHERE id = " . $specificLocationID . " LIMIT 1"; //direct SQL method
        $sql = "CALL sp_gb_qc_SpecificLocationGetByID('$specificLocationID');";

        $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        //echo "DEBUG: sql = " . $sql . "<br/>";

        while($row = $result->fetch_assoc())
        {
            $specificLocationObject->vars["id"] = $row['id'];
            $specificLocationObject->vars["qc_location_id"] = $row['qc_location_id'];
            $specificLocationObject->vars["description"] = $row['description'];
            $specificLocationObject->vars["sort_order"] = $row['sort_order'];
            $specificLocationObject->vars["is_active"] = $row['is_active'];
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a filtered list of Specific Locations.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            $error = $e->getMessage();
            echo $error;
        }
    }

    return $specificLocationObject;
}


/*******************************************************************************
 * Function Name: getKValueRecord($sampleID, $kValueID, $description)
 * Description:
 * This function will:
 * Take identifying information as parameters
 * Returns an objects containing the K Value record information.
 *******************************************************************************/
function getKValueRecord($sampleID, $kValueID, $description)
{
    $errorMessage = "qcfunctions.php - getKValueRecord() ";
    $kValueRecordObject = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM gb_qc_k_value_records WHERE sample_id = " . $sampleID . " AND k_value_id = " . $kValueID . " AND description = '" . $description . "' LIMIT 1"; //direct SQL method
        $sql = "CALL sp_gb_qc_KValueRecordGet('$sampleID','$kValueID','$description');";

        $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        //echo "DEBUG: sql = " . $sql . "<br/>";

        while($row = $result->fetch_assoc())
        {
            $kValueRecordObject->vars["id"] = $row['id'];
            $kValueRecordObject->vars["sample_id"] = $row['sample_id'];
            $kValueRecordObject->vars["k_value_id"] = $row['k_value_id'];
            $kValueRecordObject->vars["description"] = $row['description'];
            $kValueRecordObject->vars["value"] = $row['value'];
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a K Value Record.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            $error = $e->getMessage();
            echo $error;
        }
    }

    return $kValueRecordObject;
}


/*******************************************************************************
 * Function Name: updateKValueRecord($sampleID, $kValueId, $description, $value)
 * Description:
 * This function will:
 * Update a k value record in the database.
 * The sieve stack will be identified based on the sample_id, k_value_id, and description.
 *******************************************************************************/
function updateKValueRecord($sampleID, $kValueID, $description, $value)
{
    $errorMessage = "qcfunctions.php - updateKValueRecord() "; //requires pagevariables.php

    $returnValue = 0; //a value to tell us if the process was successful.

    try
    {

        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //direct SQL method
        //$sql = "UPDATE gb_qc_k_value_records SET `value` = $value WHERE `sample_id` = '" . $sampleID . "' AND `k_value_id` = '" . $kValueID . "' AND `description` = '" . $description . "';";
        $sql = "CALL sp_gb_qc_KValueRecordUpdate('" . $value . "','$sampleID','$kValueID','$description');";

        //echo "sql = " . $sql;

        //direct SQL method
        if ($mySQLConnectionLocal->query($sql) === TRUE)
        {
            //echo "Record updated successfully<br/>";
            $returnValue = 1;
        }
        else
        {
            echo "Error updating record: " . $mySQLConnectionLocal->error . "<br/>";
            $returnValue = 0;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error updating the value for a k value record.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {

            echo $errorMessage;

            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $returnValue;
}


/*******************************************************************************
 * Function Name: insertKValueRecord(($sampleID, $kValueId, $description, $value))
 * Description:
 * This function will:
 * Take numerous values as parameters.
 * Create a new record in the database table gb_qc_k_value_records.
 * Return a value to confirm success.
 *******************************************************************************/
function insertKValueRecord($sampleID, $kValueId, $description, $value)
{
    $result = 1;
    $errorMessage = "gb_qcfunctions.php - insertKValueRecord() ";

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "INSERT INTO gb_qc_k_value_records (sample_id, k_value_id, description, value) VALUES ($sampleID, $kValueId, '" . $description . "', '" . $value . "')"; //direct SQL method
        $sql = "CALL sp_gb_qc_KValueRecordInsert('$sampleID','$kValueId','$description','$value');";

        //echo "sql = " . $sql . "<br/>";

        //direct SQL method to check status
        if ($mySQLConnectionLocal->query($sql) === TRUE)
        {
            $returnValue = mysqli_insert_id($mySQLConnectionLocal);
        }
        else
        {
            $errorMessage = $errorMessage . "Error creating a record of final percentages.";
            //sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
            echo $errorMessage;
            echo "Error: " . $sql . "<br>" . $mySQLConnectionLocal->error;
            $result = 0;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error inserting final percentages into MySQL.";
        //sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        echo $errorMessage;
        $error = $e->getMessage();
        echo $error;
        $result = 0;
    }

    return $result;
}


/*******************************************************************************
 * Function Name: getSamplesByPlantAndDatetimeIncludeVoided($argPlantId, $argDatetime)
 * Description:
 * This function will:
 * Accept start and stop dates as parameters.
 * Returns an array of objects containing sample information within the date range.
 * Includes voided samples.
 *******************************************************************************/
function getSamplesByPlantAndDatetimeIncludeVoided($argPlantId, $argDatetime)
{
    $errorMessage = "qcfunctions.php - getSamplesByPlantAndDatetimeIncludeVoided() ";
    $arrayOfSamples = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM gb_qc_samples WHERE plant_id = '" . $argPlantId . "' AND dt = '" . $argDatetime . "'";
        $sql = "CALL sp_gb_qc_SampleGetByPlantAndDatetimeIncludeVoided('$argPlantId','$argDatetime');";

        $result = $mySQLConnectionLocal->query($sql); //stored procedure method
        /*
    //echo "DEBUG: SQL = " . $sql . "<br/>");
    //echo "DEBUG: SQL = " . $argStartDate . "<br/>");
    //echo "DEBUG: SQL = " . $argEndDate . "<br/>");
    */
        $outputCount = 0;
        while($row = $result->fetch_assoc())
        {
            $arrayOfSamples[$outputCount]->vars["id"] = $row['id']; //sample no
            $arrayOfSamples[$outputCount]->vars["description"] = $row['description'];
            $arrayOfSamples[$outputCount]->vars["repeatabilityId"] = $row['repeatability_id'];
            $arrayOfSamples[$outputCount]->vars["testType"] = $row['test_type_id'];
            $arrayOfSamples[$outputCount]->vars["compositeType"] = $row['composite_type_id'];
            $arrayOfSamples[$outputCount]->vars["sieveMethod"] = $row['sieve_method_id'];
            $arrayOfSamples[$outputCount]->vars["siteId"] = $row['site_id'];
            $arrayOfSamples[$outputCount]->vars["plantId"] = $row['plant_id'];
            $arrayOfSamples[$outputCount]->vars["location"] = $row['location_id'];
            $arrayOfSamples[$outputCount]->vars["specificLocation"] = $row['specific_location_id'];
            $arrayOfSamples[$outputCount]->vars["date"] = $row['date'];
            $arrayOfSamples[$outputCount]->vars["dateShort"] = $row['date_short'];
            $arrayOfSamples[$outputCount]->vars["time"] = $row['time'];
            $arrayOfSamples[$outputCount]->vars["groupTime"] = $row['group_time'];
            $arrayOfSamples[$outputCount]->vars["groupStartDateTime"] = $row['group_start_dt'];
            $arrayOfSamples[$outputCount]->vars["finishDateTime"] = $row['finish_dt'];
            $arrayOfSamples[$outputCount]->vars["durationMinutes"] = $row['duration_minutes'];
            $arrayOfSamples[$outputCount]->vars["duration"] = $row['duration'];
            $arrayOfSamples[$outputCount]->vars["dateTime"] = $row['dt'];
            $arrayOfSamples[$outputCount]->vars["dateTimeShort"] = $row['dt_short'];
            $arrayOfSamples[$outputCount]->vars["shiftDate"] = $row['shift_date'];
            $arrayOfSamples[$outputCount]->vars["shift"] = $row['shift'];
            $arrayOfSamples[$outputCount]->vars["sampler"] = $row['sampler'];
            $arrayOfSamples[$outputCount]->vars["labTech"] = $row['lab_tech'];
            $arrayOfSamples[$outputCount]->vars["operator"] = $row['operator'];
            $arrayOfSamples[$outputCount]->vars["railCarId"] = $row['rail_car_id'];
            $arrayOfSamples[$outputCount]->vars["railCarProductId"] = $row['rail_car_product_id'];
            $arrayOfSamples[$outputCount]->vars["railCarAvailableDateTime"] = $row['rail_car_available_dt'];
            $arrayOfSamples[$outputCount]->vars["startingWeight"] = $row['starting_weight'];
            $arrayOfSamples[$outputCount]->vars["endingWeight"] = $row['ending_weight'];
            $arrayOfSamples[$outputCount]->vars["moisture_rate"] = $row['moisture_rate'];
            $arrayOfSamples[$outputCount]->vars["drillholeNo"] = $row['drillhole_no'];
            $arrayOfSamples[$outputCount]->vars["depthFrom"] = $row['depth_from'];
            $arrayOfSamples[$outputCount]->vars["depthTo"] = $row['depth_to'];
            $arrayOfSamples[$outputCount]->vars["beginningWetWeight"] = $row['beginning_wet_weight'];
            $arrayOfSamples[$outputCount]->vars["preWashDryWeight"] = $row['prewash_dry_weight'];
            $arrayOfSamples[$outputCount]->vars["postWashDryWeight"] = $row['postwash_dry_weight'];
            $arrayOfSamples[$outputCount]->vars["oversizeWeight"] = $row['oversize_weight'];
            $arrayOfSamples[$outputCount]->vars["splitSampleWeight"] = $row['split_sample_weight'];
            $arrayOfSamples[$outputCount]->vars["splitSampleWeightDelta"] = $row['split_sample_weight_delta'];
            $arrayOfSamples[$outputCount]->vars["oversizePercent"] = $row['oversize_percent'];
            $arrayOfSamples[$outputCount]->vars["slimesPercent"] = $row['slimes_percent'];
            $arrayOfSamples[$outputCount]->vars["orePercent"] = $row['ore_percent'];
            $arrayOfSamples[$outputCount]->vars["notes"] = $row['notes'];
            $arrayOfSamples[$outputCount]->vars["reviewNotes"] = $row['review_notes'];
            $arrayOfSamples[$outputCount]->vars["turbidity"] = $row['turbidity'];
            $arrayOfSamples[$outputCount]->vars["containerSlurryWeight"] = $row['container_slurry_weight'];
            $arrayOfSamples[$outputCount]->vars["containerWaterWeight"] = $row['container_water_weight'];
            $arrayOfSamples[$outputCount]->vars["containerEmptyWeight"] = $row['container_empty_weight'];
            $arrayOfSamples[$outputCount]->vars["kValue"] = $row['k_value'];
            $arrayOfSamples[$outputCount]->vars["pan1"] = $row['k_pan_1'];
            $arrayOfSamples[$outputCount]->vars["pan2"] = $row['k_pan_2'];
            $arrayOfSamples[$outputCount]->vars["pan3"] = $row['k_pan_3'];
            $arrayOfSamples[$outputCount]->vars["kPercentFines"] = $row['k_percent_fines'];
            $arrayOfSamples[$outputCount]->vars["kValueFail"] = $row['k_value_fail'];
            $arrayOfSamples[$outputCount]->vars["pan1Fail"] = $row['k_pan_1_fail'];
            $arrayOfSamples[$outputCount]->vars["pan2Fail"] = $row['k_pan_2_fail'];
            $arrayOfSamples[$outputCount]->vars["pan3Fail"] = $row['k_pan_3_fail'];
            $arrayOfSamples[$outputCount]->vars["kPercentFinesFail"] = $row['k_percent_fines_fail'];
            $arrayOfSamples[$outputCount]->vars["roundness"] = $row['roundness'];
            $arrayOfSamples[$outputCount]->vars["sphericity"] = $row['sphericity'];
            $arrayOfSamples[$outputCount]->vars["sieve1Desc"] = $row['sieve_1_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve1Value"] = $row['sieve_1_value'];
            $arrayOfSamples[$outputCount]->vars["sieve1ValueCumulative"] = $row['sieve_1_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve1ValueCumulativePassing"] = $row['sieve_1_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve2Desc"] = $row['sieve_2_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve2Value"] = $row['sieve_2_value'];
            $arrayOfSamples[$outputCount]->vars["sieve2ValueCumulative"] = $row['sieve_2_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve2ValueCumulativePassing"] = $row['sieve_2_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve3Desc"] = $row['sieve_3_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve3Value"] = $row['sieve_3_value'];
            $arrayOfSamples[$outputCount]->vars["sieve3ValueCumulative"] = $row['sieve_3_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve3ValueCumulativePassing"] = $row['sieve_3_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve4Desc"] = $row['sieve_4_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve4Value"] = $row['sieve_4_value'];
            $arrayOfSamples[$outputCount]->vars["sieve4ValueCumulative"] = $row['sieve_4_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve4ValueCumulativePassing"] = $row['sieve_4_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve5Desc"] = $row['sieve_5_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve5Value"] = $row['sieve_5_value'];
            $arrayOfSamples[$outputCount]->vars["sieve5ValueCumulative"] = $row['sieve_5_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve5ValueCumulativePassing"] = $row['sieve_5_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve6Desc"] = $row['sieve_6_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve6Value"] = $row['sieve_6_value'];
            $arrayOfSamples[$outputCount]->vars["sieve6ValueCumulative"] = $row['sieve_6_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve6ValueCumulativePassing"] = $row['sieve_6_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve7Desc"] = $row['sieve_7_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve7Value"] = $row['sieve_7_value'];
            $arrayOfSamples[$outputCount]->vars["sieve7ValueCumulative"] = $row['sieve_7_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve7ValueCumulativePassing"] = $row['sieve_7_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve8Desc"] = $row['sieve_8_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve8Value"] = $row['sieve_8_value'];
            $arrayOfSamples[$outputCount]->vars["sieve8ValueCumulative"] = $row['sieve_8_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve8ValueCumulativePassing"] = $row['sieve_8_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve9Desc"] = $row['sieve_9_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve9Value"] = $row['sieve_9_value'];
            $arrayOfSamples[$outputCount]->vars["sieve9ValueCumulative"] = $row['sieve_9_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve9ValueCumulativePassing"] = $row['sieve_9_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve10Desc"] = $row['sieve_10_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve10Value"] = $row['sieve_10_value'];
            $arrayOfSamples[$outputCount]->vars["sieve10ValueCumulative"] = $row['sieve_10_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve10ValueCumulativePassing"] = $row['sieve_10_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sievesTotal"] = $row['sieves_total'];
            $arrayOfSamples[$outputCount]->vars["startWeightsRaw"] = $row['start_weights_raw'];
            $arrayOfSamples[$outputCount]->vars["endWeightsRaw"] = $row['end_weights_raw'];
            $arrayOfSamples[$outputCount]->vars["sieves_raw"] = $row['sieves_raw'];
            $arrayOfSamples[$outputCount]->vars["feedRowNo"] = $row['feed_row_no'];
            $arrayOfSamples[$outputCount]->vars["plus70"] = $row['plus_70'];
            $arrayOfSamples[$outputCount]->vars["plus50"] = $row['plus_50'];
            $arrayOfSamples[$outputCount]->vars["plus40"] = $row['plus_40'];
            $arrayOfSamples[$outputCount]->vars["neg50Plus140"] = $row['minus_50_plus_140'];
            $arrayOfSamples[$outputCount]->vars["neg40Plus70"] = $row['minus_40_plus_70'];
            $arrayOfSamples[$outputCount]->vars["neg70"] = $row['minus_70'];
            $arrayOfSamples[$outputCount]->vars["neg70Plus140"] = $row['minus_70_plus_140'];
            $arrayOfSamples[$outputCount]->vars["neg60Plus70"] = $row['minus_60_plus_70'];
            $arrayOfSamples[$outputCount]->vars["neg140Plus325"] = $row['minus_140_plus_325'];
            $arrayOfSamples[$outputCount]->vars["plus140"] = $row['plus_140'];
            $arrayOfSamples[$outputCount]->vars["neg140"] = $row['minus_140'];
            $arrayOfSamples[$outputCount]->vars["nearSize"] = $row['near_size'];
            $arrayOfSamples[$outputCount]->vars["cutRatio"] = $row['cut_ratio'];
            $arrayOfSamples[$outputCount]->vars["wpMoistureRatio"] = $row['wp_moisture_rate'];
            $arrayOfSamples[$outputCount]->vars["percentSolids"] = $row['percent_solids'];
            $arrayOfSamples[$outputCount]->vars["stph"] = $row['stph'];
            $arrayOfSamples[$outputCount]->vars["tonsRepresented"] = $row['tons_represented'];
            $arrayOfSamples[$outputCount]->vars["tphRepresented"] = $row['tph_represented'];
            $arrayOfSamples[$outputCount]->vars["recoveryPlusSeventy"] = $row['recovery_plus_70'];
            $arrayOfSamples[$outputCount]->vars["recoveryPlusOneForty"] = $row['recovery_plus_140'];
            $arrayOfSamples[$outputCount]->vars["isRemoved"] = $row['is_removed'];
            $arrayOfSamples[$outputCount]->vars["voidStatusCode"] = $row['void_status_code'];
            $arrayOfSamples[$outputCount]->vars["createDateTime"] = $row['create_dt'];
            $arrayOfSamples[$outputCount]->vars["createUserId"] = $row['create_user_id'];
            $arrayOfSamples[$outputCount]->vars["editDateTime"] = $row['edit_dt'];
            $arrayOfSamples[$outputCount]->vars["editUserId"] = $row['edit_user_id'];

            $arrayOfSamples[$outputCount]->vars["sieve11Desc"] = $row['sieve_11_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve11Value"] = $row['sieve_11_value'];
            $arrayOfSamples[$outputCount]->vars["sieve11ValueCumulative"] = $row['sieve_11_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve11ValueCumulativePassing"] = $row['sieve_11_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve12Desc"] = $row['sieve_12_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve12Value"] = $row['sieve_12_value'];
            $arrayOfSamples[$outputCount]->vars["sieve12ValueCumulative"] = $row['sieve_12_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve12ValueCumulativePassing"] = $row['sieve_12_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve13Desc"] = $row['sieve_13_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve13Value"] = $row['sieve_13_value'];
            $arrayOfSamples[$outputCount]->vars["sieve13ValueCumulative"] = $row['sieve_13_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve13ValueCumulativePassing"] = $row['sieve_13_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve14Desc"] = $row['sieve_14_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve14Value"] = $row['sieve_14_value'];
            $arrayOfSamples[$outputCount]->vars["sieve14ValueCumulative"] = $row['sieve_14_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve14ValueCumulativePassing"] = $row['sieve_14_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve15Desc"] = $row['sieve_15_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve15Value"] = $row['sieve_15_value'];
            $arrayOfSamples[$outputCount]->vars["sieve15ValueCumulative"] = $row['sieve_15_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve15ValueCumulativePassing"] = $row['sieve_15_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve16Desc"] = $row['sieve_16_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve16Value"] = $row['sieve_16_value'];
            $arrayOfSamples[$outputCount]->vars["sieve16ValueCumulative"] = $row['sieve_16_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve16ValueCumulativePassing"] = $row['sieve_16_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve17Desc"] = $row['sieve_17_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve17Value"] = $row['sieve_17_value'];
            $arrayOfSamples[$outputCount]->vars["sieve17ValueCumulative"] = $row['sieve_17_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve17ValueCumulativePassing"] = $row['sieve_17_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve18Desc"] = $row['sieve_18_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve18Value"] = $row['sieve_18_value'];
            $arrayOfSamples[$outputCount]->vars["sieve18ValueCumulative"] = $row['sieve_18_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve18ValueCumulativePassing"] = $row['sieve_18_value_cumulative_passing'];

            $outputCount++;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a list of samples.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $arrayOfSamples;
}


/*******************************************************************************
 * Function Name: getSiteById($argId)
 * Description:
 * This function will:
 * Take an ID # as a parameter.
 * Return an object containing the site information.
 *******************************************************************************/
function getSiteById($argId)
{
    $errorMessage = "qcfunctions.php - getSiteById() ";
    $siteObject = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM main_sites WHERE id = $argId LIMIT 1"; //direct SQL method
        $sql = "CALL sp_gb_qc_SiteGetByID('$argId');";

        $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        while($row = $result->fetch_assoc())
        {
            $siteObject->vars["id"] = $row['id'];
            $siteObject->vars["description"] = $row['description'];
            $siteObject->vars["is_vista_site"] = $row['is_vista_site'];
            $siteObject->vars["is_qc_samples_site"] = $row['is_qc_samples_site'];
            $siteObject->vars["local_network"] = $row['local_network'];
            $siteObject->vars["sort_order"] = $row['sort_order'];
            $siteObject->vars["is_active"] = $row['is_active'];
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for site by ID.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            $error = $e->getMessage();
            echo $error;
        }
    }

    return $siteObject;
}

/*******************************************************************************
 * Function Name: reverseSampleVoid($argId)
 * Description:
 * This function will:
 * Accept an integer corresponding to an ID in the database.
 * Flag the record as active in the gb_qc_samples database.
 *******************************************************************************/
function reverseSampleVoid($argId)
{
    $errorMessage = "gb_qcfunctions.php - reverseSampleVoid() ";

    $returnValue = 0; //a value to tell us if the process was successful.

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        if($mySQLConnectionLocal->query("CALL sp_gb_qc_SampleVoidReverse('$argId');") === TRUE) //stored procedure method
        {
            $returnValue = 1;
        }
        else
        {
            echo "Error updating record: " . $conn->error . "<br/>";
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error voiding a sample.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
        }
    }

    return $returnValue;
}


/*******************************************************************************
 * Function Name: getSpecificLocations()
 * Description:
 * This function will:
 * Returns an array of objects containing Specific Location information.
 *******************************************************************************/
function getSpecificLocations()
{
    $errorMessage = "qcfunctions.php - getSpecificLocations() ";
    $specificLocationObjectArray = array();
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM gb_qc_locations_details"; //direct SQL method
        $sql = "CALL sp_gb_qc_SpecificLocationsGet"; //stored procedure
        $result =  $mySQLConnectionLocal->query($sql);

        //echo "DEBUG: sql = " . $sql . "<br/>";

        $i = 0;
        while($row = $result->fetch_assoc())
        {
            $specificLocationObjectArray[$i]->vars["id"] = $row['id'];
            $specificLocationObjectArray[$i]->vars["plant"] = $row['plant'];
            $specificLocationObjectArray[$i]->vars["site"] = $row['site'];
            $specificLocationObjectArray[$i]->vars["qc_location_id"] = $row['qc_location_id'];
            $specificLocationObjectArray[$i]->vars["description"] = $row['description'];
            $specificLocationObjectArray[$i]->vars["sort_order"] = $row['sort_order'];
            $specificLocationObjectArray[$i]->vars["is_active"] = $row['is_active'];

            $i++;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a full list of Specific Locations.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            $error = $e->getMessage();
            echo $error;
        }
    }

    return $specificLocationObjectArray;
}

/*******************************************************************************
 * Function Name: getMostRecentSampleBySpecificLocation($argId)
 * Description:
 * This function will:
 * Take a specific location ID # as a parameter.
 * Return an object containing the information on the most recent sample for that
 * specific location.
 * Note: this returns the most recent COMPLETE sample based on the is_complete flag.
 *******************************************************************************/
function getMostRecentSampleBySpecificLocation($argId)
{
    $errorMessage = "qcfunctions.php - getMostRecentSampleBySpecificLocation() ";
    $sampleObject = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //$sql = "SELECT * FROM gb_qc_samples WHERE void_status_code != 'V' AND specific_location_id = $argId AND is_complete = 1 ORDER BY id DESC LIMIT 1"; //direct SQL method
        $sql = "CALL sp_gb_qc_MostRecentSampleBySpecificLocation(" . $argId . ")"; //stored procedure method

        $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        while($row = $result->fetch_assoc())
        {
            $sampleObject->vars["id"] = $row['id']; //sample no
            $sampleObject->vars["description"] = $row['description'];
            $sampleObject->vars["repeatabilityId"] = $row['repeatability_id'];
            $sampleObject->vars["testType"] = $row['test_type_id'];
            $sampleObject->vars["compositeType"] = $row['composite_type_id'];
            $sampleObject->vars["sieveMethod"] = $row['sieve_method_id'];
            $sampleObject->vars["siteId"] = $row['site_id'];
            $sampleObject->vars["plantId"] = $row['plant_id'];
            $sampleObject->vars["location"] = $row['location_id'];
            $sampleObject->vars["specificLocation"] = $row['specific_location_id'];
            $sampleObject->vars["date"] = $row['date'];
            $sampleObject->vars["dateShort"] = $row['date_short'];
            $sampleObject->vars["time"] = $row['time'];
            $sampleObject->vars["groupTime"] = $row['group_time'];
            $sampleObject->vars["groupStartDateTime"] = $row['group_start_dt'];
            $sampleObject->vars["finishDateTime"] = $row['finish_dt'];
            $sampleObject->vars["durationMinutes"] = $row['duration_minutes'];
            $sampleObject->vars["duration"] = $row['duration'];
            $sampleObject->vars["dt"] = $row['dt'];
            $sampleObject->vars["dateTimeShort"] = $row['dt_short'];
            $sampleObject->vars["shiftDate"] = $row['shift_date'];
            $sampleObject->vars["shift"] = $row['shift'];
            $sampleObject->vars["sampler"] = $row['sampler'];
            $sampleObject->vars["labTech"] = $row['lab_tech'];
            $sampleObject->vars["operator"] = $row['operator'];
            $sampleObject->vars["railCarId"] = $row['rail_car_id'];
            $sampleObject->vars["railCarProductId"] = $row['rail_car_product_id'];
            $sampleObject->vars["railCarAvailableDateTime"] = $row['rail_car_available_dt'];
            $sampleObject->vars["startingWeight"] = $row['starting_weight'];
            $sampleObject->vars["endingWeight"] = $row['ending_weight'];
            $sampleObject->vars["moistureRate"] = $row['moisture_rate'];
            $sampleObject->vars["drillholeNo"] = $row['drillhole_no'];
            $sampleObject->vars["depthFrom"] = $row['depth_from'];
            $sampleObject->vars["depthTo"] = $row['depth_to'];
            $sampleObject->vars["beginningWetWeight"] = $row['beginning_wet_weight'];
            $sampleObject->vars["preWashDryWeight"] = $row['prewash_dry_weight'];
            $sampleObject->vars["postWashDryWeight"] = $row['postwash_dry_weight'];
            $sampleObject->vars["oversizeWeight"] = $row['oversize_weight'];
            $sampleObject->vars["splitSampleWeight"] = $row['split_sample_weight'];
            $sampleObject->vars["splitSampleWeightDelta"] = $row['split_sample_weight_delta'];
            $sampleObject->vars["oversizePercent"] = $row['oversize_percent'];
            $sampleObject->vars["slimesPercent"] = $row['slimes_percent'];
            $sampleObject->vars["orePercent"] = $row['ore_percent'];
            $sampleObject->vars["notes"] = $row['notes'];
            $sampleObject->vars["reviewNotes"] = $row['review_notes'];
            $sampleObject->vars["turbidity"] = $row['turbidity'];
            $sampleObject->vars["containerSlurryWeight"] = $row['container_slurry_weight'];
            $sampleObject->vars["containerWaterWeight"] = $row['container_water_weight'];
            $sampleObject->vars["containerEmptyWeight"] = $row['container_empty_weight'];
            $sampleObject->vars["kValue"] = $row['k_value'];
            $sampleObject->vars["pan1"] = $row['k_pan_1'];
            $sampleObject->vars["pan2"] = $row['k_pan_2'];
            $sampleObject->vars["pan3"] = $row['k_pan_3'];
            $sampleObject->vars["kPercentFines"] = $row['k_percent_fines'];
            $sampleObject->vars["kValueFail"] = $row['k_value_fail'];
            $sampleObject->vars["pan1Fail"] = $row['k_pan_1_fail'];
            $sampleObject->vars["pan2Fail"] = $row['k_pan_2_fail'];
            $sampleObject->vars["pan3Fail"] = $row['k_pan_3_fail'];
            $sampleObject->vars["kPercentFinesFail"] = $row['k_percent_fines_fail'];
            $sampleObject->vars["roundness"] = $row['roundness'];
            $sampleObject->vars["sphericity"] = $row['sphericity'];
            $sampleObject->vars["sieve_1_desc"] = $row['sieve_1_desc'];
            $sampleObject->vars["sieve_1_value"] = $row['sieve_1_value'];
            $sampleObject->vars["sieve_1_value_cumulative"] = $row['sieve_1_value_cumulative'];
            $sampleObject->vars["sieve_1_value_cumulative_passing"] = $row['sieve_1_value_cumulative_passing'];
            $sampleObject->vars["sieve_2_desc"] = $row['sieve_2_desc'];
            $sampleObject->vars["sieve_2_value"] = $row['sieve_2_value'];
            $sampleObject->vars["sieve_2_value_cumulative"] = $row['sieve_2_value_cumulative'];
            $sampleObject->vars["sieve_2_value_cumulative_passing"] = $row['sieve_2_value_cumulative_passing'];
            $sampleObject->vars["sieve_3_desc"] = $row['sieve_3_desc'];
            $sampleObject->vars["sieve_3_value"] = $row['sieve_3_value'];
            $sampleObject->vars["sieve_3_value_cumulative"] = $row['sieve_3_value_cumulative'];
            $sampleObject->vars["sieve_3_value_cumulative_passing"] = $row['sieve_3_value_cumulative_passing'];
            $sampleObject->vars["sieve_4_desc"] = $row['sieve_4_desc'];
            $sampleObject->vars["sieve_4_value"] = $row['sieve_4_value'];
            $sampleObject->vars["sieve_4_value_cumulative"] = $row['sieve_4_value_cumulative'];
            $sampleObject->vars["sieve_4_value_cumulative_passing"] = $row['sieve_4_value_cumulative_passing'];
            $sampleObject->vars["sieve_5_desc"] = $row['sieve_5_desc'];
            $sampleObject->vars["sieve_5_value"] = $row['sieve_5_value'];
            $sampleObject->vars["sieve_5_value_cumulative"] = $row['sieve_5_value_cumulative'];
            $sampleObject->vars["sieve_5_value_cumulative_passing"] = $row['sieve_5_value_cumulative_passing'];
            $sampleObject->vars["sieve_6_desc"] = $row['sieve_6_desc'];
            $sampleObject->vars["sieve_6_value"] = $row['sieve_6_value'];
            $sampleObject->vars["sieve_6_value_cumulative"] = $row['sieve_6_value_cumulative'];
            $sampleObject->vars["sieve_6_value_cumulative_passing"] = $row['sieve_6_value_cumulative_passing'];
            $sampleObject->vars["sieve_7_desc"] = $row['sieve_7_desc'];
            $sampleObject->vars["sieve_7_value"] = $row['sieve_7_value'];
            $sampleObject->vars["sieve_7_value_cumulative"] = $row['sieve_7_value_cumulative'];
            $sampleObject->vars["sieve_7_value_cumulative_passing"] = $row['sieve_7_value_cumulative_passing'];
            $sampleObject->vars["sieve_8_desc"] = $row['sieve_8_desc'];
            $sampleObject->vars["sieve_8_value"] = $row['sieve_8_value'];
            $sampleObject->vars["sieve_8_value_cumulative"] = $row['sieve_8_value_cumulative'];
            $sampleObject->vars["sieve_8_value_cumulative_passing"] = $row['sieve_8_value_cumulative_passing'];
            $sampleObject->vars["sieve_9_desc"] = $row['sieve_9_desc'];
            $sampleObject->vars["sieve_9_value"] = $row['sieve_9_value'];
            $sampleObject->vars["sieve_9_value_cumulative"] = $row['sieve_9_value_cumulative'];
            $sampleObject->vars["sieve_9_cumulative_passing"] = $row['sieve_9_value_cumulative_passing'];
            $sampleObject->vars["sieve_10_desc"] = $row['sieve_10_desc'];
            $sampleObject->vars["sieve_10_value"] = $row['sieve_10_value'];
            $sampleObject->vars["sieve_10_value_cumulative"] = $row['sieve_10_value_cumulative'];
            $sampleObject->vars["sieve_10_value_cumulative_passing"] = $row['sieve_10_value_cumulative_passing'];
            $sampleObject->vars["totalFinalWeight"] = $row['sieves_total'];
            $sampleObject->vars["startWeightsRaw"] = $row['start_weights_raw'];
            $sampleObject->vars["endWeightsRaw"] = $row['end_weights_raw'];
            $sampleObject->vars["finalWeightsRaw"] = $row['sieves_raw'];
            $sampleObject->vars["feedRowNo"] = $row['feed_row_no'];
            $sampleObject->vars["plus_70"] = $row['plus_70'];
            $sampleObject->vars["plus_50"] = $row['plus_50'];
            $sampleObject->vars["plus_40"] = $row['plus_40'];
            $sampleObject->vars["minus_40_plus_70"] = $row['minus_40_plus_70'];
            $sampleObject->vars["minus_70"] = $row['minus_70'];
            $sampleObject->vars["minus_70_plus_140"] = $row['minus_70_plus_140'];
            $sampleObject->vars["plus_140"] = $row['plus_140'];
            $sampleObject->vars["minus_140"] = $row['minus_140'];
            $sampleObject->vars["nearSize"] = $row['near_size'];
            $sampleObject->vars["cutRatio"] = $row['cut_ratio'];
            $sampleObject->vars["wpMoistureRatio"] = $row['wp_moisture_rate'];
            $sampleObject->vars["percentSolids"] = $row['percent_solids'];
            $sampleObject->vars["stph"] = $row['stph'];
            $sampleObject->vars["tonsRepresented"] = $row['tons_represented'];
            $sampleObject->vars["tphRepresented"] = $row['tph_represented'];
            $sampleObject->vars["recoveryPlusSeventy"] = $row['recovery_plus_70'];
            $sampleObject->vars["recoveryPlusOneForty"] = $row['recovery_plus_140'];
            $sampleObject->vars["isRemoved"] = $row['is_removed'];
            $sampleObject->vars["voidStatusCode"] = $row['void_status_code'];
            $sampleObject->vars["createDateTime"] = $row['create_dt'];
            $sampleObject->vars["createUserId"] = $row['create_user_id'];
            $sampleObject->vars["editDateTime"] = $row['edit_dt'];
            $sampleObject->vars["editUserId"] = $row['edit_user_id'];

            $sampleObject->vars["sieve_11_desc"] = $row['sieve_11_desc'];
            $sampleObject->vars["sieve_11_value"] = $row['sieve_11_value'];
            $sampleObject->vars["sieve_11_value_cumulative"] = $row['sieve_11_value_cumulative'];
            $sampleObject->vars["sieve_11_value_cumulative_passing"] = $row['sieve_11_value_cumulative_passing'];

            $sampleObject->vars["sieve_12_desc"] = $row['sieve_12_desc'];
            $sampleObject->vars["sieve_12_value"] = $row['sieve_12_value'];
            $sampleObject->vars["sieve_12_value_cumulative"] = $row['sieve_12_value_cumulative'];
            $sampleObject->vars["sieve_12_value_cumulative_passing"] = $row['sieve_12_value_cumulative_passing'];

            $sampleObject->vars["sieve_13_desc"] = $row['sieve_13_desc'];
            $sampleObject->vars["sieve_13_value"] = $row['sieve_13_value'];
            $sampleObject->vars["sieve_13_value_cumulative"] = $row['sieve_13_value_cumulative'];
            $sampleObject->vars["sieve_13_value_cumulative_passing"] = $row['sieve_13_value_cumulative_passing'];

            $sampleObject->vars["sieve_14_desc"] = $row['sieve_14_desc'];
            $sampleObject->vars["sieve_14_value"] = $row['sieve_14_value'];
            $sampleObject->vars["sieve_14_value_cumulative"] = $row['sieve_14_value_cumulative'];
            $sampleObject->vars["sieve_14_value_cumulative_passing"] = $row['sieve_14_value_cumulative_passing'];

            $sampleObject->vars["sieve_15_desc"] = $row['sieve_15_desc'];
            $sampleObject->vars["sieve_15_value"] = $row['sieve_15_value'];
            $sampleObject->vars["sieve_15_value_cumulative"] = $row['sieve_15_value_cumulative'];
            $sampleObject->vars["sieve_15_value_cumulative_passing"] = $row['sieve_15_value_cumulative_passing'];

            $sampleObject->vars["sieve_16_desc"] = $row['sieve_16_desc'];
            $sampleObject->vars["sieve_16_value"] = $row['sieve_16_value'];
            $sampleObject->vars["sieve_16_value_cuulative"] = $row['sieve_16_value_cumulative'];
            $sampleObject->vars["sieve_16_value_cumulative_passing"] = $row['sieve_16_value_cumulative_passing'];

            $sampleObject->vars["sieve_17_desc"] = $row['sieve_17_desc'];
            $sampleObject->vars["sieve_17_value"] = $row['sieve_17_value'];
            $sampleObject->vars["sieve_17_value_cumulative"] = $row['sieve_17_value_cumulative'];
            $sampleObject->vars["sieve_17_value_cumulative_passing"] = $row['sieve_17_value_cumulative_passing'];

            $sampleObject->vars["sieve_18_desc"] = $row['sieve_18_desc'];
            $sampleObject->vars["sieve_18_value"] = $row['sieve_18_value'];
            $sampleObject->vars["sieve_18_value_cumulative"] = $row['sieve_18_value_cumulative'];
            $sampleObject->vars["sieve_18_value_cumulative_passing"] = $row['sieve_18_value_cumulative_passing'];

        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a sample by ID.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $sampleObject;
}

/*******************************************************************************
 * Function Name: getDateRangePercentAveragesBySpecificLocation($argSpecificLocation, $startDate, $endDate)
 * Description:
 * This function will:
 * Accept a parameter with a specific location ID #.
 * Accept start and end dates as parameters.
 * Exclude samples based on certain criteria: exclude samples where void status = V,
 * test type != test, test type != retest
 * Return an array of objects containing averages of sample final percentages.
 * Is used in the QC Overview page data.
 *******************************************************************************/
function getDateRangePercentAveragesBySpecificLocation($argSpecificLocation, $startDate, $endDate)
{

    $errorMessage = "qcfunctions.php - getDateRangePercentAveragesBySpecificLocation() ";
    $arrayOfTotalValues = NULL;
    $arrayOfAverageValues = NULL;
    $outputArray = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //select the samples from the location and time period
        /*
    $sql = "SELECT gb_qc_samples.id, DATE_FORMAT(gb_qc_samples.date, '%Y-%m-%d') as 'date', gb_qc_finalpercentages.finalpercent1, gb_qc_finalpercentages.finalpercent2, gb_qc_finalpercentages.finalpercent3, gb_qc_finalpercentages.finalpercent4, gb_qc_finalpercentages.finalpercent5, gb_qc_finalpercentages.finalpercent6, gb_qc_finalpercentages.finalpercent7, gb_qc_finalpercentages.finalpercent8, gb_qc_finalpercentages.finalpercent9, gb_qc_finalpercentages.finalpercent10, gb_qc_finalpercentages.finalpercent11, gb_qc_finalpercentages.finalpercent12, gb_qc_finalpercentages.finalpercent13, gb_qc_finalpercentages.finalpercent14, gb_qc_finalpercentages.finalpercent15, gb_qc_finalpercentages.finalpercent16, gb_qc_finalpercentages.finalpercent17, gb_qc_finalpercentages.finalpercent18, gb_qc_samples.plus_70, gb_qc_samples.minus_40_plus_70, gb_qc_samples.minus_70, gb_qc_samples.minus_70_plus_140, gb_qc_samples.plus_140, gb_qc_samples.minus_140 "
    . "FROM gb_qc_samples "
    . "LEFT JOIN gb_qc_finalpercentages ON gb_qc_samples.id = gb_qc_finalpercentages.sample_id "
    . "WHERE test_type_id > 1 AND test_type_id < 4 AND void_status_code != 'V' AND specific_location_id = $argSpecificLocation AND sieve_method_id is NOT NULL AND date >= '" . $startDate . "' AND date <= '" . $endDate . "'"; //direct SQL method
    */
        $sql = "Call sp_gb_qc_DateRangePercentSamplesGetBySpecificLocation(" . $argSpecificLocation . ", '" . $startDate . "', '" . $endDate . "')"; //stored procedure method
//echo ($sql);
        $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        //initialize values
        $sumOfValue1 = 0;
        $sumOfValue2 = 0;
        $sumOfValue3 = 0;
        $sumOfValue4 = 0;
        $sumOfValue5 = 0;
        $sumOfValue6 = 0;
        $sumOfValue7 = 0;
        $sumOfValue8 = 0;
        $sumOfValue9 = 0;
        $sumOfValue10 = 0;
        $sumOfValue11 = 0;
        $sumOfValue12 = 0;
        $sumOfValue13 = 0;
        $sumOfValue14 = 0;
        $sumOfValue15 = 0;
        $sumOfValue16 = 0;
        $sumOfValue17 = 0;
        $sumOfValue18 = 0;

        $sumOfValueOversize = 0;
        $sumOfValuePlus40 = 0;
        $sumOfValueNeg40Plus70 = 0;
        $sumOfValueNeg60Plus70 = 0;
        $sumOfValueNeg70Plus140 = 0;
        $sumOfValueNeg50Plus140 = 0;
        $sumOfValueNearSize = 0;
        $sumOfValueNeg140Plus325 = 0;
        $sumOfValueNeg140 = 0;

        $outputCount1 = 0;
        $outputCount2 = 0;
        $outputCount3 = 0;
        $outputCount4 = 0;
        $outputCount5 = 0;
        $outputCount6 = 0;
        $outputCount7 = 0;
        $outputCount8 = 0;
        $outputCount9 = 0;
        $outputCount10 = 0;
        $outputCount11 = 0;
        $outputCount12 = 0;
        $outputCount13 = 0;
        $outputCount14 = 0;
        $outputCount15 = 0;
        $outputCount16 = 0;
        $outputCount17 = 0;
        $outputCount18 = 0;

        $outputCountOversize = 0;
        $outputCountPlus40 = 0;
        $outputCountNeg40Plus70 = 0;
        $outputCountNeg60Plus70 = 0;
        $outputCountNeg70Plus140 = 0;
        $outputCountNeg50Plus140 = 0;
        $outputCountNearSize = 0;
        $outputCountNeg140Plus325 = 0;
        $outputCountNeg140 = 0;

        $arrayOfAveragePercentages[0] = 0;
        $arrayOfAveragePercentages[1] = 0;
        $arrayOfAveragePercentages[2] = 0;
        $arrayOfAveragePercentages[3] = 0;
        $arrayOfAveragePercentages[4] = 0;
        $arrayOfAveragePercentages[5] = 0;
        $arrayOfAveragePercentages[6] = 0;
        $arrayOfAveragePercentages[7] = 0;
        $arrayOfAveragePercentages[8] = 0;
        $arrayOfAveragePercentages[9] = 0;
        $arrayOfAveragePercentages[10] = 0;
        $arrayOfAveragePercentages[11] = 0;
        $arrayOfAveragePercentages[12] = 0;
        $arrayOfAveragePercentages[13] = 0;
        $arrayOfAveragePercentages[14] = 0;
        $arrayOfAveragePercentages[15] = 0;
        $arrayOfAveragePercentages[16] = 0;
        $arrayOfAveragePercentages[17] = 0;

        $arrayOfAveragePercentages[18] = 0; // +10 (OS)
        $arrayOfAveragePercentages[19] = 0; //-10+40
        $arrayOfAveragePercentages[20] = 0; //-40+70
        $arrayOfAveragePercentages[21] = 0; //-60+70
        $arrayOfAveragePercentages[22] = 0; //-70 +140
        $arrayOfAveragePercentages[23] = 0; //-50+140
        $arrayOfAveragePercentages[24] = 0; //Near Size
        $arrayOfAveragePercentages[25] = 0; // -140+325
        $arrayOfAveragePercentages[26] = 0; //-140


        while($row = $result->fetch_assoc())
        {

            if(($row['sieve_1_value'] != NULL) && ($row['sieve_1_value'] != 0))
            {
                $sumOfValue1 = $sumOfValue1 + $row['sieve_1_value'];
                $outputCount1++;
            }

            if(($row['sieve_2_value'] != NULL) && ($row['sieve_2_value'] != 0))
            {
                $sumOfValue2 = $sumOfValue2 + $row['sieve_2_value'];
                $outputCount2++;
            }

            if(($row['sieve_3_value'] != NULL) && ($row['sieve_3_value'] != 0))
            {
                $sumOfValue3 = $sumOfValue3 + $row['sieve_3_value'];
                $outputCount3++;
            }

            if(($row['sieve_4_value'] != NULL) && ($row['sieve_4_value'] != 0))
            {
                $sumOfValue4 = $sumOfValue4 + $row['sieve_4_value'];
                $outputCount4++;
            }

            if(($row['sieve_5_value'] != NULL) && ($row['sieve_5_value'] != 0))
            {
                $sumOfValue5 = $sumOfValue5 + $row['sieve_5_value'];
                $outputCount5++;
            }

            if(($row['sieve_6_value'] != NULL) && ($row['sieve_6_value'] != 0))
            {
                $sumOfValue6 = $sumOfValue6 + $row['sieve_6_value'];
                $outputCount6++;
            }

            if(($row['sieve_7_value'] != NULL) && ($row['sieve_7_value'] != 0))
            {
                $sumOfValue7 = $sumOfValue7 + $row['sieve_7_value'];
                $outputCount7++;
            }

            if(($row['sieve_8_value'] != NULL) && ($row['sieve_8_value'] != 0))
            {
                $sumOfValue8 = $sumOfValue8 + $row['sieve_8_value'];
                $outputCount8++;
            }

            if(($row['sieve_9_value'] != NULL) && ($row['sieve_9_value'] != 0))
            {
                $sumOfValue9 = $sumOfValue9 + $row['sieve_9_value'];
                $outputCount9++;
            }

            if(($row['sieve_10_value'] != NULL) && ($row['sieve_10_value']!= 0))
            {
                $sumOfValue10 = $sumOfValue10 + $row['sieve_10_value'];
                $outputCount10++;
            }

            if(($row['sieve_11_value'] != NULL) && ($row['sieve_11_value'] != 0))
            {
                $sumOfValue11 = $sumOfValue11 + $row['sieve_11_value'];
                $outputCount11++;
            }

            if(($row['sieve_12_value'] != NULL) && ($row['sieve_12_value'] != 0))
            {
                $sumOfValue12 = $sumOfValue12 + $row['sieve_12_value'];
                $outputCount12++;
            }

            if(($row['sieve_13_value'] != NULL) && ($row['sieve_13_value'] != 0))
            {
                $sumOfValue13 = $sumOfValue13 + $row['sieve_13_value'];
                $outputCount13++;
            }

            if(($row['sieve_14_value'] != NULL) && ($row['sieve_14_value'] != 0))
            {
                $sumOfValue14 = $sumOfValue14 + $row['sieve_14_value'];
                $outputCount14++;
            }

            if(($row['sieve_15_value'] != NULL) && ($row['sieve_15_value'] != 0))
            {
                $sumOfValue15 = $sumOfValue15 + $row['sieve_15_value'];
                $outputCount15++;
            }

            if(($row['sieve_16_value'] != NULL) && ($row['sieve_16_value'] != 0))
            {
                $sumOfValue16 = $sumOfValue16 + $row['sieve_16_value'];
                $outputCount16++;
            }

            if(($row['sieve_17_value'] != NULL) && ($row['sieve_17_value'] != 0))
            {
                $sumOfValue17 = $sumOfValue17 + $row['sieve_17_value'];
                $outputCount17++;
            }

            if(($row['sieve_18_value'] != NULL) && ($row['sieve_18_value'] != 0))
            {
                $sumOfValue18 = $sumOfValue18 + $row['sieve_18_value'];
                $outputCount18++;
            }

            //sieve ranges
            if(($row['minus_40_plus_70'] != NULL) && ($row['minus_40_plus_70'] != 0))
            {
                $sumOfValueNeg50Plus140 = $sumOfValueNeg50Plus140 + $row['minus_40_plus_70'];
                $outputCountNeg50Plus140++;
            }

            if(($row['plus_70'] != NULL) && ($row['plus_70'] != 0))
            {
                $sumOfValuePlusSeventy = $sumOfValuePlusSeventy + $row['plus_70'];
                $outputCountPlusSeventy++;
            }

            if(($row['minus_70'] != NULL) && ($row['minus_70'] != 0))
            {
                $sumOfValueMinusSeventy = $sumOfValueMinusSeventy + $row['minus_70'];
                $outputCountMinusSeventy++;
            }

            if(($row['minus_140'] != NULL) && ($row['minus_140'] != 0))
            {
                $sumOfValueMinusOneForty = $sumOfValueMinusOneForty + $row['minus_140'];
                $outputCountMinusOneForty++;
            }

            if(($row['minus_70_plus_140'] != NULL) && ($row['minus_70_plus_140'] != 0))
            {
                $sumOfValueMinusSeventyPlusOneForty = $sumOfValueMinusSeventyPlusOneForty + $row['minus_70_plus_140'];
                $outputCountMinusSeventyPlusOneForty++;
            }

        }

        //increment the outputCounts if they == 1, so that there isn't a division by zero error
        if($outputCount1 == 1){ $outputCount1 = $outputCount1 + 1; }
        if($outputCount2 == 1){ $outputCount2 = $outputCount2 + 1; }
        if($outputCount3 == 1){ $outputCount3 = $outputCount3 + 1; }
        if($outputCount4 == 1){ $outputCount4 = $outputCount4 + 1; }
        if($outputCount5 == 1){ $outputCount5 = $outputCount5 + 1; }
        if($outputCount6 == 1){ $outputCount6 = $outputCount6 + 1; }
        if($outputCount7 == 1){ $outputCount7 = $outputCount7 + 1; }
        if($outputCount8 == 1){ $outputCount8 = $outputCount8 + 1; }
        if($outputCount9 == 1){ $outputCount9 = $outputCount9 + 1; }
        if($outputCount10 == 1){ $outputCount10 = $outputCount10 + 1; }
        if($outputCount11 == 1){ $outputCount11 = $outputCount11 + 1; }
        if($outputCount12 == 1){ $outputCount12 = $outputCount12 + 1; }
        if($outputCount13 == 1){ $outputCount13 = $outputCount13 + 1; }
        if($outputCount14 == 1){ $outputCount14 = $outputCount14 + 1; }
        if($outputCount15 == 1){ $outputCount15 = $outputCount15 + 1; }
        if($outputCount16 == 1){ $outputCount16 = $outputCount16 + 1; }
        if($outputCount17 == 1){ $outputCount17 = $outputCount17 + 1; }
        if($outputCount18 == 1){ $outputCount18 = $outputCount18 + 1; }

        if( $outputCountOversize == 1){  $outputCountOversize =  $outputCountOversize + 1; }
        if($outputCountPlus40 == 1){ $outputCountPlus40 = $outputCountPlus40 + 1; }
        if($outputCountNeg40Plus70 == 1){ $outputCountNeg40Plus70 = $outputCountNeg40Plus70 + 1; }
        if($outputCountNeg60Plus70 == 1){ $outputCountNeg60Plus70 = $outputCountNeg60Plus70 + 1; }
        if($outputCountNeg70Plus140 == 1){ $outputCountNeg70Plus140 = $outputCountNeg70Plus140 + 1; }
        if($outputCountNeg50Plus140 == 1){ $outputCountNeg50Plus140 = $outputCountNeg50Plus140 + 1; }
        if($outputCountNearSize == 1){ $outputCountNearSize = $outputCountNearSize + 1; }
        if($outputCountNeg140Plus325 == 1){ $outputCountNeg140Plus325 = $outputCountNeg140Plus325 + 1; }
        if($outputCountNeg140 == 1){ $outputCountNeg140 = $outputCountNeg140 + 1; }

        if($outputCount1 > 0){ $arrayOfAveragePercentages[0] = sqrt($sumOfValue1) / ($outputCount1 - 1); }
        if($outputCount2 > 0){ $arrayOfAveragePercentages[1] = sqrt($sumOfValue2) / ($outputCount2 - 1); }
        if($outputCount3 > 0){ $arrayOfAveragePercentages[2] = sqrt( $sumOfValue3) / ($outputCount3 - 1); }
        if($outputCount4 > 0){ $arrayOfAveragePercentages[3] = sqrt( $sumOfValue4) / ($outputCount4 - 1); }
        if($outputCount5 > 0){ $arrayOfAveragePercentages[4] = sqrt( $sumOfValue5) / ($outputCount5 - 1); }
        if($outputCount6 > 0){ $arrayOfAveragePercentages[5] = sqrt( $sumOfValue6) / ($outputCount6 - 1); }
        if($outputCount7 > 0){ $arrayOfAveragePercentages[6] = sqrt( $sumOfValue7) / ($outputCount7 - 1); }
        if($outputCount8 > 0){ $arrayOfAveragePercentages[7] = sqrt( $sumOfValue8) / ($outputCount8 - 1); }
        if($outputCount9 > 0){ $arrayOfAveragePercentages[8] = sqrt( $sumOfValue9) / ($outputCount9 - 1); }
        if($outputCount10 > 0){ $arrayOfAveragePercentages[9] = sqrt( $sumOfValue10) / ($outputCount10 - 1); }
        if($outputCount11 > 0){ $arrayOfAveragePercentages[10] = sqrt( $sumOfValue11) / ($outputCount11 - 1); }
        if($outputCount12 > 0){ $arrayOfAveragePercentages[11] = sqrt( $sumOfValue12) / ($outputCount12 - 1); }
        if($outputCount13 > 0){ $arrayOfAveragePercentages[12] = sqrt( $sumOfValue13) / ($outputCount13 - 1); }
        if($outputCount14 > 0){ $arrayOfAveragePercentages[13] = sqrt( $sumOfValue14) / ($outputCount14 - 1); }
        if($outputCount15 > 0){ $arrayOfAveragePercentages[14] = sqrt( $sumOfValue15) / ($outputCount15 - 1); }
        if($outputCount16 > 0){ $arrayOfAveragePercentages[15] = sqrt( $sumOfValue16) / ($outputCount16 - 1); }
        if($outputCount17 > 0){ $arrayOfAveragePercentages[16] = sqrt( $sumOfValue17) / ($outputCount17 - 1); }
        if($outputCount18 > 0){ $arrayOfAveragePercentages[17] = sqrt( $sumOfValue18) / ($outputCount18 - 1); }

        if($outputCountOversize > 0){ $arrayOfAveragePercentages[18] = sqrt( $sumOfValueOversize) / ($outputCountOversize - 1); }
        if($outputCountPlus40 > 0){ $arrayOfAveragePercentages[19] = sqrt( $sumOfValuePlus40) / ($outputCountPlus40 - 1); }
        if($outputCountNeg40Plus70 > 0){ $arrayOfAveragePercentages[20] = sqrt( $sumOfValueNeg40Plus70) / ($outputCountNeg40Plus70 - 1); }
        if($outputCountNeg60Plus70 > 0){ $arrayOfAveragePercentages[21] = sqrt( $sumOfValueNeg60Plus70) / ($outputCountNeg60Plus70 - 1); }
        if($outputCountNeg70Plus140 > 0){ $arrayOfAveragePercentages[22] = sqrt( $sumOfValueNeg70Plus140) / ($outputCountNeg70Plus140 - 1); }
        if($outputCountNeg50Plus140 > 0){ $arrayOfAveragePercentages[23] = sqrt( $sumOfValueNeg50Plus140) / ($outputCountNeg50Plus140 - 1); }
        if($outputCountNearSize > 0){ $arrayOfAveragePercentages[24] = sqrt( $sumOfValueNearSize) / ($outputCountNearSize - 1); }
        if($outputCountNeg140Plus325 > 0){ $arrayOfAveragePercentages[25] = sqrt( $sumOfValueNeg140Plus325) / ($outputCountNeg140Plus325 - 1); }
        if($outputCountNeg140 > 0){ $arrayOfAveragePercentages[26] = sqrt( $sumOfValueNeg140) / ($outputCountNeg140 - 1); }


        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying/calculating 30 day averages of sample percentages.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }


    return $arrayOfAveragePercentages;
}

/*******************************************************************************
 * Function Name: getDateRangePercentStandardDeviationsBySpecificLocation($argSpecificLocation, $startDate, $endDate)
 * Description:
 * This function will:
 * Accept a parameter with a specific location ID #.
 * Accept start and end dates as parameters.
 * Exclude samples based on certain criteria: exclude samples where void status = V, test type != test, test type != retest
 * Return an array of objects containing averages of sample final percentages.
 * Is used in the QC Overview page data.
 *******************************************************************************/
function getDateRangePercentStandardDeviationsBySpecificLocation($argSpecificLocation, $startDate, $endDate)
{

    $errorMessage = "qcfunctions.php - getDateRangePercentStandardDeviationsBySpecificLocation() ";
    $arrayOfTotalValues = NULL;
    $arrayOfAverageValues = NULL;
    $outputArray = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    $arrayOfAverageValues = getDateRangePercentAveragesBySpecificLocation($argSpecificLocation, $startDate, $endDate);

    $arrayOfSquaredDifferences = NULL;
    $arrayOfDeviationValues = NULL;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        $sql = "Call sp_gb_qc_DateRangePercentSamplesGetBySpecificLocation(" . $argSpecificLocation . ", '" . $startDate . "', '" . $endDate . "')"; //stored procedure method

        $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        //initialize values
        $sumOfValue1 = 0;
        $sumOfValue2 = 0;
        $sumOfValue3 = 0;
        $sumOfValue4 = 0;
        $sumOfValue5 = 0;
        $sumOfValue6 = 0;
        $sumOfValue7 = 0;
        $sumOfValue8 = 0;
        $sumOfValue9 = 0;
        $sumOfValue10 = 0;
        $sumOfValue11 = 0;
        $sumOfValue12 = 0;
        $sumOfValue13 = 0;
        $sumOfValue14 = 0;
        $sumOfValue15 = 0;
        $sumOfValue16 = 0;
        $sumOfValue17 = 0;
        $sumOfValue18 = 0;

        $sumOfValueOversize = 0;
        $sumOfValuePlus40 = 0;
        $sumOfValueNeg40Plus70 = 0;
        $sumOfValueNeg60Plus70 = 0;
        $sumOfValueNeg70Plus140 = 0;
        $sumOfValueNeg50Plus140 = 0;
        $sumOfValueNearSize = 0;
        $sumOfValueNeg140Plus325 = 0;
        $sumOfValueNeg140 = 0;

        $outputCount1 = 0;
        $outputCount2 = 0;
        $outputCount3 = 0;
        $outputCount4 = 0;
        $outputCount5 = 0;
        $outputCount6 = 0;
        $outputCount7 = 0;
        $outputCount8 = 0;
        $outputCount9 = 0;
        $outputCount10 = 0;
        $outputCount11 = 0;
        $outputCount12 = 0;
        $outputCount13 = 0;
        $outputCount14 = 0;
        $outputCount15 = 0;
        $outputCount16 = 0;
        $outputCount17 = 0;
        $outputCount18 = 0;

        $outputCountOversize = 0;
        $outputCountPlus40 = 0;
        $outputCountNeg40Plus70 = 0;
        $outputCountNeg60Plus70 = 0;
        $outputCountNeg70Plus140 = 0;
        $outputCountNeg50Plus140 = 0;
        $outputCountNearSize = 0;
        $outputCountNeg140Plus325 = 0;
        $outputCountNeg140 = 0;

        $arrayOfSquaredDifferences[0] = 0;
        $arrayOfSquaredDifferences[1] = 0;
        $arrayOfSquaredDifferences[2] = 0;
        $arrayOfSquaredDifferences[3] = 0;
        $arrayOfSquaredDifferences[4] = 0;
        $arrayOfSquaredDifferences[5] = 0;
        $arrayOfSquaredDifferences[6] = 0;
        $arrayOfSquaredDifferences[7] = 0;
        $arrayOfSquaredDifferences[8] = 0;
        $arrayOfSquaredDifferences[9] = 0;
        $arrayOfSquaredDifferences[10] = 0;
        $arrayOfSquaredDifferences[11] = 0;
        $arrayOfSquaredDifferences[12] = 0;
        $arrayOfSquaredDifferences[13] = 0;
        $arrayOfSquaredDifferences[14] = 0;
        $arrayOfSquaredDifferences[15] = 0;
        $arrayOfSquaredDifferences[16] = 0;
        $arrayOfSquaredDifferences[17] = 0;

        $arrayOfSquaredDifferences[18] = 0; // +10 (OS)
        $arrayOfSquaredDifferences[19] = 0; //-10+40
        $arrayOfSquaredDifferences[20] = 0; //-40+70
        $arrayOfSquaredDifferences[21] = 0; //-60+70
        $arrayOfSquaredDifferences[22] = 0; //-70 +140
        $arrayOfSquaredDifferences[23] = 0; //-50+140
        $arrayOfSquaredDifferences[24] = 0; //Near Size
        $arrayOfSquaredDifferences[25] = 0; // -140+325
        $arrayOfSquaredDifferences[26] = 0; //-140

        $arrayOfDeviationValues[0] = 0;
        $arrayOfDeviationValues[1] = 0;
        $arrayOfDeviationValues[2] = 0;
        $arrayOfDeviationValues[3] = 0;
        $arrayOfDeviationValues[4] = 0;
        $arrayOfDeviationValues[5] = 0;
        $arrayOfDeviationValues[6] = 0;
        $arrayOfDeviationValues[7] = 0;
        $arrayOfDeviationValues[8] = 0;
        $arrayOfDeviationValues[9] = 0;
        $arrayOfDeviationValues[10] = 0;
        $arrayOfDeviationValues[11] = 0;
        $arrayOfDeviationValues[12] = 0;
        $arrayOfDeviationValues[13] = 0;
        $arrayOfDeviationValues[14] = 0;
        $arrayOfDeviationValues[15] = 0;
        $arrayOfDeviationValues[16] = 0;
        $arrayOfDeviationValues[17] = 0;

        while($row = $result->fetch_assoc())
        {
            if(checkIfSampleIsComplete($row['id']) == 1) //only include the sample in the data if the sample is complete
            {

                //increase the array of total deviations values

                if(($row['sieve_1_value'] != NULL) && ($row['sieve_1_value'] != 0))
                {
                    $arrayOfSquaredDifferences[0] = $arrayOfSquaredDifferences[0] + pow(($row['sieve_1_value'] - $arrayOfAverageValues[0]),2);
                    $outputCount1++;
                }

                if(($row['sieve_2_value'] != NULL) && ($row['sieve_2_value'] != 0))
                {
                    $arrayOfSquaredDifferences[1] = $arrayOfSquaredDifferences[1] + pow(($row['sieve_2_value'] - $arrayOfAverageValues[1]),2);
                    $outputCount2++;
                }

                if(($row['sieve_3_value'] != NULL) && ($row['sieve_3_value'] != 0))
                {
                    $arrayOfSquaredDifferences[2] = $arrayOfSquaredDifferences[2] + pow(($row['sieve_3_value'] - $arrayOfAverageValues[2]),2);
                    $outputCount3++;
                }

                if(($row['sieve_4_value'] != NULL) && ($row['sieve_4_value'] != 0))
                {
                    $arrayOfSquaredDifferences[3] = $arrayOfSquaredDifferences[3] + pow(($row['sieve_4_value'] - $arrayOfAverageValues[3]),2);
                    $outputCount4++;
                }

                if(($row['sieve_5_value'] != NULL) && ($row['sieve_5_value'] != 0))
                {
                    $arrayOfSquaredDifferences[4] = $arrayOfSquaredDifferences[4] + pow(($row['sieve_5_value'] - $arrayOfAverageValues[4]),2);
                    $outputCount5++;
                }

                if(($row['sieve_6_value'] != NULL) && ($row['sieve_6_value'] != 0))
                {
                    $arrayOfSquaredDifferences[5] = $arrayOfSquaredDifferences[5] + pow(($row['sieve_6_value'] - $arrayOfAverageValues[5]),2);
                    $outputCount6++;
                }

                if(($row['sieve_7_value'] != NULL) && ($row['sieve_7_value'] != 0))
                {
                    $arrayOfSquaredDifferences[6] = $arrayOfSquaredDifferences[6] + pow(($row['sieve_7_value'] - $arrayOfAverageValues[6]),2);
                    $outputCount7++;
                }

                if(($row['sieve_8_value'] != NULL) && ($row['sieve_8_value'] != 0))
                {
                    $arrayOfSquaredDifferences[7] = $arrayOfSquaredDifferences[7] + pow(($row['sieve_8_value'] - $arrayOfAverageValues[7]),2);
                    $outputCount8++;
                }

                if(($row['sieve_9_value'] != NULL) && ($row['sieve_9_value'] != 0))
                {
                    $arrayOfSquaredDifferences[8] = $arrayOfSquaredDifferences[8] + pow(($row['sieve_9_value'] - $arrayOfAverageValues[8]),2);
                    $outputCount9++;
                }

                if(($row['sieve_10_value'] != NULL) && ($row['sieve_10_value'] != 0))
                {
                    $arrayOfSquaredDifferences[9] = $arrayOfSquaredDifferences[9] + pow(($row['sieve_10_value'] - $arrayOfAverageValues[9]),2);
                    $outputCount10++;
                }

                if(($row['sieve_11_value'] != NULL) && ($row['sieve_11_value'] != 0))
                {
                    $arrayOfSquaredDifferences[10] = $arrayOfSquaredDifferences[10] + pow(($row['sieve_11_value'] - $arrayOfAverageValues[10]),2);
                    $outputCount11++;
                }

                if(($row['sieve_12_value'] != NULL) && ($row['sieve_12_value'] != 0))
                {
                    $arrayOfSquaredDifferences[11] = $arrayOfSquaredDifferences[11] + pow(($row['sieve_12_value'] - $arrayOfAverageValues[11]),2);
                    $outputCount12++;
                }

                if(($row['sieve_13_value'] != NULL) && ($row['sieve_13_value'] != 0))
                {
                    $arrayOfSquaredDifferences[12] = $arrayOfSquaredDifferences[12] + pow(($row['sieve_13_value'] - $arrayOfAverageValues[12]),2);
                    $outputCount13++;
                }

                if(($row['sieve_14_value'] != NULL) && ($row['sieve_14_value'] != 0))
                {
                    $arrayOfSquaredDifferences[13] = $arrayOfSquaredDifferences[13] + pow(($row['sieve_14_value'] - $arrayOfAverageValues[13]),2);
                    $outputCount14++;
                }

                if(($row['sieve_15_value'] != NULL) && ($row['sieve_15_value'] != 0))
                {
                    $arrayOfSquaredDifferences[14] = $arrayOfSquaredDifferences[14] + pow(($row['sieve_15_value'] - $arrayOfAverageValues[14]),2);
                    $outputCount15++;
                }

                if(($row['sieve_16_value'] != NULL) && ($row['sieve_16_value'] != 0))
                {
                    $arrayOfSquaredDifferences[15] = $arrayOfSquaredDifferences[15] + pow(($row['sieve_16_value'] - $arrayOfAverageValues[15]),2);
                    $outputCount16++;
                }

                if(($row['sieve_17_value'] != NULL) && ($row['sieve_17_value'] != 0))
                {
                    $arrayOfSquaredDifferences[16] = $arrayOfSquaredDifferences[16] + pow(($row['sieve_17_value'] - $arrayOfAverageValues[16]),2);
                    $outputCount17++;
                }

                if(($row['sieve_18_value'] != NULL) && ($row['sieve_18_value'] != 0))
                {
                    $arrayOfSquaredDifferences[17] = $arrayOfSquaredDifferences[17] + pow(($row['sieve_18_value'] - $arrayOfAverageValues[17]),2);
                    $outputCount18++;
                }

                //sieve ranges
                if(($row['oversize_percent'] != NULL) && ($row['oversize_percent'] != 0))
                {
                    $arrayOfSquaredDifferences[18] = $arrayOfSquaredDifferences[18] + pow(($row['oversize_percent'] - $arrayOfAverageValues[18]),2);
                    $outputCountOversize++;
                }

                if(($row['plus_40'] != NULL) && ($row['plus_40'] != 0))
                {
                    $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($row['plus_40'] - $arrayOfAverageValues[19]),2);
                    $outputCountPlus40++;
                }

                if(($row['minus_40_plus_70'] != NULL) && ($row['minus_40_plus_70'] != 0))
                {
                    $arrayOfSquaredDifferences[20] = $arrayOfSquaredDifferences[20] + pow(($row['minus_40_plus_70'] - $arrayOfAverageValues[20]),2);
                    $outputCountNeg40Plus70++;
                }

                if(($row['minus_60_plus_70'] != NULL) && ($row['minus_60_plus_70'] != 0))
                {
                    $arrayOfSquaredDifferences[21] = $arrayOfSquaredDifferences[21] + pow(($row['minus_60_plus_70'] - $arrayOfAverageValues[21]),2);
                    $outputCountNeg60Plus70++;
                }

                if(($row['minus_70_plus_140'] != NULL) && ($row['minus_70_plus_140'] != 0))
                {
                    $arrayOfSquaredDifferences[22] = $arrayOfSquaredDifferences[22] + pow(($row['minus_70_plus_140'] - $arrayOfAverageValues[22]),2);
                    $outputCountNeg70Plus140++;
                }

                if(($row['minus_50_plus_140'] != NULL) && ($row['minus_50_plus_140'] != 0))
                {
                    $arrayOfSquaredDifferences[23] = $arrayOfSquaredDifferences[23] + pow(($row['minus_50_plus_140'] - $arrayOfAverageValues[23]),2);
                    $outputCountNeg50Plus140++;
                }

                if(($row['near_size'] != NULL) && ($row['near_size'] != 0))
                {
                    $arrayOfSquaredDifferences[24] = $arrayOfSquaredDifferences[24] + pow(($row['near_size'] - $arrayOfAverageValues[24]),2);
                    $outputCountNearSize++;
                }

                if(($row['minus_140_plus_325'] != NULL) && ($row['minus_140_plus_325'] != 0))
                {
                    $arrayOfSquaredDifferences[25] = $arrayOfSquaredDifferences[25] + pow(($row['minus_140_plus_325'] - $arrayOfAverageValues[25]),2);
                    $outputCountNeg140Plus325++;
                }

                if(($row['minus_140'] != NULL) && ($row['minus_140'] != 0))
                {
                    $arrayOfSquaredDifferences[26] = $arrayOfSquaredDifferences[26] + pow(($row['minus_140'] - $arrayOfAverageValues[26]),2);
                    $outputCountNeg140++;
                }


            }
        }

        if($outputCount1 > 0) { $arrayOfDeviationValues[0] = sqrt($arrayOfSquaredDifferences[0] / $outputCount1); }
        if($outputCount2 > 0) { $arrayOfDeviationValues[1] = sqrt($arrayOfSquaredDifferences[1] / $outputCount2); }
        if($outputCount3 > 0) { $arrayOfDeviationValues[2] = sqrt($arrayOfSquaredDifferences[2] / $outputCount3); }
        if($outputCount4 > 0) { $arrayOfDeviationValues[3] = sqrt($arrayOfSquaredDifferences[3] / $outputCount4); }
        if($outputCount5 > 0) { $arrayOfDeviationValues[4] = sqrt($arrayOfSquaredDifferences[4] / $outputCount5); }
        if($outputCount6 > 0) { $arrayOfDeviationValues[5] = sqrt($arrayOfSquaredDifferences[5] / $outputCount6); }
        if($outputCount7 > 0) { $arrayOfDeviationValues[6] = sqrt($arrayOfSquaredDifferences[6] / $outputCount7); }
        if($outputCount8 > 0) { $arrayOfDeviationValues[7] = sqrt($arrayOfSquaredDifferences[7] / $outputCount8); }
        if($outputCount9 > 0) { $arrayOfDeviationValues[8] = sqrt($arrayOfSquaredDifferences[8] / $outputCount9); }
        if($outputCount10 > 0) { $arrayOfDeviationValues[9] = sqrt($arrayOfSquaredDifferences[9] / $outputCount10); }
        if($outputCount11 > 0) { $arrayOfDeviationValues[10] = sqrt($arrayOfSquaredDifferences[10] / $outputCount11); }
        if($outputCount12 > 0) { $arrayOfDeviationValues[11] = sqrt($arrayOfSquaredDifferences[11] / $outputCount12); }
        if($outputCount13 > 0) { $arrayOfDeviationValues[12] = sqrt($arrayOfSquaredDifferences[12] / $outputCount13); }
        if($outputCount14 > 0) { $arrayOfDeviationValues[13] = sqrt($arrayOfSquaredDifferences[13] / $outputCount14); }
        if($outputCount15 > 0) { $arrayOfDeviationValues[14] = sqrt($arrayOfSquaredDifferences[14] / $outputCount15); }
        if($outputCount16 > 0) { $arrayOfDeviationValues[15] = sqrt($arrayOfSquaredDifferences[15] / $outputCount16); }
        if($outputCount17 > 0) { $arrayOfDeviationValues[16] = sqrt($arrayOfSquaredDifferences[16] / $outputCount17); }
        if($outputCount18 > 0) { $arrayOfDeviationValues[17] = sqrt($arrayOfSquaredDifferences[17] / $outputCount18); }

        //sieve ranges
        if($outputCountOversize > 0) { $arrayOfDeviationValues[18] = sqrt($arrayOfSquaredDifferences[18] / $outputCountOversize); }
        if($outputCountPlus40 > 0) { $arrayOfDeviationValues[19] = sqrt($arrayOfSquaredDifferences[19] / $outputCountPlus40); }
        if($outputCountNeg40Plus70 > 0) { $arrayOfDeviationValues[20] = sqrt($arrayOfSquaredDifferences[20] / $outputCountNeg40Plus70); }
        if($outputCountNeg60Plus70 > 0) { $arrayOfDeviationValues[21] = sqrt($arrayOfSquaredDifferences[21] / $outputCountNeg60Plus70); }
        if($outputCountNeg70Plus140 > 0) { $arrayOfDeviationValues[22] = sqrt($arrayOfSquaredDifferences[22] / $outputCountNeg70Plus140); }
        if($outputCountNeg50Plus140 > 0) { $arrayOfDeviationValues[23] = sqrt($arrayOfSquaredDifferences[23] / $outputCountNeg50Plus140); }
        if($outputCountNearSize > 0) { $arrayOfDeviationValues[24] = sqrt($arrayOfSquaredDifferences[24] / $outputCountNearSize); }
        if($outputCountNeg140Plus325 > 0) { $arrayOfDeviationValues[25] = sqrt($arrayOfSquaredDifferences[25] / $outputCountNeg140Plus325); }
        if($outputCountNeg140 > 0) { $arrayOfDeviationValues[26] = sqrt($arrayOfSquaredDifferences[26] / $outputCountNeg140); }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying/calculating standard deviations of sample values.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $arrayOfDeviationValues;
}


/*******************************************************************************
 * Function Name: getDateRangePercentMaxBySpecificLocation($argSpecificLocation, $startDate, $endDate)
 * Description:
 * This function will:
 * Accept a parameter with a location ID #.
 * Accept start and end date parameters.
 * Exclude samples based on certain criteria: exclude samples where void status = V, test type != test, test type != retest
 * Return an array of objects containing averages of sample final percentages.
 * Is used in the QC Overview page data.
 *******************************************************************************/
function getDateRangePercentMaxBySpecificLocation($argSpecificLocation, $startDate, $endDate)
{

    $errorMessage = "qcfunctions.php -  getDateRangePercentMaxBySpecificLocation() ";
    $arrayOfMaxValues = NULL;
    $outputArray = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //select the samples from the location and time period
        /*
    $sql = "SELECT gb_qc_samples.id, DATE_FORMAT(gb_qc_samples.date, '%Y-%m-%d') as 'date', gb_qc_finalpercentages.finalpercent1, gb_qc_finalpercentages.finalpercent2, gb_qc_finalpercentages.finalpercent3, gb_qc_finalpercentages.finalpercent4, gb_qc_finalpercentages.finalpercent5, gb_qc_finalpercentages.finalpercent6, gb_qc_finalpercentages.finalpercent7, gb_qc_finalpercentages.finalpercent8, gb_qc_finalpercentages.finalpercent9, gb_qc_finalpercentages.finalpercent10, gb_qc_finalpercentages.finalpercent11, gb_qc_finalpercentages.finalpercent12, gb_qc_finalpercentages.finalpercent13, gb_qc_finalpercentages.finalpercent14, gb_qc_finalpercentages.finalpercent15, gb_qc_finalpercentages.finalpercent16, gb_qc_finalpercentages.finalpercent17, gb_qc_finalpercentages.finalpercent18, gb_qc_samples.plus_70, gb_qc_samples.minus_40_plus_70, gb_qc_samples.minus_70, gb_qc_samples.minus_70_plus_140, gb_qc_samples.plus_140, gb_qc_samples.minus_140 "
    . "FROM gb_qc_samples "
    . "LEFT JOIN gb_qc_finalpercentages ON gb_qc_samples.id = gb_qc_finalpercentages.sample_id "
    . "WHERE test_type_id > 1 AND test_type_id < 4 AND void_status_code != 'V' AND location_id = $argSpecificLocation AND sieve_method_id is NOT NULL AND date >= '" . $startDate . "' AND date <= '" . $endDate . "'"; //direct SQL method
    */

        $sql = "Call sp_gb_qc_DateRangePercentSamplesGetBySpecificLocation(" . $argSpecificLocation . ", '" . $startDate . "', '" . $endDate . "')"; //stored procedure method

        $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        //initialize values
        $arrayOfMaxValues[0] = 0;
        $arrayOfMaxValues[1] = 0;
        $arrayOfMaxValues[2] = 0;
        $arrayOfMaxValues[3] = 0;
        $arrayOfMaxValues[4] = 0;
        $arrayOfMaxValues[5] = 0;
        $arrayOfMaxValues[6] = 0;
        $arrayOfMaxValues[7] = 0;
        $arrayOfMaxValues[8] = 0;
        $arrayOfMaxValues[9] = 0;
        $arrayOfMaxValues[10] = 0;
        $arrayOfMaxValues[11] = 0;
        $arrayOfMaxValues[12] = 0;
        $arrayOfMaxValues[13] = 0;
        $arrayOfMaxValues[14] = 0;
        $arrayOfMaxValues[15] = 0;
        $arrayOfMaxValues[16] = 0;
        $arrayOfMaxValues[17] = 0;

        $arrayOfMinimumPercentages[18] = 0; // +10 (OS)
        $arrayOfMinimumPercentages[19] = 0; //-10+40
        $arrayOfMinimumPercentages[20] = 0; //-40+70
        $arrayOfMinimumPercentages[21] = 0; //-60+70
        $arrayOfMinimumPercentages[22] = 0; //-70 +140
        $arrayOfMinimumPercentages[23] = 0; //-50+140
        $arrayOfMinimumPercentages[24] = 0; //Near Size
        $arrayOfMinimumPercentages[25] = 0; // -140+325
        $arrayOfMinimumPercentages[26] = 0; //-140

        while($row = $result->fetch_assoc())
        {
            if(checkIfSampleIsComplete($row['id']) == 1) //only include the sample in the data if the sample is complete
            {

                if($row['sieve_1_value'] != NULL)
                {
                    if($row['sieve_1_value'] > $arrayOfMaxValues[0])
                    {
                        $arrayOfMaxValues[0] = $row['sieve_1_value'];
                    }
                }

                if($row['sieve_2_value'] != NULL)
                {
                    if($row['sieve_2_value'] > $arrayOfMaxValues[1])
                    {
                        $arrayOfMaxValues[1] = $row['sieve_2_value'];
                    }
                }

                if($row['sieve_3_value'] != NULL)
                {
                    if($row['sieve_3_value'] > $arrayOfMaxValues[2])
                    {
                        $arrayOfMaxValues[2] = $row['sieve_3_value'];
                    }
                }

                if($row['sieve_4_value'] != NULL)
                {
                    if($row['sieve_4_value'] > $arrayOfMaxValues[3])
                    {
                        $arrayOfMaxValues[3] = $row['sieve_4_value'];
                    }
                }

                if($row['sieve_5_value'] != NULL)
                {
                    if($row['sieve_5_value'] > $arrayOfMaxValues[4])
                    {
                        $arrayOfMaxValues[4] = $row['sieve_5_value'];
                    }
                }

                if($row['sieve_6_value'] != NULL)
                {
                    if($row['sieve_6_value'] > $arrayOfMaxValues[5])
                    {
                        $arrayOfMaxValues[5] = $row['sieve_6_value'];
                    }
                }

                if($row['sieve_7_value'] != NULL)
                {
                    if($row['sieve_7_value'] > $arrayOfMaxValues[6])
                    {
                        $arrayOfMaxValues[6] = $row['sieve_7_value'];
                    }
                }

                if($row['sieve_8_value'] != NULL)
                {
                    if($row['sieve_8_value'] > $arrayOfMaxValues[7])
                    {
                        $arrayOfMaxValues[7] = $row['sieve_8_value'];
                    }
                }

                if($row['sieve_9_value'] != NULL)
                {
                    if($row['sieve_9_value'] > $arrayOfMaxValues[8])
                    {
                        $arrayOfMaxValues[8] = $row['sieve_9_value'];
                    }
                }

                if($row['sieve_10_value'] != NULL)
                {
                    if($row['sieve_10_value'] > $arrayOfMaxValues[9])
                    {
                        $arrayOfMaxValues[9] = $row['sieve_10_value'];
                    }
                }


                if($row['sieve_11_value'] != NULL)
                {
                    if($row['sieve_11_value'] > $arrayOfMaxValues[10])
                    {
                        $arrayOfMaxValues[10] = $row['sieve_11_value'];
                    }
                }

                if($row['sieve_12_value'] != NULL)
                {
                    if($row['sieve_12_value'] > $arrayOfMaxValues[11])
                    {
                        $arrayOfMaxValues[11] = $row['sieve_12_value'];
                    }
                }

                if($row['sieve_13_value'] != NULL)
                {
                    if($row['sieve_13_value'] > $arrayOfMaxValues[12])
                    {
                        $arrayOfMaxValues[12] = $row['sieve_13_value'];
                    }
                }

                if($row['sieve_14_value'] != NULL)
                {
                    if($row['sieve_14_value'] > $arrayOfMaxValues[13])
                    {
                        $arrayOfMaxValues[13] = $row['sieve_14_value'];
                    }
                }

                if($row['sieve_15_value'] != NULL)
                {
                    if($row['sieve_15_value'] > $arrayOfMaxValues[14])
                    {
                        $arrayOfMaxValues[14] = $row['sieve_15_value'];
                    }
                }

                if($row['sieve_16_value'] != NULL)
                {
                    if($row['sieve_16_value'] > $arrayOfMaxValues[15])
                    {
                        $arrayOfMaxValues[15] = $row['sieve_16_value'];
                    }
                }

                if($row['sieve_17_value'] != NULL)
                {
                    if($row['sieve_17_value'] > $arrayOfMaxValues[16])
                    {
                        $arrayOfMaxValues[16] = $row['sieve_17_value'];
                    }
                }

                if($row['sieve_18_value'] != NULL)
                {

                    if($row['sieve_17_value'] > $arrayOfMaxValues[17])
                    {
                        $arrayOfMaxValues[17] = $row['sieve_17_value'];
                    }
                }

                //sieve ranges
                if($row['oversize_percent'] != NULL)
                {

                    if($row['oversize_percent'] > $arrayOfMaxValues[18])
                    {
                        $arrayOfMaxValues[18] = $row['oversize_percent'];
                    }
                }

                if($row['plus_40'] != NULL)
                {

                    if($row['plus_40'] > $arrayOfMaxValues[19])
                    {
                        $arrayOfMaxValues[19] = $row['plus_40'];
                    }
                }

                if($row['minus_40_plus_70'] != NULL)
                {

                    if($row['minus_40_plus_70'] > $arrayOfMaxValues[20])
                    {
                        $arrayOfMaxValues[20] = $row['minus_40_plus_70'];
                    }
                }

                if($row['minus_60_plus_70'] != NULL)
                {

                    if($row['minus_60_plus_70'] > $arrayOfMaxValues[21])
                    {
                        $arrayOfMaxValues[21] = $row['minus_60_plus_70'];
                    }
                }

                if($row['minus_70_plus_140'] != NULL)
                {
                    if($row['minus_70_plus_140'] > $arrayOfMaxValues[22])
                    {
                        $arrayOfMaxValues[22] = $row['minus_70_plus_140'];
                    }
                }

                if($row['minus_50_plus_140'] != NULL)
                {
                    if($row['minus_50_plus_140'] > $arrayOfMaxValues[23])
                    {
                        $arrayOfMaxValues[23] = $row['minus_50_plus_140'];
                    }
                }

                if($row['near_size'] != NULL)
                {
                    if($row['near_size'] > $arrayOfMaxValues[24])
                    {
                        $arrayOfMaxValues[24] = $row['near_size'];
                    }
                }

                if($row['minus_140_plus_325'] != NULL)
                {
                    if($row['minus_140_plus_325'] > $arrayOfMaxValues[25])
                    {
                        $arrayOfMaxValues[25] = $row['minus_140_plus_325'];
                    }
                }

                if($row['minus_140'] != NULL)
                {
                    if($row['minus_140'] > $arrayOfMaxValues[26])
                    {
                        $arrayOfMaxValues[26] = $row['minus_140'];
                    }
                }
            }
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying/calculating 30 day maximums of sample percentages.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $arrayOfMaxValues;
}


/*******************************************************************************
 * Function Name: getDateRangePercentMinBySpecificLocation($argSpecificLocation, $startDate, $endDate)
 * Description:
 * This function will:
 * Accept a parameter with a specific location ID #.
 * Exclude samples based on certain criteria: exclude samples where void status = V, test type != test, test type != retest
 * Return an array of objects containing averages of sample final percentages.
 * Is used in the QC Overview page data.
 *******************************************************************************/
function getDateRangePercentMinBySpecificLocation($argSpecificLocation, $startDate, $endDate)
{

    $errorMessage = "qcfunctions.php -  getDateRangePercentMinBySpecificLocation() ";
    $arrayOfMinValues = NULL;
    $outputArray = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        //select the samples from the location and time period
        /*
    $sql = "SELECT gb_qc_samples.id, DATE_FORMAT(gb_qc_samples.date, '%Y-%m-%d') as 'date', gb_qc_finalpercentages.finalpercent1, gb_qc_finalpercentages.finalpercent2, gb_qc_finalpercentages.finalpercent3, gb_qc_finalpercentages.finalpercent4, gb_qc_finalpercentages.finalpercent5, gb_qc_finalpercentages.finalpercent6, gb_qc_finalpercentages.finalpercent7, gb_qc_finalpercentages.finalpercent8, gb_qc_finalpercentages.finalpercent9, gb_qc_finalpercentages.finalpercent10, gb_qc_finalpercentages.finalpercent11, gb_qc_finalpercentages.finalpercent12, gb_qc_finalpercentages.finalpercent13, gb_qc_finalpercentages.finalpercent14, gb_qc_finalpercentages.finalpercent15, gb_qc_finalpercentages.finalpercent16, gb_qc_finalpercentages.finalpercent17, gb_qc_finalpercentages.finalpercent18, gb_qc_samples.plus_70, gb_qc_samples.minus_40_plus_70, gb_qc_samples.minus_70, gb_qc_samples.minus_70_plus_140, gb_qc_samples.plus_140, gb_qc_samples.minus_140 "
    . "FROM gb_qc_samples "
    . "LEFT JOIN gb_qc_finalpercentages ON gb_qc_samples.id = gb_qc_finalpercentages.sample_id "
    . "WHERE test_type_id > 1 AND test_type_id < 4 AND void_status_code != 'V' AND specific_location_id = $argSpecificLocation AND sieve_method_id is NOT NULL AND date >= '" . $startDate . "' AND date <= '" . $endDate . "'"; //direct SQL method
    */

        $sql = "Call sp_gb_qc_DateRangePercentSamplesGetBySpecificLocation(" . $argSpecificLocation . ", '" . $startDate . "', '" . $endDate . "')"; //stored procedure method

        //echo "SQL : " . $sql;

        $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        //initialize values
        $arrayOfMinValues[0] = 1;
        $arrayOfMinValues[1] = 1;
        $arrayOfMinValues[2] = 1;
        $arrayOfMinValues[3] = 1;
        $arrayOfMinValues[4] = 1;
        $arrayOfMinValues[5] = 1;
        $arrayOfMinValues[6] = 1;
        $arrayOfMinValues[7] = 1;
        $arrayOfMinValues[8] = 1;
        $arrayOfMinValues[9] = 1;
        $arrayOfMinValues[10] = 1;
        $arrayOfMinValues[11] = 1;
        $arrayOfMinValues[12] = 1;
        $arrayOfMinValues[13] = 1;
        $arrayOfMinValues[14] = 1;
        $arrayOfMinValues[15] = 1;
        $arrayOfMinValues[16] = 1;
        $arrayOfMinValues[17] = 1;

        $arrayOfMinValues[18] = 1; // +10 (OS)
        $arrayOfMinValues[19] = 1; //-10+40
        $arrayOfMinValues[20] = 1; //-40+70
        $arrayOfMinValues[21] = 1; //-60+70
        $arrayOfMinValues[22] = 1; //-70 +140
        $arrayOfMinValues[23] = 1; //-50+140
        $arrayOfMinValues[24] = 1; //Near Size
        $arrayOfMinValues[25] = 1; // -140+325
        $arrayOfMinValues[26] = 1; //-140

        $arrayOfMaxValues = NULL;

        while($row = $result->fetch_assoc())
        {
            if(checkIfSampleIsComplete($row['id']) == 1) //only include the sample in the data if the sample is complete
            {
                if(($row['sieve_1_value'] != NULL) && ($row['sieve_1_value'] != 0))
                {
                    if($row['sieve_1_value'] < $arrayOfMinValues[0])
                    {
                        $arrayOfMinValues[0] = $row['sieve_1_value'];
                    }
                }

                if(($row['sieve_2_value'] != NULL) && ($row['sieve_2_value'] != 0))
                {
                    if($row['sieve_2_value'] < $arrayOfMinValues[1])
                    {
                        $arrayOfMinValues[1] = $row['sieve_2_value'];
                    }
                }

                if(($row['sieve_3_value'] != NULL) && ($row['sieve_3_value'] != 0))
                {
                    if($row['sieve_3_value'] < $arrayOfMinValues[2])
                    {
                        $arrayOfMinValues[2] = $row['sieve_3_value'];
                    }
                }

                if(($row['sieve_4_value'] != NULL) && ($row['sieve_4_value'] != 0))
                {
                    if($row['sieve_4_value'] < $arrayOfMinValues[3])
                    {
                        $arrayOfMinValues[3] = $row['sieve_4_value'];
                    }
                }

                if(($row['sieve_5_value'] != NULL) && ($row['sieve_5_value'] != 0))
                {
                    if($row['sieve_5_value'] < $arrayOfMinValues[4])
                    {
                        $arrayOfMinValues[4] = $row['sieve_5_value'];
                    }
                }

                if(($row['sieve_6_value'] != NULL) && ($row['sieve_6_value'] != 0))
                {
                    if($row['sieve_6_value'] < $arrayOfMinValues[5])
                    {
                        $arrayOfMinValues[5] = $row['sieve_6_value'];
                    }
                }

                if(($row['sieve_7_value'] != NULL) && ($row['sieve_7_value'] != 0))
                {
                    if($row['sieve_7_value'] < $arrayOfMinValues[6])
                    {
                        $arrayOfMinValues[6] = $row['sieve_7_value'];
                    }
                }

                if(($row['sieve_8_value'] != NULL) && ($row['sieve_8_value'] != 0))
                {
                    if($row['sieve_8_value'] < $arrayOfMinValues[7])
                    {
                        $arrayOfMinValues[7] = $row['sieve_8_value'];
                    }
                }

                if(($row['sieve_9_value'] != NULL) && ($row['sieve_9_value'] != 0))
                {
                    if($row['sieve_9_value'] < $arrayOfMinValues[8])
                    {
                        $arrayOfMinValues[8] = $row['sieve_9_value'];
                    }
                }

                if(($row['sieve_10_value'] != NULL) && ($row['sieve_10_value'] != 0))
                {
                    if($row['sieve_10_value'] < $arrayOfMinValues[9])
                    {
                        $arrayOfMinValues[9] = $row['sieve_10_value'];
                    }
                }

                if(($row['sieve_11_value'] != NULL) && ($row['sieve_11_value'] != 0))
                {
                    if($row['sieve_11_value'] < $arrayOfMinValues[10])
                    {
                        $arrayOfMinValues[10] = $row['sieve_11_value'];
                    }
                }

                if(($row['sieve_12_value'] != NULL) && ($row['sieve_12_value'] != 0))
                {
                    if($row['sieve_12_value'] < $arrayOfMinValues[11])
                    {
                        $arrayOfMinValues[11] = $row['sieve_12_value'];
                    }
                }

                if(($row['sieve_13_value'] != NULL) && ($row['sieve_13_value'] != 0))
                {
                    if($row['sieve_13_value'] < $arrayOfMinValues[12])
                    {
                        $arrayOfMinValues[12] = $row['sieve_13_value'];
                    }
                }

                if(($row['sieve_14_value'] != NULL) && ($row['sieve_14_value'] != 0))
                {
                    if($row['sieve_14_value'] < $arrayOfMinValues[13])
                    {
                        $arrayOfMinValues[13] = $row['sieve_14_value'];
                    }
                }

                if(($row['sieve_15_value'] != NULL) && ($row['sieve_15_value'] != 0))
                {
                    if($row['sieve_15_value'] < $arrayOfMinValues[14])
                    {
                        $arrayOfMinValues[14] = $row['sieve_15_value'];
                    }
                }

                if(($row['sieve_16_value'] != NULL) && ($row['sieve_16_value'] != 0))
                {
                    if($row['sieve_16_value'] < $arrayOfMinValues[15])
                    {
                        $arrayOfMinValues[15] = $row['sieve_16_value'];
                    }
                }

                if(($row['sieve_17_value'] != NULL) && ($row['sieve_17_value'] != 0))
                {
                    if($row['sieve_17_value'] < $arrayOfMinValues[16])
                    {
                        $arrayOfMinValues[16] = $row['sieve_17_value'];
                    }
                }

                if(($row['sieve_18_value'] != NULL) && ($row['sieve_18_value'] != 0))
                {
                    if($row['sieve_18_value'] < $arrayOfMinValues[17])
                    {
                        $arrayOfMinValues[17] = $row['sieve_18_value'];
                    }
                }
                //sieve ranges
                if(($row['oversize_percent'] != NULL) && ($row['oversize_percent'] != 0))
                {
                    if($row['oversize_percent'] < $arrayOfMinValues[18])
                    {
                        $arrayOfMinValues[18] = $row['oversize_percent'];
                    }
                }

                //+40
                if(($row['plus_40'] != NULL) && ($row['plus_40'] != 0))
                {
                    if($row['plus_40'] < $arrayOfMinValues[19])
                    {
                        $arrayOfMinValues[19] = $row['plus_40'];
                    }
                }

                //-40+70
                if(($row['minus_40_plus_70'] != NULL) && ($row['minus_40_plus_70'] != 0))
                {
                    if($row['minus_40_plus_70'] < $arrayOfMinValues[20])
                    {
                        $arrayOfMinValues[20] = $row['minus_40_plus_70'];
                    }
                }

                //-140
                if(($row['minus_60_plus_70'] != NULL) && ($row['minus_60_plus_70'] != 0))
                {
                    if($row['minus_60_plus_70'] < $arrayOfMinValues[21])
                    {
                        $arrayOfMinValues[21] = $row['minus_60_plus_70'];
                    }
                }

                //-70 +140
                if(($row['minus_70_plus_140'] != NULL) && ($row['minus_70_plus_140'] != 0))
                {
                    if($row['minus_70_plus_140'] < $arrayOfMinValues[22])
                    {
                        $arrayOfMinValues[22] = $row['minus_70_plus_140'];
                    }
                }

                //-50 +140
                if(($row['minus_50_plus_140'] != NULL) && ($row['minus_50_plus_140'] != 0))
                {
                    if($row['minus_50_plus_140'] < $arrayOfMinValues[23])
                    {
                        $arrayOfMinValues[23] = $row['minus_50_plus_140'];
                    }
                }

                //near size
                 if(($row['near_size'] != NULL) && ($row['near_size'] != 0))
                 {
                     if($row['near_size'] < $arrayOfMinValues[24])
                     {
                         $arrayOfMinValues[24] = $row['near_size'];
                     }
                 }

                 //-140+325
                 if(($row['minus_140_plus_325'] != NULL) && ($row['minus_140_plus_325'] != 0))
                 {
                     if($row['minus_140_plus_325'] < $arrayOfMinValues[25])
                     {
                         $arrayOfMinValues[25] = $row['minus_140_plus_325'];
                     }
                 }

                 //-140
                  if(($row['minus_140'] != NULL) && ($row['minus_140'] != 0))
                  {
                      if($row['minus_140'] < $arrayOfMinValues[26])
                      {
                          $arrayOfMinValues[26] = $row['minus_140'];
                      }
                  }
            }
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying/calculating minimums of sample percentages by Specific Location.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $arrayOfMinValues;
}


/*******************************************************************************
 * Function Name: getSamplesByFilters($argStartDate, $argEndDate, $argStartRow, $argResultsPerPage, $argIsComplete, $argTestTypeIDs, $argCompositeTypeIDs, $argShift, $argLabTechIDs, $argSamplerIDs, $argOperatorIDs, $argSiteIDs, $argPlantIDs, $argLocationIDs, $argSpecificLocationIDs, $argVoidStatusCodes, $argIsCOA)
 * Description:
 * This function will:
 * Accept start and stop dates as parameters.
 * Accept the start Row and Range as parameters
 * Returns an array of objects containing sample information within the date range.
 * Includes voided samples.
 *******************************************************************************/
function getSamplesByFilters($argStartDate, $argEndDate, $argStartRow, $argResultsPerPage, $argIsComplete, $argTestTypeIDs, $argCompositeTypeIDs, $argShift, $argLabTechIDs, $argSamplerIDs, $argOperatorIDs, $argSiteIDs, $argPlantIDs, $argLocationIDs, $argSpecificLocationIDs, $argVoidStatusCodes, $argIsCOA)
{
    $errorMessage = "gb_qcfunctions.php - getSamplesByFilters() ";
    $arrayOfSamples = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    //$argShift
    if(strlen($argShift) == 0)
    {
        $minTime = "00:00:00";
        $maxTime = "23:59:59";
    }
    else
    {
        //add code here
        if($argShift == "day")
        {
            //dev note: adjust this time
            $minTime = "06:00:00";
            $maxTime = "18:00:00";
        }
        if($argShift == "night")
        {
            //dev note: adjust this time
            $minTime = "18:00:00";
            $maxTime = "06:00:00";
        }
    }

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        $sql = "CALL sp_gb_qc_SamplesInDateRangeGetFilteredv2('$argStartDate', '$argEndDate', '$argStartRow', '$argResultsPerPage', '$argIsComplete', '$argTestTypeIDs', '$argCompositeTypeIDs', '$minTime', '$maxTime', '$argLabTechIDs', '$argSamplerIDs', '$argOperatorIDs', '$argSiteIDs', '$argPlantIDs', '$argLocationIDs', '$argSpecificLocationIDs', '$argVoidStatusCodes', '$argIsCOA');";

        $result = $mySQLConnectionLocal->query($sql); //stored procedure method

        $outputCount = 0;
        while($row = $result->fetch_assoc())
        {
            $arrayOfSamples[$outputCount]->vars["id"] = $row['id']; //sample no
            $arrayOfSamples[$outputCount]->vars["description"] = $row['description'];
            $arrayOfSamples[$outputCount]->vars["repeatabilityId"] = $row['repeatability_id'];
            $arrayOfSamples[$outputCount]->vars["testType"] = $row['test_type_id'];
            $arrayOfSamples[$outputCount]->vars["compositeType"] = $row['composite_type_id'];
            $arrayOfSamples[$outputCount]->vars["sieveMethod"] = $row['sieve_method_id'];
            $arrayOfSamples[$outputCount]->vars["siteId"] = $row['site_id'];
            $arrayOfSamples[$outputCount]->vars["plantId"] = $row['plant_id'];
            $arrayOfSamples[$outputCount]->vars["location"] = $row['location_id'];
            $arrayOfSamples[$outputCount]->vars["specificLocation"] = $row['specific_location_id'];
            $arrayOfSamples[$outputCount]->vars["date"] = $row['date'];
            $arrayOfSamples[$outputCount]->vars["dateShort"] = $row['date_short'];
            $arrayOfSamples[$outputCount]->vars["time"] = $row['time'];
            $arrayOfSamples[$outputCount]->vars["groupTime"] = $row['group_time'];
            $arrayOfSamples[$outputCount]->vars["groupStartDateTime"] = $row['group_start_dt'];
            $arrayOfSamples[$outputCount]->vars["finishDateTime"] = $row['finish_dt'];
            $arrayOfSamples[$outputCount]->vars["durationMinutes"] = $row['duration_minutes'];
            $arrayOfSamples[$outputCount]->vars["duration"] = $row['duration'];
            $arrayOfSamples[$outputCount]->vars["dateTime"] = $row['dt'];
            $arrayOfSamples[$outputCount]->vars["dateTimeShort"] = $row['dt_short'];
            $arrayOfSamples[$outputCount]->vars["shiftDate"] = $row['shift_date'];
            $arrayOfSamples[$outputCount]->vars["shift"] = $row['shift'];
            $arrayOfSamples[$outputCount]->vars["sampler"] = $row['sampler'];
            $arrayOfSamples[$outputCount]->vars["labTech"] = $row['lab_tech'];
            $arrayOfSamples[$outputCount]->vars["operator"] = $row['operator'];
            $arrayOfSamples[$outputCount]->vars["railCarId"] = $row['rail_car_id'];
            $arrayOfSamples[$outputCount]->vars["railCarProductId"] = $row['rail_car_product_id'];
            $arrayOfSamples[$outputCount]->vars["railCarAvailableDateTime"] = $row['rail_car_available_dt'];
            $arrayOfSamples[$outputCount]->vars["startingWeight"] = $row['starting_weight'];
            $arrayOfSamples[$outputCount]->vars["endingWeight"] = $row['ending_weight'];
            $arrayOfSamples[$outputCount]->vars["moisture_rate"] = $row['moisture_rate'];
            $arrayOfSamples[$outputCount]->vars["drillholeNo"] = $row['drillhole_no'];
            $arrayOfSamples[$outputCount]->vars["depthFrom"] = $row['depth_from'];
            $arrayOfSamples[$outputCount]->vars["depthTo"] = $row['depth_to'];
            $arrayOfSamples[$outputCount]->vars["beginningWetWeight"] = $row['beginning_wet_weight'];
            $arrayOfSamples[$outputCount]->vars["preWashDryWeight"] = $row['prewash_dry_weight'];
            $arrayOfSamples[$outputCount]->vars["postWashDryWeight"] = $row['postwash_dry_weight'];
            $arrayOfSamples[$outputCount]->vars["oversizeWeight"] = $row['oversize_weight'];
            $arrayOfSamples[$outputCount]->vars["splitSampleWeight"] = $row['split_sample_weight'];
            $arrayOfSamples[$outputCount]->vars["splitSampleWeightDelta"] = $row['split_sample_weight_delta'];
            $arrayOfSamples[$outputCount]->vars["oversizePercent"] = $row['oversize_percent'];
            $arrayOfSamples[$outputCount]->vars["slimesPercent"] = $row['slimes_percent'];
            $arrayOfSamples[$outputCount]->vars["orePercent"] = $row['ore_percent'];
            $arrayOfSamples[$outputCount]->vars["notes"] = $row['notes'];
            $arrayOfSamples[$outputCount]->vars["reviewNotes"] = $row['review_notes'];
            $arrayOfSamples[$outputCount]->vars["turbidity"] = $row['turbidity'];
            $arrayOfSamples[$outputCount]->vars["containerSlurryWeight"] = $row['container_slurry_weight'];
            $arrayOfSamples[$outputCount]->vars["containerWaterWeight"] = $row['container_water_weight'];
            $arrayOfSamples[$outputCount]->vars["containerEmptyWeight"] = $row['container_empty_weight'];
            $arrayOfSamples[$outputCount]->vars["kValue"] = $row['k_value'];
            $arrayOfSamples[$outputCount]->vars["pan1"] = $row['k_pan_1'];
            $arrayOfSamples[$outputCount]->vars["pan2"] = $row['k_pan_2'];
            $arrayOfSamples[$outputCount]->vars["pan3"] = $row['k_pan_3'];
            $arrayOfSamples[$outputCount]->vars["kPercentFines"] = $row['k_percent_fines'];
            $arrayOfSamples[$outputCount]->vars["kValueFail"] = $row['k_value_fail'];
            $arrayOfSamples[$outputCount]->vars["pan1Fail"] = $row['k_pan_1_fail'];
            $arrayOfSamples[$outputCount]->vars["pan2Fail"] = $row['k_pan_2_fail'];
            $arrayOfSamples[$outputCount]->vars["pan3Fail"] = $row['k_pan_3_fail'];
            $arrayOfSamples[$outputCount]->vars["kPercentFinesFail"] = $row['k_percent_fines_fail'];
            $arrayOfSamples[$outputCount]->vars["roundness"] = $row['roundness'];
            $arrayOfSamples[$outputCount]->vars["sphericity"] = $row['sphericity'];
            $arrayOfSamples[$outputCount]->vars["sieve1Desc"] = $row['sieve_1_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve1Value"] = $row['sieve_1_value'];
            $arrayOfSamples[$outputCount]->vars["sieve1ValueCumulative"] = $row['sieve_1_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve1ValueCumulativePassing"] = $row['sieve_1_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve2Desc"] = $row['sieve_2_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve2Value"] = $row['sieve_2_value'];
            $arrayOfSamples[$outputCount]->vars["sieve2ValueCumulative"] = $row['sieve_2_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve2ValueCumulativePassing"] = $row['sieve_2_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve3Desc"] = $row['sieve_3_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve3Value"] = $row['sieve_3_value'];
            $arrayOfSamples[$outputCount]->vars["sieve3ValueCumulative"] = $row['sieve_3_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve3ValueCumulativePassing"] = $row['sieve_3_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve4Desc"] = $row['sieve_4_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve4Value"] = $row['sieve_4_value'];
            $arrayOfSamples[$outputCount]->vars["sieve4ValueCumulative"] = $row['sieve_4_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve4ValueCumulativePassing"] = $row['sieve_4_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve5Desc"] = $row['sieve_5_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve5Value"] = $row['sieve_5_value'];
            $arrayOfSamples[$outputCount]->vars["sieve5ValueCumulative"] = $row['sieve_5_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve5ValueCumulativePassing"] = $row['sieve_5_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve6Desc"] = $row['sieve_6_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve6Value"] = $row['sieve_6_value'];
            $arrayOfSamples[$outputCount]->vars["sieve6ValueCumulative"] = $row['sieve_6_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve6ValueCumulativePassing"] = $row['sieve_6_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve7Desc"] = $row['sieve_7_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve7Value"] = $row['sieve_7_value'];
            $arrayOfSamples[$outputCount]->vars["sieve7ValueCumulative"] = $row['sieve_7_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve7ValueCumulativePassing"] = $row['sieve_7_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve8Desc"] = $row['sieve_8_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve8Value"] = $row['sieve_8_value'];
            $arrayOfSamples[$outputCount]->vars["sieve8ValueCumulative"] = $row['sieve_8_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve8ValueCumulativePassing"] = $row['sieve_8_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve9Desc"] = $row['sieve_9_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve9Value"] = $row['sieve_9_value'];
            $arrayOfSamples[$outputCount]->vars["sieve9ValueCumulative"] = $row['sieve_9_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve9ValueCumulativePassing"] = $row['sieve_9_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sieve10Desc"] = $row['sieve_10_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve10Value"] = $row['sieve_10_value'];
            $arrayOfSamples[$outputCount]->vars["sieve10ValueCumulative"] = $row['sieve_10_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve10ValueCumulativePassing"] = $row['sieve_10_value_cumulative_passing'];
            $arrayOfSamples[$outputCount]->vars["sievesTotal"] = $row['sieves_total'];
            $arrayOfSamples[$outputCount]->vars["startWeightsRaw"] = $row['start_weights_raw'];
            $arrayOfSamples[$outputCount]->vars["endWeightsRaw"] = $row['end_weights_raw'];
            $arrayOfSamples[$outputCount]->vars["sieves_raw"] = $row['sieves_raw'];
            $arrayOfSamples[$outputCount]->vars["feedRowNo"] = $row['feed_row_no'];
            $arrayOfSamples[$outputCount]->vars["plus70"] = $row['plus_70'];
            $arrayOfSamples[$outputCount]->vars["plus50"] = $row['plus_50'];
            $arrayOfSamples[$outputCount]->vars["plus40"] = $row['plus_40']; 
            $arrayOfSamples[$outputCount]->vars["neg40Plus70"] = $row['minus_40_plus_70'];
            $arrayOfSamples[$outputCount]->vars["neg50Plus140"] = $row['minus_50_plus_140'];
            $arrayOfSamples[$outputCount]->vars["neg70"] = $row['minus_70'];
            $arrayOfSamples[$outputCount]->vars["neg70Plus140"] = $row['minus_70_plus_140'];
            $arrayOfSamples[$outputCount]->vars["neg60Plus70"] = $row['minus_60_plus_70'];
            $arrayOfSamples[$outputCount]->vars["neg140Plus325"] = $row['minus_140_plus_325'];
            $arrayOfSamples[$outputCount]->vars["plus140"] = $row['plus_140'];
            $arrayOfSamples[$outputCount]->vars["neg140"] = $row['minus_140'];
            $arrayOfSamples[$outputCount]->vars["nearSize"] = $row['near_size'];
            $arrayOfSamples[$outputCount]->vars["cutRatio"] = $row['cut_ratio'];
            $arrayOfSamples[$outputCount]->vars["wpMoistureRatio"] = $row['wp_moisture_rate'];
            $arrayOfSamples[$outputCount]->vars["percentSolids"] = $row['percent_solids'];
            $arrayOfSamples[$outputCount]->vars["stph"] = $row['stph'];
            $arrayOfSamples[$outputCount]->vars["tonsRepresented"] = $row['tons_represented'];
            $arrayOfSamples[$outputCount]->vars["tphRepresented"] = $row['tph_represented'];
            $arrayOfSamples[$outputCount]->vars["recoveryPlusSeventy"] = $row['recovery_plus_70'];
            $arrayOfSamples[$outputCount]->vars["recoveryPlusOneForty"] = $row['recovery_plus_140'];
            $arrayOfSamples[$outputCount]->vars["isRemoved"] = $row['is_removed'];
            $arrayOfSamples[$outputCount]->vars["voidStatusCode"] = $row['void_status_code'];
            $arrayOfSamples[$outputCount]->vars["createDateTime"] = $row['create_dt'];
            $arrayOfSamples[$outputCount]->vars["createUserId"] = $row['create_user_id'];
            $arrayOfSamples[$outputCount]->vars["editDateTime"] = $row['edit_dt'];
            $arrayOfSamples[$outputCount]->vars["editUserId"] = $row['edit_user_id'];

            $arrayOfSamples[$outputCount]->vars["sieve11Desc"] = $row['sieve_11_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve11Value"] = $row['sieve_11_value'];
            $arrayOfSamples[$outputCount]->vars["sieve11ValueCumulative"] = $row['sieve_11_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve11ValueCumulativePassing"] = $row['sieve_11_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve12Desc"] = $row['sieve_12_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve12Value"] = $row['sieve_12_value'];
            $arrayOfSamples[$outputCount]->vars["sieve12ValueCumulative"] = $row['sieve_12_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve12ValueCumulativePassing"] = $row['sieve_12_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve13Desc"] = $row['sieve_13_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve13Value"] = $row['sieve_13_value'];
            $arrayOfSamples[$outputCount]->vars["sieve13ValueCumulative"] = $row['sieve_13_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve13ValueCumulativePassing"] = $row['sieve_13_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve14Desc"] = $row['sieve_14_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve14Value"] = $row['sieve_14_value'];
            $arrayOfSamples[$outputCount]->vars["sieve14ValueCumulative"] = $row['sieve_14_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve14ValueCumulativePassing"] = $row['sieve_14_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve15Desc"] = $row['sieve_15_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve15Value"] = $row['sieve_15_value'];
            $arrayOfSamples[$outputCount]->vars["sieve15ValueCumulative"] = $row['sieve_15_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve15ValueCumulativePassing"] = $row['sieve_15_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve16Desc"] = $row['sieve_16_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve16Value"] = $row['sieve_16_value'];
            $arrayOfSamples[$outputCount]->vars["sieve16ValueCumulative"] = $row['sieve_16_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve16ValueCumulativePassing"] = $row['sieve_16_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve17Desc"] = $row['sieve_17_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve17Value"] = $row['sieve_17_value'];
            $arrayOfSamples[$outputCount]->vars["sieve17ValueCumulative"] = $row['sieve_17_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve17ValueCumulativePassing"] = $row['sieve_17_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["sieve18Desc"] = $row['sieve_18_desc'];
            $arrayOfSamples[$outputCount]->vars["sieve18Value"] = $row['sieve_18_value'];
            $arrayOfSamples[$outputCount]->vars["sieve18ValueCumulative"] = $row['sieve_18_value_cumulative'];
            $arrayOfSamples[$outputCount]->vars["sieve18ValueCumulativePassing"] = $row['sieve_18_value_cumulative_passing'];

            $arrayOfSamples[$outputCount]->vars["isCOA"] = $row['is_coa'];
            $arrayOfSamples[$outputCount]->vars["isComplete"] = $row['is_complete'];

            $outputCount++;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a list of samples.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $arrayOfSamples;
}


/*******************************************************************************
 * Function Name: getQCThresholdsAll()
 * Description:
 * This function will:
 * Returns an object containing an array of QC Threshold objects.
 *******************************************************************************/
function getQCThresholdsAll()
{
    $errorMessage = "qcfunctions.php - getQCThresholdsAll() ";
    $thresholdObjectArray = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;
    $numberOfResults = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        $sql = "CALL sp_gb_qc_QCThresholdsGetAll();";

        $result =  $mySQLConnectionLocal->query($sql); //direct SQL method

        while($row = $result->fetch_assoc())
        {
            $thresholdObjectArray[$numberOfResults]->vars["id"] = $row['id'];
            $thresholdObjectArray[$numberOfResults]->vars["screen"] = $row['screen'];
            $thresholdObjectArray[$numberOfResults]->vars["location_id"] = $row['location_id'];
            $thresholdObjectArray[$numberOfResults]->vars["low_threshold"] = $row['low_threshold'];
            $thresholdObjectArray[$numberOfResults]->vars["high_threshold"] = $row['high_threshold'];
            $thresholdObjectArray[$numberOfResults]->vars["is_active"] = $row['is_active'];
            $numberOfResults = $numberOfResults + 1;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for all QC thresholds.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            $error = $e->getMessage();
            echo $error;
        }
    }

    return $thresholdObjectArray;
}


/*******************************************************************************
 * Function Name: updateThreshold()
 * Description:
 * This function will update the values for a given QC Threshold setting
 *******************************************************************************/
function updateThreshold($argID, $argScreen, $argLocationID, $argLowThreshold, $argHighThreshold, $argIsActive)
{
    $errorMessage = "qcfunctions.php - updateThreshold() "; //requires pagevariables.php

    $returnValue = 0; //a value to tell us if the process was successful.

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        $sql = "CALL sp_gb_qc_ThresholdsUpdate('" . $argID . "','" . $argScreen . "','" . $argLocationID . "','" . $argLowThreshold . "','" . $argHighThreshold . "','" . $argIsActive . "');";

        //direct SQL method
        if ($mySQLConnectionLocal->query($sql) === TRUE)
        {
            $returnValue = 1;
        }
        else
        {
            echo "Error updating record: " . $mySQLConnectionLocal->error . "<br/>";
            $returnValue = 0;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error updating the value for a QC Threshold record.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $returnValue;
}


/*******************************************************************************
 * Function Name: insertQCThreshold($argScreen, $argLocationID, $argLowThreshold, $argHighThreshold)
 * Description:
 * This function inserts a new record into the gb_qc_thresholds table, using the
 * inputs received as parameters.
 *
 *******************************************************************************/
function insertQCThreshold($argScreen, $argLocationID, $argLowThreshold, $argHighThreshold)
{
    $result = 1;
    $errorMessage = "gb_qcfunctions.php - insertQCThreshold() ";
    $debugging = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        $sql = "CALL sp_gb_qc_ThresholdsInsert('" . $argScreen . "'," . $argLocationID . "," . $argLowThreshold . "," . $argHighThreshold . ")"; //stored procedure method

        $result = mysqli_query($mySQLConnectionLocal,$sql); //insert the record

        //check status
        if ($result == 0)
        {
            $errorMessage = $errorMessage . "Error creating a QC threshold record.";
            //sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
            if($debugging == 1)
            {
                echo $errorMessage;
                echo "Error: " . $sql . "<br>" . $mySQLConnectionLocal->error;
            }
            $result = 0;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error inserting a qc threshold into MySQL.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            $error = $e->getMessage();
            echo $error;
        }
        $result = 0;
    }

    return $result;
}


/*******************************************************************************
 * Function Name: function checkSampleCompletionByPlantAndDatetime($argPlantId, $argDatetime)
($argPlantId, $argDatetime)
 * Description:
 * This function will:
 * Accept start and stop dates as parameters.
 * Returns an integer of 1 or 0 to tell you if any values were found. 1 = results were found. 0 = results not found.
 * Excludes voided samples.
 *******************************************************************************/
function checkSampleCompletionByPlantAndDatetime($argPlantId, $argDatetime)
{
    $errorMessage = "qcfunctions.php - checkSampleCompletionByPlantAndDatetime() ";
    $arrayOfSamples = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;
    $outputCount = 0;

    try
    {


        if($argDatetime != "")
        {
            $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

            $sql = "CALL sp_gb_qc_SamplesGetByPlantAndDatetimeWhereNotComplete('$argPlantId','$argDatetime');";

            echo "sql == " . $sql . "<br/>";

            $result = $mySQLConnectionLocal->query($sql); //stored procedure method


            while($row = $result->fetch_array())
            {
                $outputCount++;
            }

            disconnectFromMySQLQC($mySQLConnectionLocal);
        }



    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a list of samples.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    if($outputCount > 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}


/*******************************************************************************
 * Function Name: getObjectArrayPercentAverages($arrayOfSamples
 * Description:
 * This function will:
 * Accept a parameter with an object array of sample information.
 * Return an array of objects containing averages of sample final percentages.
 * Is used in the QC Samples page data.
 *******************************************************************************/
function getObjectArrayPercentAverages($arrayOfSamples)
{

    $errorMessage = "gb_qcfunctions.php - getObjectArrayPercentAverages() ";
    $arrayOfTotalValues = NULL;
    $arrayOfAverageValues = NULL;
    $outputArray = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {

        //initialize values
        $sumOf20 = 0;
        $sumOf25 = 0;
        $sumOf30 = 0;
        $sumOf35 = 0;
        $sumOf40 = 0;
        $sumOf45 = 0;
        $sumOf50 = 0;
        $sumOf60 = 0;
        $sumOf70 = 0;
        $sumOf80 = 0;
        $sumOf100 = 0;
        $sumOf120 = 0;
        $sumOf140 = 0;
        $sumOf160 = 0;
        $sumOf170 = 0;
        $sumOf200 = 0;
        $sumOf230 = 0;
        $sumOf270 = 0;
        $sumOf325 = 0;
        $sumOfPAN = 0;

       /* $sumOfNeg50Plus140 = 0;
        $sumOfPlusSeventy = 0;
        $sumOfMinusSeventy = 0;
        $sumOfMinusOneForty = 0;
        $sumOfMinusSeventyPlusOneForty = 0;*/
        $sumOfOversize = 0;
        $sumOfPlus40 = 0;
        $sumOfNeg40Plus70 = 0;
        $sumOfNeg60Plus70 = 0;
        $sumOfNeg70Plus140 = 0;
        $sumOfNeg50Plus140 = 0;
        $sumOfNearSize = 0;
        $sumOfNeg140Plus325 = 0;
        $sumOfNeg140 = 0;

        $sumOfMoistureRate = 0;
        $sumOfPercentSolids = 0;
        $sumOfSTPH = 0;
        $sumOfTurbidity = 0;
        $sumOfPlusSeventyRecovery = 0;
        $sumOfPlusOneFortyRecovery = 0;

        $outputCount20 = 0;
        $outputCount25 = 0;
        $outputCount30 = 0;
        $outputCount35 = 0;
        $outputCount40 = 0;
        $outputCount45 = 0;
        $outputCount50 = 0;
        $outputCount60 = 0;
        $outputCount70 = 0;
        $outputCount80 = 0;
        $outputCount100 = 0;
        $outputCount120 = 0;
        $outputCount140 = 0;
        $outputCount160 = 0;
        $outputCount170 = 0;
        $outputCount200 = 0;
        $outputCount230 = 0;
        $outputCount270 = 0;
        $outputCount325 = 0;
        $outputCountPAN = 0;

  /*      $outputCountNeg50Plus140 = 0;
        $outputCountPlusSeventy = 0;
        $outputCountMinusSeventy = 0;
        $outputCountMinusOneForty = 0;
        $outputCountMinusSeventyPlusOneForty = 0;*/

        $outputCountOversize = 0;
        $outputCountPlus40 = 0;
        $outputCountNeg40Plus70 = 0;
        $outputCountNeg60Plus70 = 0;
        $outputCountNeg70Plus140 = 0;
        $outputCountNeg50Plus140 = 0;
        $outputCountNearSize = 0;
        $outputCountNeg140Plus325 = 0;
        $outputCountNeg140 = 0;

        $outputCountMoistureRate = 0;
        $outputCountPercentSolids = 0;
        $outputCountSTPH = 0;
        $outputCountTurbidity = 0;
        $outputCountPlusSeventyRecovery = 0;
        $outputCountPlusOneFortyRecovery = 0;

        $arrayOfAveragePercentages[0] = 0; //20
        $arrayOfAveragePercentages[1] = 0; //25
        $arrayOfAveragePercentages[2] = 0; //30
        $arrayOfAveragePercentages[3] = 0; //35
        $arrayOfAveragePercentages[4] = 0; //40
        $arrayOfAveragePercentages[5] = 0; //45
        $arrayOfAveragePercentages[6] = 0; //50
        $arrayOfAveragePercentages[7] = 0; //60
        $arrayOfAveragePercentages[8] = 0; //70
        $arrayOfAveragePercentages[9] = 0; //80
        $arrayOfAveragePercentages[10] = 0; //100
        $arrayOfAveragePercentages[11] = 0; //120
        $arrayOfAveragePercentages[12] = 0; //140
        $arrayOfAveragePercentages[13] = 0; //160
        $arrayOfAveragePercentages[14] = 0; //170
        $arrayOfAveragePercentages[15] = 0; //200
        $arrayOfAveragePercentages[16] = 0; //230
        $arrayOfAveragePercentages[17] = 0; //270
        $arrayOfAveragePercentages[18] = 0; //325
        $arrayOfAveragePercentages[19] = 0; //PAN

        $arrayOfAveragePercentages[20] = 0; // +10 (OS)
        $arrayOfAveragePercentages[21] = 0; //-10+40
        $arrayOfAveragePercentages[22] = 0; //-40+70
        $arrayOfAveragePercentages[23] = 0; //-60+70
        $arrayOfAveragePercentages[24] = 0; //-70 +140
        $arrayOfAveragePercentages[31] = 0; //-50+140
        $arrayOfAveragePercentages[32] = 0; //Near Size
        $arrayOfAveragePercentages[33] = 0; // -140+325
        $arrayOfAveragePercentages[34] = 0; //-140
 

        $arrayOfAveragePercentages[25] = 0; // Moisture Rate
        $arrayOfAveragePercentages[26] = 0; // Percent Solids
        $arrayOfAveragePercentages[27] = 0; // STPH
        $arrayOfAveragePercentages[28] = 0; // Turbidity
        $arrayOfAveragePercentages[29] = 0; // Plus Seventy Recovery
        $arrayOfAveragePercentages[30] = 0; // Plus One Forty Recovery

        for($i = 0; $i < count($arrayOfSamples); $i++)
        {
            //ASSIGN VALUES TO VARIABLES BASED ON SCREEN SIZES

            //check that each sample is complete and void status is active
            if(($arrayOfSamples[$i]->vars['isComplete'] == 1) && ($arrayOfSamples[$i]->vars['voidStatusCode'] == 'A'))
            {
                //<editor-fold desc="Loop through every sieve">
                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve1Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve1Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve1Desc'])
                    {
                        case "20":
                            $sumOf20 = $sumOf20 + $arrayOfSamples[$i]->vars['sieve1Value'];
                            $outputCount20++;
                            break;
                        case "25":
                            $sumOf25 = $sumOf25 + $arrayOfSamples[$i]->vars['sieve1Value'];
                            $outputCount25++;
                            break;
                        case "30":
                            $sumOf30 = $sumOf30 + $arrayOfSamples[$i]->vars['sieve1Value'];
                            $outputCount30++;
                            break;
                        case "35":
                            $sumOf35 = $sumOf35 + $arrayOfSamples[$i]->vars['sieve1Value'];
                            $outputCount35++;
                            break;
                        case "40":
                            $sumOf40 = $sumOf40 + $arrayOfSamples[$i]->vars['sieve1Value'];
                            $outputCount40++;
                            break;
                        case "45":
                            $sumOf45 = $sumOf45 + $arrayOfSamples[$i]->vars['sieve1Value'];
                            $outputCount45++;
                            break;
                        case "50":
                            $sumOf50 = $sumOf50 + $arrayOfSamples[$i]->vars['sieve1Value'];
                            $outputCount50++;
                            break;
                        case "60":
                            $sumOf60 = $sumOf60 + $arrayOfSamples[$i]->vars['sieve1Value'];
                            $outputCount60++;
                            break;
                        case "70":
                            $sumOf70 = $sumOf70 + $arrayOfSamples[$i]->vars['sieve1Value'];
                            $outputCount70++;
                            break;
                        case "80":
                            $sumOf80 = $sumOf80 + $arrayOfSamples[$i]->vars['sieve1Value'];
                            $outputCount80++;
                            break;
                        case "100":
                            $sumOf100 = $sumOf100 + $arrayOfSamples[$i]->vars['sieve1Value'];
                            $outputCount100++;
                            break;
                        case "120":
                            $sumOf120 = $sumOf120 + $arrayOfSamples[$i]->vars['sieve1Value'];
                            $outputCount120++;
                            break;
                        case "140":
                            $sumOf140 = $sumOf140 + $arrayOfSamples[$i]->vars['sieve1Value'];
                            $outputCount140++;
                            break;
                        case "160":
                            $sumOf160 = $sumOf160 + $arrayOfSamples[$i]->vars['sieve1Value'];
                            $outputCount160++;
                            break;
                        case "170":
                            $sumOf170 = $sumOf170 + $arrayOfSamples[$i]->vars['sieve1Value'];
                            $outputCount170++;
                            break;
                        case "200":
                            $sumOf200 = $sumOf200 + $arrayOfSamples[$i]->vars['sieve1Value'];
                            $outputCount200++;
                            break;
                        case "230":
                            $sumOf230 = $sumOf230 + $arrayOfSamples[$i]->vars['sieve1Value'];
                            $outputCount230++;
                            break;
                        case "270":
                            $sumOf270 = $sumOf270 + $arrayOfSamples[$i]->vars['sieve1Value'];
                            $outputCount270++;
                            break;
                        case "325":
                            $sumOf325 = $sumOf325 + $arrayOfSamples[$i]->vars['sieve1Value'];
                            $outputCount325++;
                            break;
                        case "PAN":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve1Value'];
                            $outputCountPAN++;
                            break;
                        case "pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve1Value'];
                            $outputCountPAN++;
                            break;
                        case "Pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve1Value'];
                            $outputCountPAN++;
                            break;
                    } //switch
                }

                if(($arrayOfSamples[$i]->vars['sieve2Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve2Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve2Desc'])
                    {
                        case "20":
                            $sumOf20 = $sumOf20 + $arrayOfSamples[$i]->vars['sieve2Value'];
                            $outputCount20++;
                            break;
                        case "25":
                            $sumOf25 = $sumOf25 + $arrayOfSamples[$i]->vars['sieve2Value'];
                            $outputCount25++;
                            break;
                        case "30":
                            $sumOf30 = $sumOf30 + $arrayOfSamples[$i]->vars['sieve2Value'];
                            $outputCount30++;
                            break;
                        case "35":
                            $sumOf35 = $sumOf35 + $arrayOfSamples[$i]->vars['sieve2Value'];
                            $outputCount35++;
                            break;
                        case "40":
                            $sumOf40 = $sumOf40 + $arrayOfSamples[$i]->vars['sieve2Value'];
                            $outputCount40++;
                            break;
                        case "45":
                            $sumOf45 = $sumOf45 + $arrayOfSamples[$i]->vars['sieve2Value'];
                            $outputCount45++;
                            break;
                        case "50":
                            $sumOf50 = $sumOf50 + $arrayOfSamples[$i]->vars['sieve2Value'];
                            $outputCount50++;
                            break;
                        case "60":
                            $sumOf60 = $sumOf60 + $arrayOfSamples[$i]->vars['sieve2Value'];
                            $outputCount60++;
                            break;
                        case "70":
                            $sumOf70 = $sumOf70 + $arrayOfSamples[$i]->vars['sieve2Value'];
                            $outputCount70++;
                            break;
                        case "80":
                            $sumOf80 = $sumOf80 + $arrayOfSamples[$i]->vars['sieve2Value'];
                            $outputCount80++;
                            break;
                        case "100":
                            $sumOf100 = $sumOf100 + $arrayOfSamples[$i]->vars['sieve2Value'];
                            $outputCount100++;
                            break;
                        case "120":
                            $sumOf120 = $sumOf120 + $arrayOfSamples[$i]->vars['sieve2Value'];
                            $outputCount120++;
                            break;
                        case "140":
                            $sumOf140 = $sumOf140 + $arrayOfSamples[$i]->vars['sieve2Value'];
                            $outputCount140++;
                            break;
                        case "160":
                            $sumOf160 = $sumOf160 + $arrayOfSamples[$i]->vars['sieve2Value'];
                            $outputCount160++;
                            break;
                        case "170":
                            $sumOf170 = $sumOf170 + $arrayOfSamples[$i]->vars['sieve2Value'];
                            $outputCount170++;
                            break;
                        case "200":
                            $sumOf200 = $sumOf200 + $arrayOfSamples[$i]->vars['sieve2Value'];
                            $outputCount200++;
                            break;
                        case "230":
                            $sumOf230 = $sumOf230 + $arrayOfSamples[$i]->vars['sieve2Value'];
                            $outputCount230++;
                            break;
                        case "270":
                            $sumOf270 = $sumOf270 + $arrayOfSamples[$i]->vars['sieve2Value'];
                            $outputCount270++;
                            break;
                        case "325":
                            $sumOf325 = $sumOf325 + $arrayOfSamples[$i]->vars['sieve2Value'];
                            $outputCount325++;
                            break;
                        case "PAN":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve2Value'];
                            $outputCountPAN++;
                            break;
                        case "pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve2Value'];
                            $outputCountPAN++;
                            break;
                        case "Pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve2Value'];
                            $outputCountPAN++;
                            break;
                    } //switch
                }

                if(($arrayOfSamples[$i]->vars['sieve3Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve3Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve3Desc'])
                    {
                        case "20":
                            $sumOf20 = $sumOf20 + $arrayOfSamples[$i]->vars['sieve3Value'];
                            $outputCount20++;
                            break;
                        case "25":
                            $sumOf25 = $sumOf25 + $arrayOfSamples[$i]->vars['sieve3Value'];
                            $outputCount25++;
                            break;
                        case "30":
                            $sumOf30 = $sumOf30 + $arrayOfSamples[$i]->vars['sieve3Value'];
                            $outputCount30++;
                            break;
                        case "35":
                            $sumOf35 = $sumOf35 + $arrayOfSamples[$i]->vars['sieve3Value'];
                            $outputCount35++;
                            break;
                        case "40":
                            $sumOf40 = $sumOf40 + $arrayOfSamples[$i]->vars['sieve3Value'];
                            $outputCount40++;
                            break;
                        case "45":
                            $sumOf45 = $sumOf45 + $arrayOfSamples[$i]->vars['sieve3Value'];
                            $outputCount45++;
                            break;
                        case "50":
                            $sumOf50 = $sumOf50 + $arrayOfSamples[$i]->vars['sieve3Value'];
                            $outputCount50++;
                            break;
                        case "60":
                            $sumOf60 = $sumOf60 + $arrayOfSamples[$i]->vars['sieve3Value'];
                            $outputCount60++;
                            break;
                        case "70":
                            $sumOf70 = $sumOf70 + $arrayOfSamples[$i]->vars['sieve3Value'];
                            $outputCount70++;
                            break;
                        case "80":
                            $sumOf80 = $sumOf80 + $arrayOfSamples[$i]->vars['sieve3Value'];
                            $outputCount80++;
                            break;
                        case "100":
                            $sumOf100 = $sumOf100 + $arrayOfSamples[$i]->vars['sieve3Value'];
                            $outputCount100++;
                            break;
                        case "120":
                            $sumOf120 = $sumOf120 + $arrayOfSamples[$i]->vars['sieve3Value'];
                            $outputCount120++;
                            break;
                        case "140":
                            $sumOf140 = $sumOf140 + $arrayOfSamples[$i]->vars['sieve3Value'];
                            $outputCount140++;
                            break;
                        case "160":
                            $sumOf160 = $sumOf160 + $arrayOfSamples[$i]->vars['sieve3Value'];
                            $outputCount160++;
                            break;
                        case "170":
                            $sumOf170 = $sumOf170 + $arrayOfSamples[$i]->vars['sieve3Value'];
                            $outputCount170++;
                            break;
                        case "200":
                            $sumOf200 = $sumOf200 + $arrayOfSamples[$i]->vars['sieve3Value'];
                            $outputCount200++;
                            break;
                        case "230":
                            $sumOf230 = $sumOf230 + $arrayOfSamples[$i]->vars['sieve3Value'];
                            $outputCount230++;
                            break;
                        case "270":
                            $sumOf270 = $sumOf270 + $arrayOfSamples[$i]->vars['sieve3Value'];
                            $outputCount270++;
                            break;
                        case "325":
                            $sumOf325 = $sumOf325 + $arrayOfSamples[$i]->vars['sieve3Value'];
                            $outputCount325++;
                            break;
                        case "PAN":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve3Value'];
                            $outputCountPAN++;
                            break;
                        case "pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve3Value'];
                            $outputCountPAN++;
                            break;
                        case "Pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve3Value'];
                            $outputCountPAN++;
                            break;
                    } //switch
                }

                if(($arrayOfSamples[$i]->vars['sieve4Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve4Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve4Desc'])
                    {
                        case "20":
                            $sumOf20 = $sumOf20 + $arrayOfSamples[$i]->vars['sieve4Value'];
                            $outputCount20++;
                            break;
                        case "25":
                            $sumOf25 = $sumOf25 + $arrayOfSamples[$i]->vars['sieve4Value'];
                            $outputCount25++;
                            break;
                        case "30":
                            $sumOf30 = $sumOf30 + $arrayOfSamples[$i]->vars['sieve4Value'];
                            $outputCount30++;
                            break;
                        case "35":
                            $sumOf35 = $sumOf35 + $arrayOfSamples[$i]->vars['sieve4Value'];
                            $outputCount35++;
                            break;
                        case "40":
                            $sumOf40 = $sumOf40 + $arrayOfSamples[$i]->vars['sieve4Value'];
                            $outputCount40++;
                            break;
                        case "45":
                            $sumOf45 = $sumOf45 + $arrayOfSamples[$i]->vars['sieve4Value'];
                            $outputCount45++;
                            break;
                        case "50":
                            $sumOf50 = $sumOf50 + $arrayOfSamples[$i]->vars['sieve4Value'];
                            $outputCount50++;
                            break;
                        case "60":
                            $sumOf60 = $sumOf60 + $arrayOfSamples[$i]->vars['sieve4Value'];
                            $outputCount60++;
                            break;
                        case "70":
                            $sumOf70 = $sumOf70 + $arrayOfSamples[$i]->vars['sieve4Value'];
                            $outputCount70++;
                            break;
                        case "80":
                            $sumOf80 = $sumOf80 + $arrayOfSamples[$i]->vars['sieve4Value'];
                            $outputCount80++;
                            break;
                        case "100":
                            $sumOf100 = $sumOf100 + $arrayOfSamples[$i]->vars['sieve4Value'];
                            $outputCount100++;
                            break;
                        case "120":
                            $sumOf120 = $sumOf120 + $arrayOfSamples[$i]->vars['sieve4Value'];
                            $outputCount120++;
                            break;
                        case "140":
                            $sumOf140 = $sumOf140 + $arrayOfSamples[$i]->vars['sieve4Value'];
                            $outputCount140++;
                            break;
                        case "160":
                            $sumOf160 = $sumOf160 + $arrayOfSamples[$i]->vars['sieve4Value'];
                            $outputCount160++;
                            break;
                        case "170":
                            $sumOf170 = $sumOf170 + $arrayOfSamples[$i]->vars['sieve4Value'];
                            $outputCount170++;
                            break;
                        case "200":
                            $sumOf200 = $sumOf200 + $arrayOfSamples[$i]->vars['sieve4Value'];
                            $outputCount200++;
                            break;
                        case "230":
                            $sumOf230 = $sumOf230 + $arrayOfSamples[$i]->vars['sieve4Value'];
                            $outputCount230++;
                            break;
                        case "270":
                            $sumOf270 = $sumOf270 + $arrayOfSamples[$i]->vars['sieve4Value'];
                            $outputCount270++;
                            break;
                        case "325":
                            $sumOf325 = $sumOf325 + $arrayOfSamples[$i]->vars['sieve4Value'];
                            $outputCount325++;
                            break;
                        case "PAN":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve4Value'];
                            $outputCountPAN++;
                            break;
                        case "pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve4Value'];
                            $outputCountPAN++;
                            break;
                        case "Pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve4Value'];
                            $outputCountPAN++;
                            break;
                    } //switch
                }

                if(($arrayOfSamples[$i]->vars['sieve5Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve5Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve5Desc'])
                    {
                        case "20":
                            $sumOf20 = $sumOf20 + $arrayOfSamples[$i]->vars['sieve5Value'];
                            $outputCount20++;
                            break;
                        case "25":
                            $sumOf25 = $sumOf25 + $arrayOfSamples[$i]->vars['sieve5Value'];
                            $outputCount25++;
                            break;
                        case "30":
                            $sumOf30 = $sumOf30 + $arrayOfSamples[$i]->vars['sieve5Value'];
                            $outputCount30++;
                            break;
                        case "35":
                            $sumOf35 = $sumOf35 + $arrayOfSamples[$i]->vars['sieve5Value'];
                            $outputCount35++;
                            break;
                        case "40":
                            $sumOf40 = $sumOf40 + $arrayOfSamples[$i]->vars['sieve5Value'];
                            $outputCount40++;
                            break;
                        case "45":
                            $sumOf45 = $sumOf45 + $arrayOfSamples[$i]->vars['sieve5Value'];
                            $outputCount45++;
                            break;
                        case "50":
                            $sumOf50 = $sumOf50 + $arrayOfSamples[$i]->vars['sieve5Value'];
                            $outputCount50++;
                            break;
                        case "60":
                            $sumOf60 = $sumOf60 + $arrayOfSamples[$i]->vars['sieve5Value'];
                            $outputCount60++;
                            break;
                        case "70":
                            $sumOf70 = $sumOf70 + $arrayOfSamples[$i]->vars['sieve5Value'];
                            $outputCount70++;
                            break;
                        case "80":
                            $sumOf80 = $sumOf80 + $arrayOfSamples[$i]->vars['sieve5Value'];
                            $outputCount80++;
                            break;
                        case "100":
                            $sumOf100 = $sumOf100 + $arrayOfSamples[$i]->vars['sieve5Value'];
                            $outputCount100++;
                            break;
                        case "120":
                            $sumOf120 = $sumOf120 + $arrayOfSamples[$i]->vars['sieve5Value'];
                            $outputCount120++;
                            break;
                        case "140":
                            $sumOf140 = $sumOf140 + $arrayOfSamples[$i]->vars['sieve5Value'];
                            $outputCount140++;
                            break;
                        case "160":
                            $sumOf160 = $sumOf160 + $arrayOfSamples[$i]->vars['sieve5Value'];
                            $outputCount160++;
                            break;
                        case "170":
                            $sumOf170 = $sumOf170 + $arrayOfSamples[$i]->vars['sieve5Value'];
                            $outputCount170++;
                            break;
                        case "200":
                            $sumOf200 = $sumOf200 + $arrayOfSamples[$i]->vars['sieve5Value'];
                            $outputCount200++;
                            break;
                        case "230":
                            $sumOf230 = $sumOf230 + $arrayOfSamples[$i]->vars['sieve5Value'];
                            $outputCount230++;
                            break;
                        case "270":
                            $sumOf270 = $sumOf270 + $arrayOfSamples[$i]->vars['sieve5Value'];
                            $outputCount270++;
                            break;
                        case "325":
                            $sumOf325 = $sumOf325 + $arrayOfSamples[$i]->vars['sieve5Value'];
                            $outputCount325++;
                            break;
                        case "PAN":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve5Value'];
                            $outputCountPAN++;
                            break;
                        case "pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve5Value'];
                            $outputCountPAN++;
                            break;
                        case "Pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve5Value'];
                            $outputCountPAN++;
                            break;
                    } //switch
                }

                if(($arrayOfSamples[$i]->vars['sieve6Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve6Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve6Desc'])
                    {
                        case "20":
                            $sumOf20 = $sumOf20 + $arrayOfSamples[$i]->vars['sieve6Value'];
                            $outputCount20++;
                            break;
                        case "25":
                            $sumOf25 = $sumOf25 + $arrayOfSamples[$i]->vars['sieve6Value'];
                            $outputCount25++;
                            break;
                        case "30":
                            $sumOf30 = $sumOf30 + $arrayOfSamples[$i]->vars['sieve6Value'];
                            $outputCount30++;
                            break;
                        case "35":
                            $sumOf35 = $sumOf35 + $arrayOfSamples[$i]->vars['sieve6Value'];
                            $outputCount35++;
                            break;
                        case "40":
                            $sumOf40 = $sumOf40 + $arrayOfSamples[$i]->vars['sieve6Value'];
                            $outputCount40++;
                            break;
                        case "45":
                            $sumOf45 = $sumOf45 + $arrayOfSamples[$i]->vars['sieve6Value'];
                            $outputCount45++;
                            break;
                        case "50":
                            $sumOf50 = $sumOf50 + $arrayOfSamples[$i]->vars['sieve6Value'];
                            $outputCount50++;
                            break;
                        case "60":
                            $sumOf60 = $sumOf60 + $arrayOfSamples[$i]->vars['sieve6Value'];
                            $outputCount60++;
                            break;
                        case "70":
                            $sumOf70 = $sumOf70 + $arrayOfSamples[$i]->vars['sieve6Value'];
                            $outputCount70++;
                            break;
                        case "80":
                            $sumOf80 = $sumOf80 + $arrayOfSamples[$i]->vars['sieve6Value'];
                            $outputCount80++;
                            break;
                        case "100":
                            $sumOf100 = $sumOf100 + $arrayOfSamples[$i]->vars['sieve6Value'];
                            $outputCount100++;
                            break;
                        case "120":
                            $sumOf120 = $sumOf120 + $arrayOfSamples[$i]->vars['sieve6Value'];
                            $outputCount120++;
                            break;
                        case "140":
                            $sumOf140 = $sumOf140 + $arrayOfSamples[$i]->vars['sieve6Value'];
                            $outputCount140++;
                            break;
                        case "160":
                            $sumOf160 = $sumOf160 + $arrayOfSamples[$i]->vars['sieve6Value'];
                            $outputCount160++;
                            break;
                        case "170":
                            $sumOf170 = $sumOf170 + $arrayOfSamples[$i]->vars['sieve6Value'];
                            $outputCount170++;
                            break;
                        case "200":
                            $sumOf200 = $sumOf200 + $arrayOfSamples[$i]->vars['sieve6Value'];
                            $outputCount200++;
                            break;
                        case "230":
                            $sumOf230 = $sumOf230 + $arrayOfSamples[$i]->vars['sieve6Value'];
                            $outputCount230++;
                            break;
                        case "270":
                            $sumOf270 = $sumOf270 + $arrayOfSamples[$i]->vars['sieve6Value'];
                            $outputCount270++;
                            break;
                        case "325":
                            $sumOf325 = $sumOf325 + $arrayOfSamples[$i]->vars['sieve6Value'];
                            $outputCount325++;
                            break;
                        case "PAN":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve6Value'];
                            $outputCountPAN++;
                            break;
                        case "pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve6Value'];
                            $outputCountPAN++;
                            break;
                        case "Pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve6Value'];
                            $outputCountPAN++;
                            break;
                    } //switch
                }

                if(($arrayOfSamples[$i]->vars['sieve7Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve7Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve7Desc'])
                    {
                        case "20":
                            $sumOf20 = $sumOf20 + $arrayOfSamples[$i]->vars['sieve7Value'];
                            $outputCount20++;
                            break;
                        case "25":
                            $sumOf25 = $sumOf25 + $arrayOfSamples[$i]->vars['sieve7Value'];
                            $outputCount25++;
                            break;
                        case "30":
                            $sumOf30 = $sumOf30 + $arrayOfSamples[$i]->vars['sieve7Value'];
                            $outputCount30++;
                            break;
                        case "35":
                            $sumOf35 = $sumOf35 + $arrayOfSamples[$i]->vars['sieve7Value'];
                            $outputCount35++;
                            break;
                        case "40":
                            $sumOf40 = $sumOf40 + $arrayOfSamples[$i]->vars['sieve7Value'];
                            $outputCount40++;
                            break;
                        case "45":
                            $sumOf45 = $sumOf45 + $arrayOfSamples[$i]->vars['sieve7Value'];
                            $outputCount45++;
                            break;
                        case "50":
                            $sumOf50 = $sumOf50 + $arrayOfSamples[$i]->vars['sieve7Value'];
                            $outputCount50++;
                            break;
                        case "60":
                            $sumOf60 = $sumOf60 + $arrayOfSamples[$i]->vars['sieve7Value'];
                            $outputCount60++;
                            break;
                        case "70":
                            $sumOf70 = $sumOf70 + $arrayOfSamples[$i]->vars['sieve7Value'];
                            $outputCount70++;
                            break;
                        case "80":
                            $sumOf80 = $sumOf80 + $arrayOfSamples[$i]->vars['sieve7Value'];
                            $outputCount80++;
                            break;
                        case "100":
                            $sumOf100 = $sumOf100 + $arrayOfSamples[$i]->vars['sieve7Value'];
                            $outputCount100++;
                            break;
                        case "120":
                            $sumOf120 = $sumOf120 + $arrayOfSamples[$i]->vars['sieve7Value'];
                            $outputCount120++;
                            break;
                        case "140":
                            $sumOf140 = $sumOf140 + $arrayOfSamples[$i]->vars['sieve7Value'];
                            $outputCount140++;
                            break;
                        case "160":
                            $sumOf160 = $sumOf160 + $arrayOfSamples[$i]->vars['sieve7Value'];
                            $outputCount160++;
                            break;
                        case "170":
                            $sumOf170 = $sumOf170 + $arrayOfSamples[$i]->vars['sieve7Value'];
                            $outputCount170++;
                            break;
                        case "200":
                            $sumOf200 = $sumOf200 + $arrayOfSamples[$i]->vars['sieve7Value'];
                            $outputCount200++;
                            break;
                        case "230":
                            $sumOf230 = $sumOf230 + $arrayOfSamples[$i]->vars['sieve7Value'];
                            $outputCount230++;
                            break;
                        case "270":
                            $sumOf270 = $sumOf270 + $arrayOfSamples[$i]->vars['sieve7Value'];
                            $outputCount270++;
                            break;
                        case "325":
                            $sumOf325 = $sumOf325 + $arrayOfSamples[$i]->vars['sieve7Value'];
                            $outputCount325++;
                            break;
                        case "PAN":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve7Value'];
                            $outputCountPAN++;
                            break;
                        case "pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve7Value'];
                            $outputCountPAN++;
                            break;
                        case "Pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve7Value'];
                            $outputCountPAN++;
                            break;
                    } //switch
                }

                if(($arrayOfSamples[$i]->vars['sieve8Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve8Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve8Desc'])
                    {
                        case "20":
                            $sumOf20 = $sumOf20 + $arrayOfSamples[$i]->vars['sieve8Value'];
                            $outputCount20++;
                            break;
                        case "25":
                            $sumOf25 = $sumOf25 + $arrayOfSamples[$i]->vars['sieve8Value'];
                            $outputCount25++;
                            break;
                        case "30":
                            $sumOf30 = $sumOf30 + $arrayOfSamples[$i]->vars['sieve8Value'];
                            $outputCount30++;
                            break;
                        case "35":
                            $sumOf35 = $sumOf35 + $arrayOfSamples[$i]->vars['sieve8Value'];
                            $outputCount35++;
                            break;
                        case "40":
                            $sumOf40 = $sumOf40 + $arrayOfSamples[$i]->vars['sieve8Value'];
                            $outputCount40++;
                            break;
                        case "45":
                            $sumOf45 = $sumOf45 + $arrayOfSamples[$i]->vars['sieve8Value'];
                            $outputCount45++;
                            break;
                        case "50":
                            $sumOf50 = $sumOf50 + $arrayOfSamples[$i]->vars['sieve8Value'];
                            $outputCount50++;
                            break;
                        case "60":
                            $sumOf60 = $sumOf60 + $arrayOfSamples[$i]->vars['sieve8Value'];
                            $outputCount60++;
                            break;
                        case "70":
                            $sumOf70 = $sumOf70 + $arrayOfSamples[$i]->vars['sieve8Value'];
                            $outputCount70++;
                            break;
                        case "80":
                            $sumOf80 = $sumOf80 + $arrayOfSamples[$i]->vars['sieve8Value'];
                            $outputCount80++;
                            break;
                        case "100":
                            $sumOf100 = $sumOf100 + $arrayOfSamples[$i]->vars['sieve8Value'];
                            $outputCount100++;
                            break;
                        case "120":
                            $sumOf120 = $sumOf120 + $arrayOfSamples[$i]->vars['sieve8Value'];
                            $outputCount120++;
                            break;
                        case "140":
                            $sumOf140 = $sumOf140 + $arrayOfSamples[$i]->vars['sieve8Value'];
                            $outputCount140++;
                            break;
                        case "160":
                            $sumOf160 = $sumOf160 + $arrayOfSamples[$i]->vars['sieve8Value'];
                            $outputCount160++;
                            break;
                        case "170":
                            $sumOf170 = $sumOf170 + $arrayOfSamples[$i]->vars['sieve8Value'];
                            $outputCount170++;
                            break;
                        case "200":
                            $sumOf200 = $sumOf200 + $arrayOfSamples[$i]->vars['sieve8Value'];
                            $outputCount200++;
                            break;
                        case "230":
                            $sumOf230 = $sumOf230 + $arrayOfSamples[$i]->vars['sieve8Value'];
                            $outputCount230++;
                            break;
                        case "270":
                            $sumOf270 = $sumOf270 + $arrayOfSamples[$i]->vars['sieve8Value'];
                            $outputCount270++;
                            break;
                        case "325":
                            $sumOf325 = $sumOf325 + $arrayOfSamples[$i]->vars['sieve8Value'];
                            $outputCount325++;
                            break;
                        case "PAN":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve8Value'];
                            $outputCountPAN++;
                            break;
                        case "pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve8Value'];
                            $outputCountPAN++;
                            break;
                        case "Pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve8Value'];
                            $outputCountPAN++;
                            break;
                    } //switch
                }

                if(($arrayOfSamples[$i]->vars['sieve9Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve9Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve9Desc'])
                    {
                        case "20":
                            $sumOf20 = $sumOf20 + $arrayOfSamples[$i]->vars['sieve9Value'];
                            $outputCount20++;
                            break;
                        case "25":
                            $sumOf25 = $sumOf25 + $arrayOfSamples[$i]->vars['sieve9Value'];
                            $outputCount25++;
                            break;
                        case "30":
                            $sumOf30 = $sumOf30 + $arrayOfSamples[$i]->vars['sieve9Value'];
                            $outputCount30++;
                            break;
                        case "35":
                            $sumOf35 = $sumOf35 + $arrayOfSamples[$i]->vars['sieve9Value'];
                            $outputCount35++;
                            break;
                        case "40":
                            $sumOf40 = $sumOf40 + $arrayOfSamples[$i]->vars['sieve9Value'];
                            $outputCount40++;
                            break;
                        case "45":
                            $sumOf45 = $sumOf45 + $arrayOfSamples[$i]->vars['sieve9Value'];
                            $outputCount45++;
                            break;
                        case "50":
                            $sumOf50 = $sumOf50 + $arrayOfSamples[$i]->vars['sieve9Value'];
                            $outputCount50++;
                            break;
                        case "60":
                            $sumOf60 = $sumOf60 + $arrayOfSamples[$i]->vars['sieve9Value'];
                            $outputCount60++;
                            break;
                        case "70":
                            $sumOf70 = $sumOf70 + $arrayOfSamples[$i]->vars['sieve9Value'];
                            $outputCount70++;
                            break;
                        case "80":
                            $sumOf80 = $sumOf80 + $arrayOfSamples[$i]->vars['sieve9Value'];
                            $outputCount80++;
                            break;
                        case "100":
                            $sumOf100 = $sumOf100 + $arrayOfSamples[$i]->vars['sieve9Value'];
                            $outputCount100++;
                            break;
                        case "120":
                            $sumOf120 = $sumOf120 + $arrayOfSamples[$i]->vars['sieve9Value'];
                            $outputCount120++;
                            break;
                        case "140":
                            $sumOf140 = $sumOf140 + $arrayOfSamples[$i]->vars['sieve9Value'];
                            $outputCount140++;
                            break;
                        case "160":
                            $sumOf160 = $sumOf160 + $arrayOfSamples[$i]->vars['sieve9Value'];
                            $outputCount160++;
                            break;
                        case "170":
                            $sumOf170 = $sumOf170 + $arrayOfSamples[$i]->vars['sieve9Value'];
                            $outputCount170++;
                            break;
                        case "200":
                            $sumOf200 = $sumOf200 + $arrayOfSamples[$i]->vars['sieve9Value'];
                            $outputCount200++;
                            break;
                        case "230":
                            $sumOf230 = $sumOf230 + $arrayOfSamples[$i]->vars['sieve9Value'];
                            $outputCount230++;
                            break;
                        case "270":
                            $sumOf270 = $sumOf270 + $arrayOfSamples[$i]->vars['sieve9Value'];
                            $outputCount270++;
                            break;
                        case "325":
                            $sumOf325 = $sumOf325 + $arrayOfSamples[$i]->vars['sieve9Value'];
                            $outputCount325++;
                            break;
                        case "PAN":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve9Value'];
                            $outputCountPAN++;
                            break;
                        case "pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve9Value'];
                            $outputCountPAN++;
                            break;
                        case "Pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve9Value'];
                            $outputCountPAN++;
                            break;
                    } //switch
                }

                if(($arrayOfSamples[$i]->vars['sieve10Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve10Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve10Desc'])
                    {
                        case "20":
                            $sumOf20 = $sumOf20 + $arrayOfSamples[$i]->vars['sieve10Value'];
                            $outputCount20++;
                            break;
                        case "25":
                            $sumOf25 = $sumOf25 + $arrayOfSamples[$i]->vars['sieve10Value'];
                            $outputCount25++;
                            break;
                        case "30":
                            $sumOf30 = $sumOf30 + $arrayOfSamples[$i]->vars['sieve10Value'];
                            $outputCount30++;
                            break;
                        case "35":
                            $sumOf35 = $sumOf35 + $arrayOfSamples[$i]->vars['sieve10Value'];
                            $outputCount35++;
                            break;
                        case "40":
                            $sumOf40 = $sumOf40 + $arrayOfSamples[$i]->vars['sieve10Value'];
                            $outputCount40++;
                            break;
                        case "45":
                            $sumOf45 = $sumOf45 + $arrayOfSamples[$i]->vars['sieve10Value'];
                            $outputCount45++;
                            break;
                        case "50":
                            $sumOf50 = $sumOf50 + $arrayOfSamples[$i]->vars['sieve10Value'];
                            $outputCount50++;
                            break;
                        case "60":
                            $sumOf60 = $sumOf60 + $arrayOfSamples[$i]->vars['sieve10Value'];
                            $outputCount60++;
                            break;
                        case "70":
                            $sumOf70 = $sumOf70 + $arrayOfSamples[$i]->vars['sieve10Value'];
                            $outputCount70++;
                            break;
                        case "80":
                            $sumOf80 = $sumOf80 + $arrayOfSamples[$i]->vars['sieve10Value'];
                            $outputCount80++;
                            break;
                        case "100":
                            $sumOf100 = $sumOf100 + $arrayOfSamples[$i]->vars['sieve10Value'];
                            $outputCount100++;
                            break;
                        case "120":
                            $sumOf120 = $sumOf120 + $arrayOfSamples[$i]->vars['sieve10Value'];
                            $outputCount120++;
                            break;
                        case "140":
                            $sumOf140 = $sumOf140 + $arrayOfSamples[$i]->vars['sieve10Value'];
                            $outputCount140++;
                            break;
                        case "160":
                            $sumOf160 = $sumOf160 + $arrayOfSamples[$i]->vars['sieve10Value'];
                            $outputCount160++;
                            break;
                        case "170":
                            $sumOf170 = $sumOf170 + $arrayOfSamples[$i]->vars['sieve10Value'];
                            $outputCount170++;
                            break;
                        case "200":
                            $sumOf200 = $sumOf200 + $arrayOfSamples[$i]->vars['sieve10Value'];
                            $outputCount200++;
                            break;
                        case "230":
                            $sumOf230 = $sumOf230 + $arrayOfSamples[$i]->vars['sieve10Value'];
                            $outputCount230++;
                            break;
                        case "270":
                            $sumOf270 = $sumOf270 + $arrayOfSamples[$i]->vars['sieve10Value'];
                            $outputCount270++;
                            break;
                        case "325":
                            $sumOf325 = $sumOf325 + $arrayOfSamples[$i]->vars['sieve10Value'];
                            $outputCount325++;
                            break;
                        case "PAN":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve10Value'];
                            $outputCountPAN++;
                            break;
                        case "pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve10Value'];
                            $outputCountPAN++;
                            break;
                        case "Pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve10Value'];
                            $outputCountPAN++;
                            break;
                    } //switch
                }

                if(($arrayOfSamples[$i]->vars['sieve11Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve11Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve11Desc'])
                    {
                        case "20":
                            $sumOf20 = $sumOf20 + $arrayOfSamples[$i]->vars['sieve11Value'];
                            $outputCount20++;
                            break;
                        case "25":
                            $sumOf25 = $sumOf25 + $arrayOfSamples[$i]->vars['sieve11Value'];
                            $outputCount25++;
                            break;
                        case "30":
                            $sumOf30 = $sumOf30 + $arrayOfSamples[$i]->vars['sieve11Value'];
                            $outputCount30++;
                            break;
                        case "35":
                            $sumOf35 = $sumOf35 + $arrayOfSamples[$i]->vars['sieve11Value'];
                            $outputCount35++;
                            break;
                        case "40":
                            $sumOf40 = $sumOf40 + $arrayOfSamples[$i]->vars['sieve11Value'];
                            $outputCount40++;
                            break;
                        case "45":
                            $sumOf45 = $sumOf45 + $arrayOfSamples[$i]->vars['sieve11Value'];
                            $outputCount45++;
                            break;
                        case "50":
                            $sumOf50 = $sumOf50 + $arrayOfSamples[$i]->vars['sieve11Value'];
                            $outputCount50++;
                            break;
                        case "60":
                            $sumOf60 = $sumOf60 + $arrayOfSamples[$i]->vars['sieve11Value'];
                            $outputCount60++;
                            break;
                        case "70":
                            $sumOf70 = $sumOf70 + $arrayOfSamples[$i]->vars['sieve11Value'];
                            $outputCount70++;
                            break;
                        case "80":
                            $sumOf80 = $sumOf80 + $arrayOfSamples[$i]->vars['sieve11Value'];
                            $outputCount80++;
                            break;
                        case "100":
                            $sumOf100 = $sumOf100 + $arrayOfSamples[$i]->vars['sieve11Value'];
                            $outputCount100++;
                            break;
                        case "120":
                            $sumOf120 = $sumOf120 + $arrayOfSamples[$i]->vars['sieve11Value'];
                            $outputCount120++;
                            break;
                        case "140":
                            $sumOf140 = $sumOf140 + $arrayOfSamples[$i]->vars['sieve11Value'];
                            $outputCount140++;
                            break;
                        case "160":
                            $sumOf160 = $sumOf160 + $arrayOfSamples[$i]->vars['sieve11Value'];
                            $outputCount160++;
                            break;
                        case "170":
                            $sumOf170 = $sumOf170 + $arrayOfSamples[$i]->vars['sieve11Value'];
                            $outputCount170++;
                            break;
                        case "200":
                            $sumOf200 = $sumOf200 + $arrayOfSamples[$i]->vars['sieve11Value'];
                            $outputCount200++;
                            break;
                        case "230":
                            $sumOf230 = $sumOf230 + $arrayOfSamples[$i]->vars['sieve11Value'];
                            $outputCount230++;
                            break;
                        case "270":
                            $sumOf270 = $sumOf270 + $arrayOfSamples[$i]->vars['sieve11Value'];
                            $outputCount270++;
                            break;
                        case "325":
                            $sumOf325 = $sumOf325 + $arrayOfSamples[$i]->vars['sieve11Value'];
                            $outputCount325++;
                            break;
                        case "PAN":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve11Value'];
                            $outputCountPAN++;
                            break;
                        case "pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve11Value'];
                            $outputCountPAN++;
                            break;
                        case "Pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve11Value'];
                            $outputCountPAN++;
                            break;
                    } //switch
                }

                if(($arrayOfSamples[$i]->vars['sieve12Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve12Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve12Desc'])
                    {
                        case "20":
                            $sumOf20 = $sumOf20 + $arrayOfSamples[$i]->vars['sieve12Value'];
                            $outputCount20++;
                            break;
                        case "25":
                            $sumOf25 = $sumOf25 + $arrayOfSamples[$i]->vars['sieve12Value'];
                            $outputCount25++;
                            break;
                        case "30":
                            $sumOf30 = $sumOf30 + $arrayOfSamples[$i]->vars['sieve12Value'];
                            $outputCount30++;
                            break;
                        case "35":
                            $sumOf35 = $sumOf35 + $arrayOfSamples[$i]->vars['sieve12Value'];
                            $outputCount35++;
                            break;
                        case "40":
                            $sumOf40 = $sumOf40 + $arrayOfSamples[$i]->vars['sieve12Value'];
                            $outputCount40++;
                            break;
                        case "45":
                            $sumOf45 = $sumOf45 + $arrayOfSamples[$i]->vars['sieve12Value'];
                            $outputCount45++;
                            break;
                        case "50":
                            $sumOf50 = $sumOf50 + $arrayOfSamples[$i]->vars['sieve12Value'];
                            $outputCount50++;
                            break;
                        case "60":
                            $sumOf60 = $sumOf60 + $arrayOfSamples[$i]->vars['sieve12Value'];
                            $outputCount60++;
                            break;
                        case "70":
                            $sumOf70 = $sumOf70 + $arrayOfSamples[$i]->vars['sieve12Value'];
                            $outputCount70++;
                            break;
                        case "80":
                            $sumOf80 = $sumOf80 + $arrayOfSamples[$i]->vars['sieve12Value'];
                            $outputCount80++;
                            break;
                        case "100":
                            $sumOf100 = $sumOf100 + $arrayOfSamples[$i]->vars['sieve12Value'];
                            $outputCount100++;
                            break;
                        case "120":
                            $sumOf120 = $sumOf120 + $arrayOfSamples[$i]->vars['sieve12Value'];
                            $outputCount120++;
                            break;
                        case "140":
                            $sumOf140 = $sumOf140 + $arrayOfSamples[$i]->vars['sieve12Value'];
                            $outputCount140++;
                            break;
                        case "160":
                            $sumOf160 = $sumOf160 + $arrayOfSamples[$i]->vars['sieve12Value'];
                            $outputCount160++;
                            break;
                        case "170":
                            $sumOf170 = $sumOf170 + $arrayOfSamples[$i]->vars['sieve12Value'];
                            $outputCount170++;
                            break;
                        case "200":
                            $sumOf200 = $sumOf200 + $arrayOfSamples[$i]->vars['sieve12Value'];
                            $outputCount200++;
                            break;
                        case "230":
                            $sumOf230 = $sumOf230 + $arrayOfSamples[$i]->vars['sieve12Value'];
                            $outputCount230++;
                            break;
                        case "270":
                            $sumOf270 = $sumOf270 + $arrayOfSamples[$i]->vars['sieve12Value'];
                            $outputCount270++;
                            break;
                        case "325":
                            $sumOf325 = $sumOf325 + $arrayOfSamples[$i]->vars['sieve12Value'];
                            $outputCount325++;
                            break;
                        case "PAN":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve12Value'];
                            $outputCountPAN++;
                            break;
                        case "pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve12Value'];
                            $outputCountPAN++;
                            break;
                        case "Pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve12Value'];
                            $outputCountPAN++;
                            break;
                    } //switch
                }

                if(($arrayOfSamples[$i]->vars['sieve13Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve13Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve13Desc'])
                    {
                        case "20":
                            $sumOf20 = $sumOf20 + $arrayOfSamples[$i]->vars['sieve13Value'];
                            $outputCount20++;
                            break;
                        case "25":
                            $sumOf25 = $sumOf25 + $arrayOfSamples[$i]->vars['sieve13Value'];
                            $outputCount25++;
                            break;
                        case "30":
                            $sumOf30 = $sumOf30 + $arrayOfSamples[$i]->vars['sieve13Value'];
                            $outputCount30++;
                            break;
                        case "35":
                            $sumOf35 = $sumOf35 + $arrayOfSamples[$i]->vars['sieve13Value'];
                            $outputCount35++;
                            break;
                        case "40":
                            $sumOf40 = $sumOf40 + $arrayOfSamples[$i]->vars['sieve13Value'];
                            $outputCount40++;
                            break;
                        case "45":
                            $sumOf45 = $sumOf45 + $arrayOfSamples[$i]->vars['sieve13Value'];
                            $outputCount45++;
                            break;
                        case "50":
                            $sumOf50 = $sumOf50 + $arrayOfSamples[$i]->vars['sieve13Value'];
                            $outputCount50++;
                            break;
                        case "60":
                            $sumOf60 = $sumOf60 + $arrayOfSamples[$i]->vars['sieve13Value'];
                            $outputCount60++;
                            break;
                        case "70":
                            $sumOf70 = $sumOf70 + $arrayOfSamples[$i]->vars['sieve13Value'];
                            $outputCount70++;
                            break;
                        case "80":
                            $sumOf80 = $sumOf80 + $arrayOfSamples[$i]->vars['sieve13Value'];
                            $outputCount80++;
                            break;
                        case "100":
                            $sumOf100 = $sumOf100 + $arrayOfSamples[$i]->vars['sieve13Value'];
                            $outputCount100++;
                            break;
                        case "120":
                            $sumOf120 = $sumOf120 + $arrayOfSamples[$i]->vars['sieve13Value'];
                            $outputCount120++;
                            break;
                        case "140":
                            $sumOf140 = $sumOf140 + $arrayOfSamples[$i]->vars['sieve13Value'];
                            $outputCount140++;
                            break;
                        case "160":
                            $sumOf160 = $sumOf160 + $arrayOfSamples[$i]->vars['sieve13Value'];
                            $outputCount160++;
                            break;
                        case "170":
                            $sumOf170 = $sumOf170 + $arrayOfSamples[$i]->vars['sieve13Value'];
                            $outputCount170++;
                            break;
                        case "200":
                            $sumOf200 = $sumOf200 + $arrayOfSamples[$i]->vars['sieve13Value'];
                            $outputCount200++;
                            break;
                        case "230":
                            $sumOf230 = $sumOf230 + $arrayOfSamples[$i]->vars['sieve13Value'];
                            $outputCount230++;
                            break;
                        case "270":
                            $sumOf270 = $sumOf270 + $arrayOfSamples[$i]->vars['sieve13Value'];
                            $outputCount270++;
                            break;
                        case "325":
                            $sumOf325 = $sumOf325 + $arrayOfSamples[$i]->vars['sieve13Value'];
                            $outputCount325++;
                            break;
                        case "PAN":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve13Value'];
                            $outputCountPAN++;
                            break;
                        case "pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve13Value'];
                            $outputCountPAN++;
                            break;
                        case "Pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve13Value'];
                            $outputCountPAN++;
                            break;
                    } //switch
                }

                if(($arrayOfSamples[$i]->vars['sieve14Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve14Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve14Desc'])
                    {
                        case "20":
                            $sumOf20 = $sumOf20 + $arrayOfSamples[$i]->vars['sieve14Value'];
                            $outputCount20++;
                            break;
                        case "25":
                            $sumOf25 = $sumOf25 + $arrayOfSamples[$i]->vars['sieve14Value'];
                            $outputCount25++;
                            break;
                        case "30":
                            $sumOf30 = $sumOf30 + $arrayOfSamples[$i]->vars['sieve14Value'];
                            $outputCount30++;
                            break;
                        case "35":
                            $sumOf35 = $sumOf35 + $arrayOfSamples[$i]->vars['sieve14Value'];
                            $outputCount35++;
                            break;
                        case "40":
                            $sumOf40 = $sumOf40 + $arrayOfSamples[$i]->vars['sieve14Value'];
                            $outputCount40++;
                            break;
                        case "45":
                            $sumOf45 = $sumOf45 + $arrayOfSamples[$i]->vars['sieve14Value'];
                            $outputCount45++;
                            break;
                        case "50":
                            $sumOf50 = $sumOf50 + $arrayOfSamples[$i]->vars['sieve14Value'];
                            $outputCount50++;
                            break;
                        case "60":
                            $sumOf60 = $sumOf60 + $arrayOfSamples[$i]->vars['sieve14Value'];
                            $outputCount60++;
                            break;
                        case "70":
                            $sumOf70 = $sumOf70 + $arrayOfSamples[$i]->vars['sieve14Value'];
                            $outputCount70++;
                            break;
                        case "80":
                            $sumOf80 = $sumOf80 + $arrayOfSamples[$i]->vars['sieve14Value'];
                            $outputCount80++;
                            break;
                        case "100":
                            $sumOf100 = $sumOf100 + $arrayOfSamples[$i]->vars['sieve14Value'];
                            $outputCount100++;
                            break;
                        case "120":
                            $sumOf120 = $sumOf120 + $arrayOfSamples[$i]->vars['sieve14Value'];
                            $outputCount120++;
                            break;
                        case "140":
                            $sumOf140 = $sumOf140 + $arrayOfSamples[$i]->vars['sieve14Value'];
                            $outputCount140++;
                            break;
                        case "160":
                            $sumOf160 = $sumOf160 + $arrayOfSamples[$i]->vars['sieve14Value'];
                            $outputCount160++;
                            break;
                        case "170":
                            $sumOf170 = $sumOf170 + $arrayOfSamples[$i]->vars['sieve14Value'];
                            $outputCount170++;
                            break;
                        case "200":
                            $sumOf200 = $sumOf200 + $arrayOfSamples[$i]->vars['sieve14Value'];
                            $outputCount200++;
                            break;
                        case "230":
                            $sumOf230 = $sumOf230 + $arrayOfSamples[$i]->vars['sieve14Value'];
                            $outputCount230++;
                            break;
                        case "270":
                            $sumOf270 = $sumOf270 + $arrayOfSamples[$i]->vars['sieve14Value'];
                            $outputCount270++;
                            break;
                        case "325":
                            $sumOf325 = $sumOf325 + $arrayOfSamples[$i]->vars['sieve14Value'];
                            $outputCount325++;
                            break;
                        case "PAN":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve14Value'];
                            $outputCountPAN++;
                            break;
                        case "pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve14Value'];
                            $outputCountPAN++;
                            break;
                        case "Pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve14Value'];
                            $outputCountPAN++;
                            break;
                    } //switch
                }

                if(($arrayOfSamples[$i]->vars['sieve15Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve15Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve15Desc'])
                    {
                        case "20":
                            $sumOf20 = $sumOf20 + $arrayOfSamples[$i]->vars['sieve15Value'];
                            $outputCount20++;
                            break;
                        case "25":
                            $sumOf25 = $sumOf25 + $arrayOfSamples[$i]->vars['sieve15Value'];
                            $outputCount25++;
                            break;
                        case "30":
                            $sumOf30 = $sumOf30 + $arrayOfSamples[$i]->vars['sieve15Value'];
                            $outputCount30++;
                            break;
                        case "35":
                            $sumOf35 = $sumOf35 + $arrayOfSamples[$i]->vars['sieve15Value'];
                            $outputCount35++;
                            break;
                        case "40":
                            $sumOf40 = $sumOf40 + $arrayOfSamples[$i]->vars['sieve15Value'];
                            $outputCount40++;
                            break;
                        case "45":
                            $sumOf45 = $sumOf45 + $arrayOfSamples[$i]->vars['sieve15Value'];
                            $outputCount45++;
                            break;
                        case "50":
                            $sumOf50 = $sumOf50 + $arrayOfSamples[$i]->vars['sieve15Value'];
                            $outputCount50++;
                            break;
                        case "60":
                            $sumOf60 = $sumOf60 + $arrayOfSamples[$i]->vars['sieve15Value'];
                            $outputCount60++;
                            break;
                        case "70":
                            $sumOf70 = $sumOf70 + $arrayOfSamples[$i]->vars['sieve15Value'];
                            $outputCount70++;
                            break;
                        case "80":
                            $sumOf80 = $sumOf80 + $arrayOfSamples[$i]->vars['sieve15Value'];
                            $outputCount80++;
                            break;
                        case "100":
                            $sumOf100 = $sumOf100 + $arrayOfSamples[$i]->vars['sieve15Value'];
                            $outputCount100++;
                            break;
                        case "120":
                            $sumOf120 = $sumOf120 + $arrayOfSamples[$i]->vars['sieve15Value'];
                            $outputCount120++;
                            break;
                        case "140":
                            $sumOf140 = $sumOf140 + $arrayOfSamples[$i]->vars['sieve15Value'];
                            $outputCount140++;
                            break;
                        case "160":
                            $sumOf160 = $sumOf160 + $arrayOfSamples[$i]->vars['sieve15Value'];
                            $outputCount160++;
                            break;
                        case "170":
                            $sumOf170 = $sumOf170 + $arrayOfSamples[$i]->vars['sieve15Value'];
                            $outputCount170++;
                            break;
                        case "200":
                            $sumOf200 = $sumOf200 + $arrayOfSamples[$i]->vars['sieve15Value'];
                            $outputCount200++;
                            break;
                        case "230":
                            $sumOf230 = $sumOf230 + $arrayOfSamples[$i]->vars['sieve15Value'];
                            $outputCount230++;
                            break;
                        case "270":
                            $sumOf270 = $sumOf270 + $arrayOfSamples[$i]->vars['sieve15Value'];
                            $outputCount270++;
                            break;
                        case "325":
                            $sumOf325 = $sumOf325 + $arrayOfSamples[$i]->vars['sieve15Value'];
                            $outputCount325++;
                            break;
                        case "PAN":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve15Value'];
                            $outputCountPAN++;
                            break;
                        case "pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve15Value'];
                            $outputCountPAN++;
                            break;
                        case "Pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve15Value'];
                            $outputCountPAN++;
                            break;
                    } //switch
                }

                if(($arrayOfSamples[$i]->vars['sieve16Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve16Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve16Desc'])
                    {
                        case "20":
                            $sumOf20 = $sumOf20 + $arrayOfSamples[$i]->vars['sieve16Value'];
                            $outputCount20++;
                            break;
                        case "25":
                            $sumOf25 = $sumOf25 + $arrayOfSamples[$i]->vars['sieve16Value'];
                            $outputCount25++;
                            break;
                        case "30":
                            $sumOf30 = $sumOf30 + $arrayOfSamples[$i]->vars['sieve16Value'];
                            $outputCount30++;
                            break;
                        case "35":
                            $sumOf35 = $sumOf35 + $arrayOfSamples[$i]->vars['sieve16Value'];
                            $outputCount35++;
                            break;
                        case "40":
                            $sumOf40 = $sumOf40 + $arrayOfSamples[$i]->vars['sieve16Value'];
                            $outputCount40++;
                            break;
                        case "45":
                            $sumOf45 = $sumOf45 + $arrayOfSamples[$i]->vars['sieve16Value'];
                            $outputCount45++;
                            break;
                        case "50":
                            $sumOf50 = $sumOf50 + $arrayOfSamples[$i]->vars['sieve16Value'];
                            $outputCount50++;
                            break;
                        case "60":
                            $sumOf60 = $sumOf60 + $arrayOfSamples[$i]->vars['sieve16Value'];
                            $outputCount60++;
                            break;
                        case "70":
                            $sumOf70 = $sumOf70 + $arrayOfSamples[$i]->vars['sieve16Value'];
                            $outputCount70++;
                            break;
                        case "80":
                            $sumOf80 = $sumOf80 + $arrayOfSamples[$i]->vars['sieve16Value'];
                            $outputCount80++;
                            break;
                        case "100":
                            $sumOf100 = $sumOf100 + $arrayOfSamples[$i]->vars['sieve16Value'];
                            $outputCount100++;
                            break;
                        case "120":
                            $sumOf120 = $sumOf120 + $arrayOfSamples[$i]->vars['sieve16Value'];
                            $outputCount120++;
                            break;
                        case "140":
                            $sumOf140 = $sumOf140 + $arrayOfSamples[$i]->vars['sieve16Value'];
                            $outputCount140++;
                            break;
                        case "160":
                            $sumOf160 = $sumOf160 + $arrayOfSamples[$i]->vars['sieve16Value'];
                            $outputCount160++;
                            break;
                        case "170":
                            $sumOf170 = $sumOf170 + $arrayOfSamples[$i]->vars['sieve16Value'];
                            $outputCount170++;
                            break;
                        case "200":
                            $sumOf200 = $sumOf200 + $arrayOfSamples[$i]->vars['sieve16Value'];
                            $outputCount200++;
                            break;
                        case "230":
                            $sumOf230 = $sumOf230 + $arrayOfSamples[$i]->vars['sieve16Value'];
                            $outputCount230++;
                            break;
                        case "270":
                            $sumOf270 = $sumOf270 + $arrayOfSamples[$i]->vars['sieve16Value'];
                            $outputCount270++;
                            break;
                        case "325":
                            $sumOf325 = $sumOf325 + $arrayOfSamples[$i]->vars['sieve16Value'];
                            $outputCount325++;
                            break;
                        case "PAN":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve16Value'];
                            $outputCountPAN++;
                            break;
                        case "pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve16Value'];
                            $outputCountPAN++;
                            break;
                        case "Pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve16Value'];
                            $outputCountPAN++;
                            break;
                    } //switch
                }

                if(($arrayOfSamples[$i]->vars['sieve17Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve17Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve17Desc'])
                    {
                        case "20":
                            $sumOf20 = $sumOf20 + $arrayOfSamples[$i]->vars['sieve17Value'];
                            $outputCount20++;
                            break;
                        case "25":
                            $sumOf25 = $sumOf25 + $arrayOfSamples[$i]->vars['sieve17Value'];
                            $outputCount25++;
                            break;
                        case "30":
                            $sumOf30 = $sumOf30 + $arrayOfSamples[$i]->vars['sieve17Value'];
                            $outputCount30++;
                            break;
                        case "35":
                            $sumOf35 = $sumOf35 + $arrayOfSamples[$i]->vars['sieve17Value'];
                            $outputCount35++;
                            break;
                        case "40":
                            $sumOf40 = $sumOf40 + $arrayOfSamples[$i]->vars['sieve17Value'];
                            $outputCount40++;
                            break;
                        case "45":
                            $sumOf45 = $sumOf45 + $arrayOfSamples[$i]->vars['sieve17Value'];
                            $outputCount45++;
                            break;
                        case "50":
                            $sumOf50 = $sumOf50 + $arrayOfSamples[$i]->vars['sieve17Value'];
                            $outputCount50++;
                            break;
                        case "60":
                            $sumOf60 = $sumOf60 + $arrayOfSamples[$i]->vars['sieve17Value'];
                            $outputCount60++;
                            break;
                        case "70":
                            $sumOf70 = $sumOf70 + $arrayOfSamples[$i]->vars['sieve17Value'];
                            $outputCount70++;
                            break;
                        case "80":
                            $sumOf80 = $sumOf80 + $arrayOfSamples[$i]->vars['sieve17Value'];
                            $outputCount80++;
                            break;
                        case "100":
                            $sumOf100 = $sumOf100 + $arrayOfSamples[$i]->vars['sieve17Value'];
                            $outputCount100++;
                            break;
                        case "120":
                            $sumOf120 = $sumOf120 + $arrayOfSamples[$i]->vars['sieve17Value'];
                            $outputCount120++;
                            break;
                        case "140":
                            $sumOf140 = $sumOf140 + $arrayOfSamples[$i]->vars['sieve17Value'];
                            $outputCount140++;
                            break;
                        case "160":
                            $sumOf160 = $sumOf160 + $arrayOfSamples[$i]->vars['sieve17Value'];
                            $outputCount160++;
                            break;
                        case "170":
                            $sumOf170 = $sumOf170 + $arrayOfSamples[$i]->vars['sieve17Value'];
                            $outputCount170++;
                            break;
                        case "200":
                            $sumOf200 = $sumOf200 + $arrayOfSamples[$i]->vars['sieve17Value'];
                            $outputCount200++;
                            break;
                        case "230":
                            $sumOf230 = $sumOf230 + $arrayOfSamples[$i]->vars['sieve17Value'];
                            $outputCount230++;
                            break;
                        case "270":
                            $sumOf270 = $sumOf270 + $arrayOfSamples[$i]->vars['sieve17Value'];
                            $outputCount270++;
                            break;
                        case "325":
                            $sumOf325 = $sumOf325 + $arrayOfSamples[$i]->vars['sieve17Value'];
                            $outputCount325++;
                            break;
                        case "PAN":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve17Value'];
                            $outputCountPAN++;
                            break;
                        case "pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve17Value'];
                            $outputCountPAN++;
                            break;
                        case "Pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve17Value'];
                            $outputCountPAN++;
                            break;
                    } //switch
                }

                if(($arrayOfSamples[$i]->vars['sieve18Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve18Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve18Desc'])
                    {
                        case "20":
                            $sumOf20 = $sumOf20 + $arrayOfSamples[$i]->vars['sieve18Value'];
                            $outputCount20++;
                            break;
                        case "25":
                            $sumOf25 = $sumOf25 + $arrayOfSamples[$i]->vars['sieve18Value'];
                            $outputCount25++;
                            break;
                        case "30":
                            $sumOf30 = $sumOf30 + $arrayOfSamples[$i]->vars['sieve18Value'];
                            $outputCount30++;
                            break;
                        case "35":
                            $sumOf35 = $sumOf35 + $arrayOfSamples[$i]->vars['sieve18Value'];
                            $outputCount35++;
                            break;
                        case "40":
                            $sumOf40 = $sumOf40 + $arrayOfSamples[$i]->vars['sieve18Value'];
                            $outputCount40++;
                            break;
                        case "45":
                            $sumOf45 = $sumOf45 + $arrayOfSamples[$i]->vars['sieve18Value'];
                            $outputCount45++;
                            break;
                        case "50":
                            $sumOf50 = $sumOf50 + $arrayOfSamples[$i]->vars['sieve18Value'];
                            $outputCount50++;
                            break;
                        case "60":
                            $sumOf60 = $sumOf60 + $arrayOfSamples[$i]->vars['sieve18Value'];
                            $outputCount60++;
                            break;
                        case "70":
                            $sumOf70 = $sumOf70 + $arrayOfSamples[$i]->vars['sieve18Value'];
                            $outputCount70++;
                            break;
                        case "80":
                            $sumOf80 = $sumOf80 + $arrayOfSamples[$i]->vars['sieve18Value'];
                            $outputCount80++;
                            break;
                        case "100":
                            $sumOf100 = $sumOf100 + $arrayOfSamples[$i]->vars['sieve18Value'];
                            $outputCount100++;
                            break;
                        case "120":
                            $sumOf120 = $sumOf120 + $arrayOfSamples[$i]->vars['sieve18Value'];
                            $outputCount120++;
                            break;
                        case "140":
                            $sumOf140 = $sumOf140 + $arrayOfSamples[$i]->vars['sieve18Value'];
                            $outputCount140++;
                            break;
                        case "160":
                            $sumOf160 = $sumOf160 + $arrayOfSamples[$i]->vars['sieve18Value'];
                            $outputCount160++;
                            break;
                        case "170":
                            $sumOf170 = $sumOf170 + $arrayOfSamples[$i]->vars['sieve18Value'];
                            $outputCount170++;
                            break;
                        case "200":
                            $sumOf200 = $sumOf200 + $arrayOfSamples[$i]->vars['sieve18Value'];
                            $outputCount200++;
                            break;
                        case "230":
                            $sumOf230 = $sumOf230 + $arrayOfSamples[$i]->vars['sieve18Value'];
                            $outputCount230++;
                            break;
                        case "270":
                            $sumOf270 = $sumOf270 + $arrayOfSamples[$i]->vars['sieve18Value'];
                            $outputCount270++;
                            break;
                        case "325":
                            $sumOf325 = $sumOf325 + $arrayOfSamples[$i]->vars['sieve18Value'];
                            $outputCount325++;
                            break;
                        case "PAN":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve18Value'];
                            $outputCountPAN++;
                            break;
                        case "pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve18Value'];
                            break;
                        case "Pan":
                            $sumOfPAN = $sumOfPAN + $arrayOfSamples[$i]->vars['sieve18Value'];
                            break;
                    } //switch
                }

                //</editor-fold>

                //<editor-fold desc="ADD THE RANGE AND SPECIAL CALCULATIONS">
                if(($arrayOfSamples[$i]->vars['oversizePercent'] != NULL) && ($arrayOfSamples[$i]->vars['oversizePercent'] != 0))
                {
                    $sumOfOversize = $sumOfOversize + $arrayOfSamples[$i]->vars['oversizePercent'];
                    $outputCountOversize++;
                }

                if(($arrayOfSamples[$i]->vars['plus40'] != NULL) && ($arrayOfSamples[$i]->vars['plus40'] != 0))
                {
                    $sumOfPlus40 = $sumOfPlus40 + $arrayOfSamples[$i]->vars['plus40'];
                    $outputCountPlus40++;
                }

                if(($arrayOfSamples[$i]->vars['neg40Plus70'] != NULL) && ($arrayOfSamples[$i]->vars['neg40Plus70'] != 0))
                {
                    $sumOfNeg40Plus70 = $sumOfNeg40Plus70 + $arrayOfSamples[$i]->vars['neg40Plus70'];
                    $outputCountNeg40Plus70++;
                }

                if(($arrayOfSamples[$i]->vars['neg60Plus70'] != NULL) && ($arrayOfSamples[$i]->vars['neg60Plus70'] != 0))
                {
                    $sumOfNeg60Plus70 = $sumOfNeg60Plus70 + $arrayOfSamples[$i]->vars['neg60Plus70'];
                    $outputCountNeg60Plus70++;
                }

                if(($arrayOfSamples[$i]->vars['neg70Plus140'] != NULL) && ($arrayOfSamples[$i]->vars['neg70Plus140'] != 0))
                {
                    $sumOfNeg70Plus140 = $sumOfNeg70Plus140 + $arrayOfSamples[$i]->vars['neg70Plus140'];
                    $outputCountNeg70Plus140++;
                }

                if(($arrayOfSamples[$i]->vars['neg50Plus140'] != NULL) && ($arrayOfSamples[$i]->vars['neg50Plus140'] != 0))
                {
                    $sumOfNeg50Plus140 = $sumOfNeg50Plus140 + $arrayOfSamples[$i]->vars['neg50Plus140'];
                    $outputCountNeg50Plus140++;
                }

                if(($arrayOfSamples[$i]->vars['nearSize'] != NULL) && ($arrayOfSamples[$i]->vars['nearSize'] != 0))
                {
                    $sumOfNearSize = $sumOfNearSize + $arrayOfSamples[$i]->vars['nearSize'];
                    $outputCountNearSize++;
                }

                if(($arrayOfSamples[$i]->vars['neg140Plus325'] != NULL) && ($arrayOfSamples[$i]->vars['neg140Plus325'] != 0))
                {
                    $sumOfNeg140Plus325 = $sumOfNeg140Plus325 + $arrayOfSamples[$i]->vars['neg140Plus325'];
                    $outputCountNeg140Plus325++;
                }

                if(($arrayOfSamples[$i]->vars['neg140'] != NULL) && ($arrayOfSamples[$i]->vars['neg140'] != 0))
                {
                    $sumOfNeg140 = $sumOfNeg140 + $arrayOfSamples[$i]->vars['neg140'];
                    $outputCountNeg140++;
                }
                

                if(($arrayOfSamples[$i]->vars['moisture_rate'] != NULL) && ($arrayOfSamples[$i]->vars['moisture_rate'] != 0))
                {
                    $sumOfMoistureRate = $sumOfMoistureRate + $arrayOfSamples[$i]->vars['moisture_rate'];
                    $outputCountMoistureRate++;
                }

                if(($arrayOfSamples[$i]->vars['percentSolids'] != NULL) && ($arrayOfSamples[$i]->vars['percentSolids'] != 0))
                {
                    $sumOfPercentSolids = $sumOfPercentSolids + $arrayOfSamples[$i]->vars['percentSolids'];
                    $outputCountPercentSolids++;
                }

                if(($arrayOfSamples[$i]->vars['stph'] != NULL) && ($arrayOfSamples[$i]->vars['stph'] != 0))
                {
                    $sumOfSTPH = $sumOfSTPH + $arrayOfSamples[$i]->vars['stph'];
                    $outputCountSTPH++;
                }

                if(($arrayOfSamples[$i]->vars['turbidity'] != NULL) && ($arrayOfSamples[$i]->vars['turbidity'] != 0))
                {
                    $sumOfTurbidity = $sumOfTurbidity + $arrayOfSamples[$i]->vars['turbidity'];
                    $outputCountTurbidity++;
                }

                if(($arrayOfSamples[$i]->vars['recoveryPlusSeventy'] != NULL) && ($arrayOfSamples[$i]->vars['recoveryPlusSeventy'] != 0))
                {
                    $sumOfRecoveryPlusSeventy = $sumOfRecoveryPlusSeventy + $arrayOfSamples[$i]->vars['recoveryPlusSeventy'];
                    $outputCountRecoveryPlusSeventy++;
                }

                if(($arrayOfSamples[$i]->vars['recoveryPlusOneForty'] != NULL) && ($arrayOfSamples[$i]->vars['recoveryPlusOneForty'] != 0))
                {
                    $sumOfRecoveryPlusOneForty = $sumOfRecoveryPlusOneForty + $arrayOfSamples[$i]->vars['recoveryPlusOneForty'];
                    $outputCountRecoveryPlusOneForty++;
                }

                //</editor-fold>
            } //loop
        } //if the sample is complete and active

        //calculate the new averages
        if($outputCount20 > 0){ $arrayOfAveragePercentages[0] = $sumOf20 / $outputCount20; }
        if($outputCount25 > 0){ $arrayOfAveragePercentages[1] = $sumOf25 / $outputCount25; }
        if($outputCount30 > 0){ $arrayOfAveragePercentages[2] = $sumOf30 / $outputCount30; }
        if($outputCount35 > 0){ $arrayOfAveragePercentages[3] = $sumOf35 / $outputCount35; }
        if($outputCount40 > 0){ $arrayOfAveragePercentages[4] = $sumOf40 / $outputCount40; }
        if($outputCount45 > 0){ $arrayOfAveragePercentages[5] = $sumOf45 / $outputCount45; }
        if($outputCount50 > 0){ $arrayOfAveragePercentages[6] = $sumOf50 / $outputCount50; }
        if($outputCount60 > 0){ $arrayOfAveragePercentages[7] = $sumOf60 / $outputCount60; }
        if($outputCount70 > 0){ $arrayOfAveragePercentages[8] = $sumOf70 / $outputCount70; }
        if($outputCount80 > 0){ $arrayOfAveragePercentages[9] = $sumOf80 / $outputCount80; }
        if($outputCount100 > 0){ $arrayOfAveragePercentages[10] = $sumOf100 / $outputCount100; }
        if($outputCount120 > 0){ $arrayOfAveragePercentages[11] = $sumOf120 / $outputCount120; }
        if($outputCount140 > 0){ $arrayOfAveragePercentages[12] = $sumOf140 / $outputCount140; }
        if($outputCount160 > 0){ $arrayOfAveragePercentages[13] = $sumOf160 / $outputCount160; }
        if($outputCount170 > 0){ $arrayOfAveragePercentages[14] = $sumOf170 / $outputCount170; }
        if($outputCount200 > 0){ $arrayOfAveragePercentages[15] = $sumOf200 / $outputCount200; }
        if($outputCount230 > 0){ $arrayOfAveragePercentages[16] = $sumOf230 / $outputCount230; }
        if($outputCount270 > 0){ $arrayOfAveragePercentages[17] = $sumOf270 / $outputCount270; }
        if($outputCount325 > 0){ $arrayOfAveragePercentages[18] = $sumOf325 / $outputCount325; }
        if($outputCountPAN > 0){ $arrayOfAveragePercentages[19] = $sumOfPAN / $outputCountPAN; }

        if($outputCountOversize > 0){ $arrayOfAveragePercentages[20] = $sumOfOversize / $outputCountOversize; }
        if($outputCountPlus40 > 0){ $arrayOfAveragePercentages[21] = $sumOfPlus40 / $outputCountPlus40; }
        if($outputCountNeg40Plus70 > 0){ $arrayOfAveragePercentages[22] = $sumOfNeg40Plus70 / $outputCountNeg40Plus70; }
        if($outputCountNeg60Plus70 > 0){ $arrayOfAveragePercentages[23] = $sumOfNeg60Plus70 / $outputCountNeg60Plus70; }
        if($outputCountNeg70Plus140 > 0){ $arrayOfAveragePercentages[24] = $sumOfNeg70Plus140 / $outputCountNeg70Plus140; }

        if($outputCountMoistureRate > 0){ $arrayOfAveragePercentages[25] = $sumOfMoistureRate / $outputCountMoistureRate; }
        if($outputCountPercentSolids > 0){ $arrayOfAveragePercentages[26] = $sumOfPercentSolids / $outputCountPercentSolids; }
        if($outputCountSTPH > 0){ $arrayOfAveragePercentages[27] = $sumOfSTPH / $outputCountSTPH; }
        if($outputCountTurbidity > 0){ $arrayOfAveragePercentages[28] = $sumOfTurbidity / $outputCountTurbidity; }
        if($outputCountPlusSeventyRecovery > 0){ $arrayOfAveragePercentages[29] = $sumOfPlusSeventyRecovery / $outputCountPlusSeventyRecovery; }
        if($outputCountPlusOneFortyRecovery > 0){ $arrayOfAveragePercentages[30] = $sumOfPlusOneFortyRecovery / $outputCountPlusOneFortyRecovery; }

        if($outputCountNeg50Plus140 > 0){ $arrayOfAveragePercentages[31] = $sumOfNeg50Plus140 / $outputCountNeg50Plus140; }
        if($outputCountNearSize > 0){ $arrayOfAveragePercentages[32] = $sumOfNearSize / $outputCountNearSize; }
        if($outputCountNeg140Plus325 > 0){ $arrayOfAveragePercentages[33] = $sumOfNeg140Plus325 / $outputCountNeg140Plus325; }
        if($outputCountNeg140 > 0){ $arrayOfAveragePercentages[34] = $sumOfNeg140 / $outputCountNeg140; }


    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error calculating averages of sample array.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $arrayOfAveragePercentages;
}


/*******************************************************************************
 * Function Name: getObjectArrayPercentStdDevs($arrayOfSamples, $arrayOfAverages)
 * Description:
 * This function will:
 * Accept a parameter with an object array of sample information.
 * Accept a second parameter with an array of averages.
 * Return an array of objects containing standard deviations of sample final percentages.
 * Is used in the QC Samples page data.
 *******************************************************************************/
function getObjectArrayPercentStdDevs($arrayOfSamples, $arrayOfAverages)
{
    $errorMessage = "gb_qcfunctions.php - getObjectArrayPercentStdDevs() ";
    $arrayOfTotalValues = NULL;
    $arrayOfAverageValues = $arrayOfAverages;
    $outputArray = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    $arrayOfSquaredDifferences = NULL;
    $arrayOfDeviationValues = NULL;

    //initialize values
    $sumOf20 = 0;
    $sumOf25 = 0;
    $sumOf30 = 0;
    $sumOf35 = 0;
    $sumOf40 = 0;
    $sumOf45 = 0;
    $sumOf50 = 0;
    $sumOf60 = 0;
    $sumOf70 = 0;
    $sumOf80 = 0;
    $sumOf100 = 0;
    $sumOf120 = 0;
    $sumOf140 = 0;
    $sumOf160 = 0;
    $sumOf170 = 0;
    $sumOf200 = 0;
    $sumOf230 = 0;
    $sumOf270 = 0;
    $sumOf325 = 0;
    $sumOfPAN = 0;

    $sumOfNeg50Plus140 = 0;
    $sumOfPlusSeventy = 0;
    $sumOfMinusSeventy = 0;
    $sumOfMinusOneForty = 0;
    $sumOfMinusSeventyPlusOneForty = 0;

    $sumOfMoistureRate = 0;
    $sumOfPercentSolids = 0;
    $sumOfSTPH = 0;
    $sumOfTurbidity = 0;
    $sumOfPlusSeventyRecovery = 0;
    $sumOfPlusOneFortyRecovery = 0;

    //= count of n for each position in arrayOfSquaredDifferences
    $outputCount20 = 0;
    $outputCount25 = 0;
    $outputCount30 = 0;
    $outputCount35 = 0;
    $outputCount40 = 0;
    $outputCount45 = 0;
    $outputCount50 = 0;
    $outputCount60 = 0;
    $outputCount70 = 0;
    $outputCount80 = 0;
    $outputCount100 = 0;
    $outputCount120 = 0;
    $outputCount140 = 0;
    $outputCount160 = 0;
    $outputCount170 = 0;
    $outputCount200 = 0;
    $outputCount230 = 0;
    $outputCount270 = 0;
    $outputCount325 = 0;
    $outputCountPAN = 0;

    $outputCountOversize = 0;
    $outputCountPlus40 = 0;
    $outputCountNeg40Plus70 = 0;
    $outputCountNeg60Plus70 = 0;
    $outputCountNeg70Plus140 = 0;
    $outputCountNeg50Plus140 = 0;
    $outputCountNearSize = 0;
    $outputCountNeg140Plus325 = 0;
    $outputCountNeg140 = 0;

    $outputCountMoistureRate = 0;
    $outputCountPercentSolids = 0;
    $outputCountSTPH = 0;
    $outputCountTurbidity = 0;
    $outputCountPlusSeventyRecovery = 0;
    $outputCountPlusOneFortyRecovery = 0;

    //= sum of(values - average)^2
    $arrayOfSquaredDifferences[0] = 0; //20
    $arrayOfSquaredDifferences[1] = 0; //25
    $arrayOfSquaredDifferences[2] = 0; //30
    $arrayOfSquaredDifferences[3] = 0; //35
    $arrayOfSquaredDifferences[4] = 0; //40
    $arrayOfSquaredDifferences[5] = 0; //45
    $arrayOfSquaredDifferences[6] = 0; //50
    $arrayOfSquaredDifferences[7] = 0; //60
    $arrayOfSquaredDifferences[8] = 0; //70
    $arrayOfSquaredDifferences[9] = 0; //80
    $arrayOfSquaredDifferences[10] = 0; //100
    $arrayOfSquaredDifferences[11] = 0; //120
    $arrayOfSquaredDifferences[12] = 0; //140
    $arrayOfSquaredDifferences[13] = 0; //160
    $arrayOfSquaredDifferences[14] = 0; //170
    $arrayOfSquaredDifferences[15] = 0; //200
    $arrayOfSquaredDifferences[16] = 0; //230
    $arrayOfSquaredDifferences[17] = 0; //270
    $arrayOfSquaredDifferences[18] = 0; //325
    $arrayOfSquaredDifferences[19] = 0; //PAN

    $arrayOfSquaredDifferences[20] = 0; // +10 (OS)
    $arrayOfSquaredDifferences[21] = 0; //-10+40
    $arrayOfSquaredDifferences[22] = 0; //-40+70
    $arrayOfSquaredDifferences[23] = 0; //-60+70
    $arrayOfSquaredDifferences[24] = 0; //-70 +140
    $arrayOfSquaredDifferences[31] = 0; //-50+140
    $arrayOfSquaredDifferences[32] = 0; //Near Size
    $arrayOfSquaredDifferences[33] = 0; // -140+325
    $arrayOfSquaredDifferences[34] = 0; //-140

    $arrayOfSquaredDifferences[25] = 0; // Moisture Rate
    $arrayOfSquaredDifferences[26] = 0; // Percent Solids
    $arrayOfSquaredDifferences[27] = 0; // STPH
    $arrayOfSquaredDifferences[28] = 0; // Turbidity
    $arrayOfSquaredDifferences[29] = 0; // Plus Seventy Recovery
    $arrayOfSquaredDifferences[30] = 0; // Plus One Forty Recovery

    //= (arrayOfSquaredDifferences / (n - 1))^0.5
    $arrayOfDeviationValues[0] = 0; //20
    $arrayOfDeviationValues[1] = 0; //25
    $arrayOfDeviationValues[2] = 0; //30
    $arrayOfDeviationValues[3] = 0; //35
    $arrayOfDeviationValues[4] = 0; //40
    $arrayOfDeviationValues[5] = 0; //45
    $arrayOfDeviationValues[6] = 0; //50
    $arrayOfDeviationValues[7] = 0; //60
    $arrayOfDeviationValues[8] = 0; //70
    $arrayOfDeviationValues[9] = 0; //80
    $arrayOfDeviationValues[10] = 0; //100
    $arrayOfDeviationValues[11] = 0; //120
    $arrayOfDeviationValues[12] = 0; //140
    $arrayOfDeviationValues[13] = 0; //160
    $arrayOfDeviationValues[14] = 0; //170
    $arrayOfDeviationValues[15] = 0; //200
    $arrayOfDeviationValues[16] = 0; //230
    $arrayOfDeviationValues[17] = 0; //270
    $arrayOfDeviationValues[18] = 0; //325
    $arrayOfDeviationValues[19] = 0; //PAN

    $arrayOfDeviationValues[20] = 0; // +10 (OS)
    $arrayOfDeviationValues[21] = 0; //-10+40
    $arrayOfDeviationValues[22] = 0; //-40+70
    $arrayOfDeviationValues[23] = 0; //-60+70
    $arrayOfDeviationValues[24] = 0; //-70 +140
    $arrayOfDeviationValues[31] = 0; //-50+140
    $arrayOfDeviationValues[32] = 0; //Near Size
    $arrayOfDeviationValues[33] = 0; // -140+325
    $arrayOfDeviationValues[34] = 0; //-140

    $arrayOfDeviationValues[25] = 0; // Moisture Rate
    $arrayOfDeviationValues[26] = 0; // Percent Solids
    $arrayOfDeviationValues[27] = 0; // STPH
    $arrayOfDeviationValues[28] = 0; // Turbidity
    $arrayOfDeviationValues[29] = 0; // Plus Seventy Recovery
    $arrayOfDeviationValues[30] = 0; // Plus One Forty Recovery

    //loop through the samples
    for($i = 0; $i < count($arrayOfSamples); $i++)
    {

        //if the sample is complete and active
        if(($arrayOfSamples[$i]->vars['isComplete'] == 1) && ($arrayOfSamples[$i]->vars['voidStatusCode'] == 'A'))
        {

            //convert the sieveNValue values to the appropriate sieve size variable
            //check that there is a value for this sieve
            if(($arrayOfSamples[$i]->vars['sieve1Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve1Value'] != 0))
            {
                //add the value's calculation into to the appropriate arrayOfSquaredDifferences; also increase the appropriate outputCount
                switch ($arrayOfSamples[$i]->vars['sieve1Desc'])
                {
                    case "20":
                        $arrayOfSquaredDifferences[0] = $arrayOfSquaredDifferences[0] + pow(($arrayOfSamples[$i]->vars['sieve1Value'] - $arrayOfAverages[0]), 2);
                        $outputCount20++;
                        break;
                    case "25":
                        $arrayOfSquaredDifferences[1] = $arrayOfSquaredDifferences[1] + pow(($arrayOfSamples[$i]->vars['sieve1Value'] - $arrayOfAverages[1]), 2);
                        $outputCount25++;
                        break;
                    case "30":
                        $arrayOfSquaredDifferences[2] = $arrayOfSquaredDifferences[2] + pow(($arrayOfSamples[$i]->vars['sieve1Value'] - $arrayOfAverages[2]), 2);
                        $outputCount30++;
                        break;
                    case "35":
                        $arrayOfSquaredDifferences[3] = $arrayOfSquaredDifferences[3] + pow(($arrayOfSamples[$i]->vars['sieve1Value'] - $arrayOfAverages[3]), 2);
                        $outputCount35++;
                        break;
                    case "40":
                        $arrayOfSquaredDifferences[4] = $arrayOfSquaredDifferences[4] + pow(($arrayOfSamples[$i]->vars['sieve1Value'] - $arrayOfAverages[4]), 2);
                        $outputCount40++;
                        break;
                    case "45":
                        $arrayOfSquaredDifferences[5] = $arrayOfSquaredDifferences[5] + pow(($arrayOfSamples[$i]->vars['sieve1Value'] - $arrayOfAverages[5]), 2);
                        $outputCount45++;
                        break;
                    case "50":
                        $arrayOfSquaredDifferences[6] = $arrayOfSquaredDifferences[6] + pow(($arrayOfSamples[$i]->vars['sieve1Value'] - $arrayOfAverages[6]), 2);
                        $outputCount50++;
                        break;
                    case "60":
                        $arrayOfSquaredDifferences[7] = $arrayOfSquaredDifferences[7] + pow(($arrayOfSamples[$i]->vars['sieve1Value'] - $arrayOfAverages[7]), 2);
                        $outputCount60++;
                        break;
                    case "70":
                        $arrayOfSquaredDifferences[8] = $arrayOfSquaredDifferences[8] + pow(($arrayOfSamples[$i]->vars['sieve1Value'] - $arrayOfAverages[8]), 2);
                        $outputCount70++;
                        break;
                    case "80":
                        $arrayOfSquaredDifferences[9] = $arrayOfSquaredDifferences[9] + pow(($arrayOfSamples[$i]->vars['sieve1Value'] - $arrayOfAverages[9]), 2);
                        $outputCount80++;
                        break;
                    case "100":
                        $arrayOfSquaredDifferences[10] = $arrayOfSquaredDifferences[10] + pow(($arrayOfSamples[$i]->vars['sieve1Value'] - $arrayOfAverages[10]), 2);
                        $outputCount100++;
                        break;
                    case "120":
                        $arrayOfSquaredDifferences[11] = $arrayOfSquaredDifferences[11] + pow(($arrayOfSamples[$i]->vars['sieve1Value'] - $arrayOfAverages[11]), 2);
                        $outputCount120++;
                        break;
                    case "140":
                        $arrayOfSquaredDifferences[12] = $arrayOfSquaredDifferences[12] + pow(($arrayOfSamples[$i]->vars['sieve1Value'] - $arrayOfAverages[12]), 2);
                        $outputCount140++;
                        break;
                    case "160":
                        $arrayOfSquaredDifferences[13] = $arrayOfSquaredDifferences[13] + pow(($arrayOfSamples[$i]->vars['sieve1Value'] - $arrayOfAverages[13]), 2);
                        $outputCount160++;
                        break;
                    case "170":
                        $arrayOfSquaredDifferences[14] = $arrayOfSquaredDifferences[14] + pow(($arrayOfSamples[$i]->vars['sieve1Value'] - $arrayOfAverages[14]), 2);
                        $outputCount170++;
                        break;
                    case "200":
                        $arrayOfSquaredDifferences[15] = $arrayOfSquaredDifferences[15] + pow(($arrayOfSamples[$i]->vars['sieve1Value'] - $arrayOfAverages[15]), 2);
                        $outputCount200++;
                        break;
                    case "230":
                        $arrayOfSquaredDifferences[16] = $arrayOfSquaredDifferences[16] + pow(($arrayOfSamples[$i]->vars['sieve1Value'] - $arrayOfAverages[16]), 2);
                        $outputCount230++;
                        break;
                    case "270":
                        $arrayOfSquaredDifferences[17] = $arrayOfSquaredDifferences[17] + pow(($arrayOfSamples[$i]->vars['sieve1Value'] - $arrayOfAverages[17]), 2);
                        $outputCount270++;
                        break;
                    case "325":
                        $arrayOfSquaredDifferences[18] = $arrayOfSquaredDifferences[18] + pow(($arrayOfSamples[$i]->vars['sieve1Value'] - $arrayOfAverages[18]), 2);
                        $outputCount325++;
                        break;
                    case "PAN":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve1Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve1Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "Pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve1Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                } //switch

                switch ($arrayOfSamples[$i]->vars['sieve2Desc'])
                {
                    case "20":
                        $arrayOfSquaredDifferences[0] = $arrayOfSquaredDifferences[0] + pow(($arrayOfSamples[$i]->vars['sieve2Value'] - $arrayOfAverages[0]), 2);
                        $outputCount20++;
                        break;
                    case "25":
                        $arrayOfSquaredDifferences[1] = $arrayOfSquaredDifferences[1] + pow(($arrayOfSamples[$i]->vars['sieve2Value'] - $arrayOfAverages[1]), 2);
                        $outputCount25++;
                        break;
                    case "30":
                        $arrayOfSquaredDifferences[2] = $arrayOfSquaredDifferences[2] + pow(($arrayOfSamples[$i]->vars['sieve2Value'] - $arrayOfAverages[2]), 2);
                        $outputCount30++;
                        break;
                    case "35":
                        $arrayOfSquaredDifferences[3] = $arrayOfSquaredDifferences[3] + pow(($arrayOfSamples[$i]->vars['sieve2Value'] - $arrayOfAverages[3]), 2);
                        $outputCount35++;
                        break;
                    case "40":
                        $arrayOfSquaredDifferences[4] = $arrayOfSquaredDifferences[4] + pow(($arrayOfSamples[$i]->vars['sieve2Value'] - $arrayOfAverages[4]), 2);
                        $outputCount40++;
                        break;
                    case "45":
                        $arrayOfSquaredDifferences[5] = $arrayOfSquaredDifferences[5] + pow(($arrayOfSamples[$i]->vars['sieve2Value'] - $arrayOfAverages[5]), 2);
                        $outputCount45++;
                        break;
                    case "50":
                        $arrayOfSquaredDifferences[6] = $arrayOfSquaredDifferences[6] + pow(($arrayOfSamples[$i]->vars['sieve2Value'] - $arrayOfAverages[6]), 2);
                        $outputCount50++;
                        break;
                    case "60":
                        $arrayOfSquaredDifferences[7] = $arrayOfSquaredDifferences[7] + pow(($arrayOfSamples[$i]->vars['sieve2Value'] - $arrayOfAverages[7]), 2);
                        $outputCount60++;
                        break;
                    case "70":
                        $arrayOfSquaredDifferences[8] = $arrayOfSquaredDifferences[8] + pow(($arrayOfSamples[$i]->vars['sieve2Value'] - $arrayOfAverages[8]), 2);
                        $outputCount70++;
                        break;
                    case "80":
                        $arrayOfSquaredDifferences[9] = $arrayOfSquaredDifferences[9] + pow(($arrayOfSamples[$i]->vars['sieve2Value'] - $arrayOfAverages[9]), 2);
                        $outputCount80++;
                        break;
                    case "100":
                        $arrayOfSquaredDifferences[10] = $arrayOfSquaredDifferences[10] + pow(($arrayOfSamples[$i]->vars['sieve2Value'] - $arrayOfAverages[10]), 2);
                        $outputCount100++;
                        break;
                    case "120":
                        $arrayOfSquaredDifferences[11] = $arrayOfSquaredDifferences[11] + pow(($arrayOfSamples[$i]->vars['sieve2Value'] - $arrayOfAverages[11]), 2);
                        $outputCount120++;
                        break;
                    case "140":
                        $arrayOfSquaredDifferences[12] = $arrayOfSquaredDifferences[12] + pow(($arrayOfSamples[$i]->vars['sieve2Value'] - $arrayOfAverages[12]), 2);
                        $outputCount140++;
                        break;
                    case "160":
                        $arrayOfSquaredDifferences[13] = $arrayOfSquaredDifferences[13] + pow(($arrayOfSamples[$i]->vars['sieve2Value'] - $arrayOfAverages[13]), 2);
                        $outputCount160++;
                        break;
                    case "170":
                        $arrayOfSquaredDifferences[14] = $arrayOfSquaredDifferences[14] + pow(($arrayOfSamples[$i]->vars['sieve2Value'] - $arrayOfAverages[14]), 2);
                        $outputCount170++;
                        break;
                    case "200":
                        $arrayOfSquaredDifferences[15] = $arrayOfSquaredDifferences[15] + pow(($arrayOfSamples[$i]->vars['sieve2Value'] - $arrayOfAverages[15]), 2);
                        $outputCount200++;
                        break;
                    case "230":
                        $arrayOfSquaredDifferences[16] = $arrayOfSquaredDifferences[16] + pow(($arrayOfSamples[$i]->vars['sieve2Value'] - $arrayOfAverages[16]), 2);
                        $outputCount230++;
                        break;
                    case "270":
                        $arrayOfSquaredDifferences[17] = $arrayOfSquaredDifferences[17] + pow(($arrayOfSamples[$i]->vars['sieve2Value'] - $arrayOfAverages[17]), 2);
                        $outputCount270++;
                        break;
                    case "325":
                        $arrayOfSquaredDifferences[18] = $arrayOfSquaredDifferences[18] + pow(($arrayOfSamples[$i]->vars['sieve2Value'] - $arrayOfAverages[18]), 2);
                        $outputCount325++;
                        break;
                    case "PAN":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve2Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve2Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "Pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve2Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                } //switch

                switch ($arrayOfSamples[$i]->vars['sieve3Desc'])
                {
                    case "20":
                        $arrayOfSquaredDifferences[0] = $arrayOfSquaredDifferences[0] + pow(($arrayOfSamples[$i]->vars['sieve3Value'] - $arrayOfAverages[0]), 2);
                        $outputCount20++;
                        break;
                    case "25":
                        $arrayOfSquaredDifferences[1] = $arrayOfSquaredDifferences[1] + pow(($arrayOfSamples[$i]->vars['sieve3Value'] - $arrayOfAverages[1]), 2);
                        $outputCount25++;
                        break;
                    case "30":
                        $arrayOfSquaredDifferences[2] = $arrayOfSquaredDifferences[2] + pow(($arrayOfSamples[$i]->vars['sieve3Value'] - $arrayOfAverages[2]), 2);
                        $outputCount30++;
                        break;
                    case "35":
                        $arrayOfSquaredDifferences[3] = $arrayOfSquaredDifferences[3] + pow(($arrayOfSamples[$i]->vars['sieve3Value'] - $arrayOfAverages[3]), 2);
                        $outputCount35++;
                        break;
                    case "40":
                        $arrayOfSquaredDifferences[4] = $arrayOfSquaredDifferences[4] + pow(($arrayOfSamples[$i]->vars['sieve3Value'] - $arrayOfAverages[4]), 2);
                        $outputCount40++;
                        break;
                    case "45":
                        $arrayOfSquaredDifferences[5] = $arrayOfSquaredDifferences[5] + pow(($arrayOfSamples[$i]->vars['sieve3Value'] - $arrayOfAverages[5]), 2);
                        $outputCount45++;
                        break;
                    case "50":
                        $arrayOfSquaredDifferences[6] = $arrayOfSquaredDifferences[6] + pow(($arrayOfSamples[$i]->vars['sieve3Value'] - $arrayOfAverages[6]), 2);
                        $outputCount50++;
                        break;
                    case "60":
                        $arrayOfSquaredDifferences[7] = $arrayOfSquaredDifferences[7] + pow(($arrayOfSamples[$i]->vars['sieve3Value'] - $arrayOfAverages[7]), 2);
                        $outputCount60++;
                        break;
                    case "70":
                        $arrayOfSquaredDifferences[8] = $arrayOfSquaredDifferences[8] + pow(($arrayOfSamples[$i]->vars['sieve3Value'] - $arrayOfAverages[8]), 2);
                        $outputCount70++;
                        break;
                    case "80":
                        $arrayOfSquaredDifferences[9] = $arrayOfSquaredDifferences[9] + pow(($arrayOfSamples[$i]->vars['sieve3Value'] - $arrayOfAverages[9]), 2);
                        $outputCount80++;
                        break;
                    case "100":
                        $arrayOfSquaredDifferences[10] = $arrayOfSquaredDifferences[10] + pow(($arrayOfSamples[$i]->vars['sieve3Value'] - $arrayOfAverages[10]), 2);
                        $outputCount100++;
                        break;
                    case "120":
                        $arrayOfSquaredDifferences[11] = $arrayOfSquaredDifferences[11] + pow(($arrayOfSamples[$i]->vars['sieve3Value'] - $arrayOfAverages[11]), 2);
                        $outputCount120++;
                        break;
                    case "140":
                        $arrayOfSquaredDifferences[12] = $arrayOfSquaredDifferences[12] + pow(($arrayOfSamples[$i]->vars['sieve3Value'] - $arrayOfAverages[12]), 2);
                        $outputCount140++;
                        break;
                    case "160":
                        $arrayOfSquaredDifferences[13] = $arrayOfSquaredDifferences[13] + pow(($arrayOfSamples[$i]->vars['sieve3Value'] - $arrayOfAverages[13]), 2);
                        $outputCount160++;
                        break;
                    case "170":
                        $arrayOfSquaredDifferences[14] = $arrayOfSquaredDifferences[14] + pow(($arrayOfSamples[$i]->vars['sieve3Value'] - $arrayOfAverages[14]), 2);
                        $outputCount170++;
                        break;
                    case "200":
                        $arrayOfSquaredDifferences[15] = $arrayOfSquaredDifferences[15] + pow(($arrayOfSamples[$i]->vars['sieve3Value'] - $arrayOfAverages[15]), 2);
                        $outputCount200++;
                        break;
                    case "230":
                        $arrayOfSquaredDifferences[16] = $arrayOfSquaredDifferences[16] + pow(($arrayOfSamples[$i]->vars['sieve3Value'] - $arrayOfAverages[16]), 2);
                        $outputCount230++;
                        break;
                    case "270":
                        $arrayOfSquaredDifferences[17] = $arrayOfSquaredDifferences[17] + pow(($arrayOfSamples[$i]->vars['sieve3Value'] - $arrayOfAverages[17]), 2);
                        $outputCount270++;
                        break;
                    case "325":
                        $arrayOfSquaredDifferences[18] = $arrayOfSquaredDifferences[18] + pow(($arrayOfSamples[$i]->vars['sieve3Value'] - $arrayOfAverages[18]), 2);
                        $outputCount325++;
                        break;
                    case "PAN":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve3Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve3Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "Pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve3Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                } //switch

                switch ($arrayOfSamples[$i]->vars['sieve4Desc'])
                {
                    case "20":
                        $arrayOfSquaredDifferences[0] = $arrayOfSquaredDifferences[0] + pow(($arrayOfSamples[$i]->vars['sieve4Value'] - $arrayOfAverages[0]), 2);
                        $outputCount20++;
                        break;
                    case "25":
                        $arrayOfSquaredDifferences[1] = $arrayOfSquaredDifferences[1] + pow(($arrayOfSamples[$i]->vars['sieve4Value'] - $arrayOfAverages[1]), 2);
                        $outputCount25++;
                        break;
                    case "30":
                        $arrayOfSquaredDifferences[2] = $arrayOfSquaredDifferences[2] + pow(($arrayOfSamples[$i]->vars['sieve4Value'] - $arrayOfAverages[2]), 2);
                        $outputCount30++;
                        break;
                    case "35":
                        $arrayOfSquaredDifferences[3] = $arrayOfSquaredDifferences[3] + pow(($arrayOfSamples[$i]->vars['sieve4Value'] - $arrayOfAverages[3]), 2);
                        $outputCount35++;
                        break;
                    case "40":
                        $arrayOfSquaredDifferences[4] = $arrayOfSquaredDifferences[4] + pow(($arrayOfSamples[$i]->vars['sieve4Value'] - $arrayOfAverages[4]), 2);
                        $outputCount40++;
                        break;
                    case "45":
                        $arrayOfSquaredDifferences[5] = $arrayOfSquaredDifferences[5] + pow(($arrayOfSamples[$i]->vars['sieve4Value'] - $arrayOfAverages[5]), 2);
                        $outputCount45++;
                        break;
                    case "50":
                        $arrayOfSquaredDifferences[6] = $arrayOfSquaredDifferences[6] + pow(($arrayOfSamples[$i]->vars['sieve4Value'] - $arrayOfAverages[6]), 2);
                        $outputCount50++;
                        break;
                    case "60":
                        $arrayOfSquaredDifferences[7] = $arrayOfSquaredDifferences[7] + pow(($arrayOfSamples[$i]->vars['sieve4Value'] - $arrayOfAverages[7]), 2);
                        $outputCount60++;
                        break;
                    case "70":
                        $arrayOfSquaredDifferences[8] = $arrayOfSquaredDifferences[8] + pow(($arrayOfSamples[$i]->vars['sieve4Value'] - $arrayOfAverages[8]), 2);
                        $outputCount70++;
                        break;
                    case "80":
                        $arrayOfSquaredDifferences[9] = $arrayOfSquaredDifferences[9] + pow(($arrayOfSamples[$i]->vars['sieve4Value'] - $arrayOfAverages[9]), 2);
                        $outputCount80++;
                        break;
                    case "100":
                        $arrayOfSquaredDifferences[10] = $arrayOfSquaredDifferences[10] + pow(($arrayOfSamples[$i]->vars['sieve4Value'] - $arrayOfAverages[10]), 2);
                        $outputCount100++;
                        break;
                    case "120":
                        $arrayOfSquaredDifferences[11] = $arrayOfSquaredDifferences[11] + pow(($arrayOfSamples[$i]->vars['sieve4Value'] - $arrayOfAverages[11]), 2);
                        $outputCount120++;
                        break;
                    case "140":
                        $arrayOfSquaredDifferences[12] = $arrayOfSquaredDifferences[12] + pow(($arrayOfSamples[$i]->vars['sieve4Value'] - $arrayOfAverages[12]), 2);
                        $outputCount140++;
                        break;
                    case "160":
                        $arrayOfSquaredDifferences[13] = $arrayOfSquaredDifferences[13] + pow(($arrayOfSamples[$i]->vars['sieve4Value'] - $arrayOfAverages[13]), 2);
                        $outputCount160++;
                        break;
                    case "170":
                        $arrayOfSquaredDifferences[14] = $arrayOfSquaredDifferences[14] + pow(($arrayOfSamples[$i]->vars['sieve4Value'] - $arrayOfAverages[14]), 2);
                        $outputCount170++;
                        break;
                    case "200":
                        $arrayOfSquaredDifferences[15] = $arrayOfSquaredDifferences[15] + pow(($arrayOfSamples[$i]->vars['sieve4Value'] - $arrayOfAverages[15]), 2);
                        $outputCount200++;
                        break;
                    case "230":
                        $arrayOfSquaredDifferences[16] = $arrayOfSquaredDifferences[16] + pow(($arrayOfSamples[$i]->vars['sieve4Value'] - $arrayOfAverages[16]), 2);
                        $outputCount230++;
                        break;
                    case "270":
                        $arrayOfSquaredDifferences[17] = $arrayOfSquaredDifferences[17] + pow(($arrayOfSamples[$i]->vars['sieve4Value'] - $arrayOfAverages[17]), 2);
                        $outputCount270++;
                        break;
                    case "325":
                        $arrayOfSquaredDifferences[18] = $arrayOfSquaredDifferences[18] + pow(($arrayOfSamples[$i]->vars['sieve4Value'] - $arrayOfAverages[18]), 2);
                        $outputCount325++;
                        break;
                    case "PAN":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve4Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve4Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "Pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve4Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                } //switch

                switch ($arrayOfSamples[$i]->vars['sieve5Desc'])
                {
                    case "20":
                        $arrayOfSquaredDifferences[0] = $arrayOfSquaredDifferences[0] + pow(($arrayOfSamples[$i]->vars['sieve5Value'] - $arrayOfAverages[0]), 2);
                        $outputCount20++;
                        break;
                    case "25":
                        $arrayOfSquaredDifferences[1] = $arrayOfSquaredDifferences[1] + pow(($arrayOfSamples[$i]->vars['sieve5Value'] - $arrayOfAverages[1]), 2);
                        $outputCount25++;
                        break;
                    case "30":
                        $arrayOfSquaredDifferences[2] = $arrayOfSquaredDifferences[2] + pow(($arrayOfSamples[$i]->vars['sieve5Value'] - $arrayOfAverages[2]), 2);
                        $outputCount30++;
                        break;
                    case "35":
                        $arrayOfSquaredDifferences[3] = $arrayOfSquaredDifferences[3] + pow(($arrayOfSamples[$i]->vars['sieve5Value'] - $arrayOfAverages[3]), 2);
                        $outputCount35++;
                        break;
                    case "40":
                        $arrayOfSquaredDifferences[4] = $arrayOfSquaredDifferences[4] + pow(($arrayOfSamples[$i]->vars['sieve5Value'] - $arrayOfAverages[4]), 2);
                        $outputCount40++;
                        break;
                    case "45":
                        $arrayOfSquaredDifferences[5] = $arrayOfSquaredDifferences[5] + pow(($arrayOfSamples[$i]->vars['sieve5Value'] - $arrayOfAverages[5]), 2);
                        $outputCount45++;
                        break;
                    case "50":
                        $arrayOfSquaredDifferences[6] = $arrayOfSquaredDifferences[6] + pow(($arrayOfSamples[$i]->vars['sieve5Value'] - $arrayOfAverages[6]), 2);
                        $outputCount50++;
                        break;
                    case "60":
                        $arrayOfSquaredDifferences[7] = $arrayOfSquaredDifferences[7] + pow(($arrayOfSamples[$i]->vars['sieve5Value'] - $arrayOfAverages[7]), 2);
                        $outputCount60++;
                        break;
                    case "70":
                        $arrayOfSquaredDifferences[8] = $arrayOfSquaredDifferences[8] + pow(($arrayOfSamples[$i]->vars['sieve5Value'] - $arrayOfAverages[8]), 2);
                        $outputCount70++;
                        break;
                    case "80":
                        $arrayOfSquaredDifferences[9] = $arrayOfSquaredDifferences[9] + pow(($arrayOfSamples[$i]->vars['sieve5Value'] - $arrayOfAverages[9]), 2);
                        $outputCount80++;
                        break;
                    case "100":
                        $arrayOfSquaredDifferences[10] = $arrayOfSquaredDifferences[10] + pow(($arrayOfSamples[$i]->vars['sieve5Value'] - $arrayOfAverages[10]), 2);
                        $outputCount100++;
                        break;
                    case "120":
                        $arrayOfSquaredDifferences[11] = $arrayOfSquaredDifferences[11] + pow(($arrayOfSamples[$i]->vars['sieve5Value'] - $arrayOfAverages[11]), 2);
                        $outputCount120++;
                        break;
                    case "140":
                        $arrayOfSquaredDifferences[12] = $arrayOfSquaredDifferences[12] + pow(($arrayOfSamples[$i]->vars['sieve5Value'] - $arrayOfAverages[12]), 2);
                        $outputCount140++;
                        break;
                    case "160":
                        $arrayOfSquaredDifferences[13] = $arrayOfSquaredDifferences[13] + pow(($arrayOfSamples[$i]->vars['sieve5Value'] - $arrayOfAverages[13]), 2);
                        $outputCount160++;
                        break;
                    case "170":
                        $arrayOfSquaredDifferences[14] = $arrayOfSquaredDifferences[14] + pow(($arrayOfSamples[$i]->vars['sieve5Value'] - $arrayOfAverages[14]), 2);
                        $outputCount170++;
                        break;
                    case "200":
                        $arrayOfSquaredDifferences[15] = $arrayOfSquaredDifferences[15] + pow(($arrayOfSamples[$i]->vars['sieve5Value'] - $arrayOfAverages[15]), 2);
                        $outputCount200++;
                        break;
                    case "230":
                        $arrayOfSquaredDifferences[16] = $arrayOfSquaredDifferences[16] + pow(($arrayOfSamples[$i]->vars['sieve5Value'] - $arrayOfAverages[16]), 2);
                        $outputCount230++;
                        break;
                    case "270":
                        $arrayOfSquaredDifferences[17] = $arrayOfSquaredDifferences[17] + pow(($arrayOfSamples[$i]->vars['sieve5Value'] - $arrayOfAverages[17]), 2);
                        $outputCount270++;
                        break;
                    case "325":
                        $arrayOfSquaredDifferences[18] = $arrayOfSquaredDifferences[18] + pow(($arrayOfSamples[$i]->vars['sieve5Value'] - $arrayOfAverages[18]), 2);
                        $outputCount325++;
                        break;
                    case "PAN":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve5Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve5Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "Pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve5Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                } //switch

                switch ($arrayOfSamples[$i]->vars['sieve6Desc'])
                {
                    case "20":
                        $arrayOfSquaredDifferences[0] = $arrayOfSquaredDifferences[0] + pow(($arrayOfSamples[$i]->vars['sieve6Value'] - $arrayOfAverages[0]), 2);
                        $outputCount20++;
                        break;
                    case "25":
                        $arrayOfSquaredDifferences[1] = $arrayOfSquaredDifferences[1] + pow(($arrayOfSamples[$i]->vars['sieve6Value'] - $arrayOfAverages[1]), 2);
                        $outputCount25++;
                        break;
                    case "30":
                        $arrayOfSquaredDifferences[2] = $arrayOfSquaredDifferences[2] + pow(($arrayOfSamples[$i]->vars['sieve6Value'] - $arrayOfAverages[2]), 2);
                        $outputCount30++;
                        break;
                    case "35":
                        $arrayOfSquaredDifferences[3] = $arrayOfSquaredDifferences[3] + pow(($arrayOfSamples[$i]->vars['sieve6Value'] - $arrayOfAverages[3]), 2);
                        $outputCount35++;
                        break;
                    case "40":
                        $arrayOfSquaredDifferences[4] = $arrayOfSquaredDifferences[4] + pow(($arrayOfSamples[$i]->vars['sieve6Value'] - $arrayOfAverages[4]), 2);
                        $outputCount40++;
                        break;
                    case "45":
                        $arrayOfSquaredDifferences[5] = $arrayOfSquaredDifferences[5] + pow(($arrayOfSamples[$i]->vars['sieve6Value'] - $arrayOfAverages[5]), 2);
                        $outputCount45++;
                        break;
                    case "50":
                        $arrayOfSquaredDifferences[6] = $arrayOfSquaredDifferences[6] + pow(($arrayOfSamples[$i]->vars['sieve6Value'] - $arrayOfAverages[6]), 2);
                        $outputCount50++;
                        break;
                    case "60":
                        $arrayOfSquaredDifferences[7] = $arrayOfSquaredDifferences[7] + pow(($arrayOfSamples[$i]->vars['sieve6Value'] - $arrayOfAverages[7]), 2);
                        $outputCount60++;
                        break;
                    case "70":
                        $arrayOfSquaredDifferences[8] = $arrayOfSquaredDifferences[8] + pow(($arrayOfSamples[$i]->vars['sieve6Value'] - $arrayOfAverages[8]), 2);
                        $outputCount70++;
                        break;
                    case "80":
                        $arrayOfSquaredDifferences[9] = $arrayOfSquaredDifferences[9] + pow(($arrayOfSamples[$i]->vars['sieve6Value'] - $arrayOfAverages[9]), 2);
                        $outputCount80++;
                        break;
                    case "100":
                        $arrayOfSquaredDifferences[10] = $arrayOfSquaredDifferences[10] + pow(($arrayOfSamples[$i]->vars['sieve6Value'] - $arrayOfAverages[10]), 2);
                        $outputCount100++;
                        break;
                    case "120":
                        $arrayOfSquaredDifferences[11] = $arrayOfSquaredDifferences[11] + pow(($arrayOfSamples[$i]->vars['sieve6Value'] - $arrayOfAverages[11]), 2);
                        $outputCount120++;
                        break;
                    case "140":
                        $arrayOfSquaredDifferences[12] = $arrayOfSquaredDifferences[12] + pow(($arrayOfSamples[$i]->vars['sieve6Value'] - $arrayOfAverages[12]), 2);
                        $outputCount140++;
                        break;
                    case "160":
                        $arrayOfSquaredDifferences[13] = $arrayOfSquaredDifferences[13] + pow(($arrayOfSamples[$i]->vars['sieve6Value'] - $arrayOfAverages[13]), 2);
                        $outputCount160++;
                        break;
                    case "170":
                        $arrayOfSquaredDifferences[14] = $arrayOfSquaredDifferences[14] + pow(($arrayOfSamples[$i]->vars['sieve6Value'] - $arrayOfAverages[14]), 2);
                        $outputCount170++;
                        break;
                    case "200":
                        $arrayOfSquaredDifferences[15] = $arrayOfSquaredDifferences[15] + pow(($arrayOfSamples[$i]->vars['sieve6Value'] - $arrayOfAverages[15]), 2);
                        $outputCount200++;
                        break;
                    case "230":
                        $arrayOfSquaredDifferences[16] = $arrayOfSquaredDifferences[16] + pow(($arrayOfSamples[$i]->vars['sieve6Value'] - $arrayOfAverages[16]), 2);
                        $outputCount230++;
                        break;
                    case "270":
                        $arrayOfSquaredDifferences[17] = $arrayOfSquaredDifferences[17] + pow(($arrayOfSamples[$i]->vars['sieve6Value'] - $arrayOfAverages[17]), 2);
                        $outputCount270++;
                        break;
                    case "325":
                        $arrayOfSquaredDifferences[18] = $arrayOfSquaredDifferences[18] + pow(($arrayOfSamples[$i]->vars['sieve6Value'] - $arrayOfAverages[18]), 2);
                        $outputCount325++;
                        break;
                    case "PAN":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve6Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve6Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "Pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve6Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                } //switch

                switch ($arrayOfSamples[$i]->vars['sieve7Desc'])
                {
                    case "20":
                        $arrayOfSquaredDifferences[0] = $arrayOfSquaredDifferences[0] + pow(($arrayOfSamples[$i]->vars['sieve7Value'] - $arrayOfAverages[0]), 2);
                        $outputCount20++;
                        break;
                    case "25":
                        $arrayOfSquaredDifferences[1] = $arrayOfSquaredDifferences[1] + pow(($arrayOfSamples[$i]->vars['sieve7Value'] - $arrayOfAverages[1]), 2);
                        $outputCount25++;
                        break;
                    case "30":
                        $arrayOfSquaredDifferences[2] = $arrayOfSquaredDifferences[2] + pow(($arrayOfSamples[$i]->vars['sieve7Value'] - $arrayOfAverages[2]), 2);
                        $outputCount30++;
                        break;
                    case "35":
                        $arrayOfSquaredDifferences[3] = $arrayOfSquaredDifferences[3] + pow(($arrayOfSamples[$i]->vars['sieve7Value'] - $arrayOfAverages[3]), 2);
                        $outputCount35++;
                        break;
                    case "40":
                        $arrayOfSquaredDifferences[4] = $arrayOfSquaredDifferences[4] + pow(($arrayOfSamples[$i]->vars['sieve7Value'] - $arrayOfAverages[4]), 2);
                        $outputCount40++;
                        break;
                    case "45":
                        $arrayOfSquaredDifferences[5] = $arrayOfSquaredDifferences[5] + pow(($arrayOfSamples[$i]->vars['sieve7Value'] - $arrayOfAverages[5]), 2);
                        $outputCount45++;
                        break;
                    case "50":
                        $arrayOfSquaredDifferences[6] = $arrayOfSquaredDifferences[6] + pow(($arrayOfSamples[$i]->vars['sieve7Value'] - $arrayOfAverages[6]), 2);
                        $outputCount50++;
                        break;
                    case "60":
                        $arrayOfSquaredDifferences[7] = $arrayOfSquaredDifferences[7] + pow(($arrayOfSamples[$i]->vars['sieve7Value'] - $arrayOfAverages[7]), 2);
                        $outputCount60++;
                        break;
                    case "70":
                        $arrayOfSquaredDifferences[8] = $arrayOfSquaredDifferences[8] + pow(($arrayOfSamples[$i]->vars['sieve7Value'] - $arrayOfAverages[8]), 2);
                        $outputCount70++;
                        break;
                    case "80":
                        $arrayOfSquaredDifferences[9] = $arrayOfSquaredDifferences[9] + pow(($arrayOfSamples[$i]->vars['sieve7Value'] - $arrayOfAverages[9]), 2);
                        $outputCount80++;
                        break;
                    case "100":
                        $arrayOfSquaredDifferences[10] = $arrayOfSquaredDifferences[10] + pow(($arrayOfSamples[$i]->vars['sieve7Value'] - $arrayOfAverages[10]), 2);
                        $outputCount100++;
                        break;
                    case "120":
                        $arrayOfSquaredDifferences[11] = $arrayOfSquaredDifferences[11] + pow(($arrayOfSamples[$i]->vars['sieve7Value'] - $arrayOfAverages[11]), 2);
                        $outputCount120++;
                        break;
                    case "140":
                        $arrayOfSquaredDifferences[12] = $arrayOfSquaredDifferences[12] + pow(($arrayOfSamples[$i]->vars['sieve7Value'] - $arrayOfAverages[12]), 2);
                        $outputCount140++;
                        break;
                    case "160":
                        $arrayOfSquaredDifferences[13] = $arrayOfSquaredDifferences[13] + pow(($arrayOfSamples[$i]->vars['sieve7Value'] - $arrayOfAverages[13]), 2);
                        $outputCount160++;
                        break;
                    case "170":
                        $arrayOfSquaredDifferences[14] = $arrayOfSquaredDifferences[14] + pow(($arrayOfSamples[$i]->vars['sieve7Value'] - $arrayOfAverages[14]), 2);
                        $outputCount170++;
                        break;
                    case "200":
                        $arrayOfSquaredDifferences[15] = $arrayOfSquaredDifferences[15] + pow(($arrayOfSamples[$i]->vars['sieve7Value'] - $arrayOfAverages[15]), 2);
                        $outputCount200++;
                        break;
                    case "230":
                        $arrayOfSquaredDifferences[16] = $arrayOfSquaredDifferences[16] + pow(($arrayOfSamples[$i]->vars['sieve7Value'] - $arrayOfAverages[16]), 2);
                        $outputCount230++;
                        break;
                    case "270":
                        $arrayOfSquaredDifferences[17] = $arrayOfSquaredDifferences[17] + pow(($arrayOfSamples[$i]->vars['sieve7Value'] - $arrayOfAverages[17]), 2);
                        $outputCount270++;
                        break;
                    case "325":
                        $arrayOfSquaredDifferences[18] = $arrayOfSquaredDifferences[18] + pow(($arrayOfSamples[$i]->vars['sieve7Value'] - $arrayOfAverages[18]), 2);
                        $outputCount325++;
                        break;
                    case "PAN":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve7Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve7Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "Pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve7Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                } //switch

                switch ($arrayOfSamples[$i]->vars['sieve8Desc'])
                {
                    case "20":
                        $arrayOfSquaredDifferences[0] = $arrayOfSquaredDifferences[0] + pow(($arrayOfSamples[$i]->vars['sieve8Value'] - $arrayOfAverages[0]), 2);
                        $outputCount20++;
                        break;
                    case "25":
                        $arrayOfSquaredDifferences[1] = $arrayOfSquaredDifferences[1] + pow(($arrayOfSamples[$i]->vars['sieve8Value'] - $arrayOfAverages[1]), 2);
                        $outputCount25++;
                        break;
                    case "30":
                        $arrayOfSquaredDifferences[2] = $arrayOfSquaredDifferences[2] + pow(($arrayOfSamples[$i]->vars['sieve8Value'] - $arrayOfAverages[2]), 2);
                        $outputCount30++;
                        break;
                    case "35":
                        $arrayOfSquaredDifferences[3] = $arrayOfSquaredDifferences[3] + pow(($arrayOfSamples[$i]->vars['sieve8Value'] - $arrayOfAverages[3]), 2);
                        $outputCount35++;
                        break;
                    case "40":
                        $arrayOfSquaredDifferences[4] = $arrayOfSquaredDifferences[4] + pow(($arrayOfSamples[$i]->vars['sieve8Value'] - $arrayOfAverages[4]), 2);
                        $outputCount40++;
                        break;
                    case "45":
                        $arrayOfSquaredDifferences[5] = $arrayOfSquaredDifferences[5] + pow(($arrayOfSamples[$i]->vars['sieve8Value'] - $arrayOfAverages[5]), 2);
                        $outputCount45++;
                        break;
                    case "50":
                        $arrayOfSquaredDifferences[6] = $arrayOfSquaredDifferences[6] + pow(($arrayOfSamples[$i]->vars['sieve8Value'] - $arrayOfAverages[6]), 2);
                        $outputCount50++;
                        break;
                    case "60":
                        $arrayOfSquaredDifferences[7] = $arrayOfSquaredDifferences[7] + pow(($arrayOfSamples[$i]->vars['sieve8Value'] - $arrayOfAverages[7]), 2);
                        $outputCount60++;
                        break;
                    case "70":
                        $arrayOfSquaredDifferences[8] = $arrayOfSquaredDifferences[8] + pow(($arrayOfSamples[$i]->vars['sieve8Value'] - $arrayOfAverages[8]), 2);
                        $outputCount70++;
                        break;
                    case "80":
                        $arrayOfSquaredDifferences[9] = $arrayOfSquaredDifferences[9] + pow(($arrayOfSamples[$i]->vars['sieve8Value'] - $arrayOfAverages[9]), 2);
                        $outputCount80++;
                        break;
                    case "100":
                        $arrayOfSquaredDifferences[10] = $arrayOfSquaredDifferences[10] + pow(($arrayOfSamples[$i]->vars['sieve8Value'] - $arrayOfAverages[10]), 2);
                        $outputCount100++;
                        break;
                    case "120":
                        $arrayOfSquaredDifferences[11] = $arrayOfSquaredDifferences[11] + pow(($arrayOfSamples[$i]->vars['sieve8Value'] - $arrayOfAverages[11]), 2);
                        $outputCount120++;
                        break;
                    case "140":
                        $arrayOfSquaredDifferences[12] = $arrayOfSquaredDifferences[12] + pow(($arrayOfSamples[$i]->vars['sieve8Value'] - $arrayOfAverages[12]), 2);
                        $outputCount140++;
                        break;
                    case "160":
                        $arrayOfSquaredDifferences[13] = $arrayOfSquaredDifferences[13] + pow(($arrayOfSamples[$i]->vars['sieve8Value'] - $arrayOfAverages[13]), 2);
                        $outputCount160++;
                        break;
                    case "170":
                        $arrayOfSquaredDifferences[14] = $arrayOfSquaredDifferences[14] + pow(($arrayOfSamples[$i]->vars['sieve8Value'] - $arrayOfAverages[14]), 2);
                        $outputCount170++;
                        break;
                    case "200":
                        $arrayOfSquaredDifferences[15] = $arrayOfSquaredDifferences[15] + pow(($arrayOfSamples[$i]->vars['sieve8Value'] - $arrayOfAverages[15]), 2);
                        $outputCount200++;
                        break;
                    case "230":
                        $arrayOfSquaredDifferences[16] = $arrayOfSquaredDifferences[16] + pow(($arrayOfSamples[$i]->vars['sieve8Value'] - $arrayOfAverages[16]), 2);
                        $outputCount230++;
                        break;
                    case "270":
                        $arrayOfSquaredDifferences[17] = $arrayOfSquaredDifferences[17] + pow(($arrayOfSamples[$i]->vars['sieve8Value'] - $arrayOfAverages[17]), 2);
                        $outputCount270++;
                        break;
                    case "325":
                        $arrayOfSquaredDifferences[18] = $arrayOfSquaredDifferences[18] + pow(($arrayOfSamples[$i]->vars['sieve8Value'] - $arrayOfAverages[18]), 2);
                        $outputCount325++;
                        break;
                    case "PAN":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve8Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve8Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "Pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve8Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                } //switch

                switch ($arrayOfSamples[$i]->vars['sieve9Desc'])
                {
                    case "20":
                        $arrayOfSquaredDifferences[0] = $arrayOfSquaredDifferences[0] + pow(($arrayOfSamples[$i]->vars['sieve9Value'] - $arrayOfAverages[0]), 2);
                        $outputCount20++;
                        break;
                    case "25":
                        $arrayOfSquaredDifferences[1] = $arrayOfSquaredDifferences[1] + pow(($arrayOfSamples[$i]->vars['sieve9Value'] - $arrayOfAverages[1]), 2);
                        $outputCount25++;
                        break;
                    case "30":
                        $arrayOfSquaredDifferences[2] = $arrayOfSquaredDifferences[2] + pow(($arrayOfSamples[$i]->vars['sieve9Value'] - $arrayOfAverages[2]), 2);
                        $outputCount30++;
                        break;
                    case "35":
                        $arrayOfSquaredDifferences[3] = $arrayOfSquaredDifferences[3] + pow(($arrayOfSamples[$i]->vars['sieve9Value'] - $arrayOfAverages[3]), 2);
                        $outputCount35++;
                        break;
                    case "40":
                        $arrayOfSquaredDifferences[4] = $arrayOfSquaredDifferences[4] + pow(($arrayOfSamples[$i]->vars['sieve9Value'] - $arrayOfAverages[4]), 2);
                        $outputCount40++;
                        break;
                    case "45":
                        $arrayOfSquaredDifferences[5] = $arrayOfSquaredDifferences[5] + pow(($arrayOfSamples[$i]->vars['sieve9Value'] - $arrayOfAverages[5]), 2);
                        $outputCount45++;
                        break;
                    case "50":
                        $arrayOfSquaredDifferences[6] = $arrayOfSquaredDifferences[6] + pow(($arrayOfSamples[$i]->vars['sieve9Value'] - $arrayOfAverages[6]), 2);
                        $outputCount50++;
                        break;
                    case "60":
                        $arrayOfSquaredDifferences[7] = $arrayOfSquaredDifferences[7] + pow(($arrayOfSamples[$i]->vars['sieve9Value'] - $arrayOfAverages[7]), 2);
                        $outputCount60++;
                        break;
                    case "70":
                        $arrayOfSquaredDifferences[8] = $arrayOfSquaredDifferences[8] + pow(($arrayOfSamples[$i]->vars['sieve9Value'] - $arrayOfAverages[8]), 2);
                        $outputCount70++;
                        break;
                    case "80":
                        $arrayOfSquaredDifferences[9] = $arrayOfSquaredDifferences[9] + pow(($arrayOfSamples[$i]->vars['sieve9Value'] - $arrayOfAverages[9]), 2);
                        $outputCount80++;
                        break;
                    case "100":
                        $arrayOfSquaredDifferences[10] = $arrayOfSquaredDifferences[10] + pow(($arrayOfSamples[$i]->vars['sieve9Value'] - $arrayOfAverages[10]), 2);
                        $outputCount100++;
                        break;
                    case "120":
                        $arrayOfSquaredDifferences[11] = $arrayOfSquaredDifferences[11] + pow(($arrayOfSamples[$i]->vars['sieve9Value'] - $arrayOfAverages[11]), 2);
                        $outputCount120++;
                        break;
                    case "140":
                        $arrayOfSquaredDifferences[12] = $arrayOfSquaredDifferences[12] + pow(($arrayOfSamples[$i]->vars['sieve9Value'] - $arrayOfAverages[12]), 2);
                        $outputCount140++;
                        break;
                    case "160":
                        $arrayOfSquaredDifferences[13] = $arrayOfSquaredDifferences[13] + pow(($arrayOfSamples[$i]->vars['sieve9Value'] - $arrayOfAverages[13]), 2);
                        $outputCount160++;
                        break;
                    case "170":
                        $arrayOfSquaredDifferences[14] = $arrayOfSquaredDifferences[14] + pow(($arrayOfSamples[$i]->vars['sieve9Value'] - $arrayOfAverages[14]), 2);
                        $outputCount170++;
                        break;
                    case "200":
                        $arrayOfSquaredDifferences[15] = $arrayOfSquaredDifferences[15] + pow(($arrayOfSamples[$i]->vars['sieve9Value'] - $arrayOfAverages[15]), 2);
                        $outputCount200++;
                        break;
                    case "230":
                        $arrayOfSquaredDifferences[16] = $arrayOfSquaredDifferences[16] + pow(($arrayOfSamples[$i]->vars['sieve9Value'] - $arrayOfAverages[16]), 2);
                        $outputCount230++;
                        break;
                    case "270":
                        $arrayOfSquaredDifferences[17] = $arrayOfSquaredDifferences[17] + pow(($arrayOfSamples[$i]->vars['sieve9Value'] - $arrayOfAverages[17]), 2);
                        $outputCount270++;
                        break;
                    case "325":
                        $arrayOfSquaredDifferences[18] = $arrayOfSquaredDifferences[18] + pow(($arrayOfSamples[$i]->vars['sieve9Value'] - $arrayOfAverages[18]), 2);
                        $outputCount325++;
                        break;
                    case "PAN":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve9Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve9Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "Pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve9Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                } //switch

                switch ($arrayOfSamples[$i]->vars['sieve10Desc'])
                {
                    case "20":
                        $arrayOfSquaredDifferences[0] = $arrayOfSquaredDifferences[0] + pow(($arrayOfSamples[$i]->vars['sieve10Value'] - $arrayOfAverages[0]), 2);
                        $outputCount20++;
                        break;
                    case "25":
                        $arrayOfSquaredDifferences[1] = $arrayOfSquaredDifferences[1] + pow(($arrayOfSamples[$i]->vars['sieve10Value'] - $arrayOfAverages[1]), 2);
                        $outputCount25++;
                        break;
                    case "30":
                        $arrayOfSquaredDifferences[2] = $arrayOfSquaredDifferences[2] + pow(($arrayOfSamples[$i]->vars['sieve10Value'] - $arrayOfAverages[2]), 2);
                        $outputCount30++;
                        break;
                    case "35":
                        $arrayOfSquaredDifferences[3] = $arrayOfSquaredDifferences[3] + pow(($arrayOfSamples[$i]->vars['sieve10Value'] - $arrayOfAverages[3]), 2);
                        $outputCount35++;
                        break;
                    case "40":
                        $arrayOfSquaredDifferences[4] = $arrayOfSquaredDifferences[4] + pow(($arrayOfSamples[$i]->vars['sieve10Value'] - $arrayOfAverages[4]), 2);
                        $outputCount40++;
                        break;
                    case "45":
                        $arrayOfSquaredDifferences[5] = $arrayOfSquaredDifferences[5] + pow(($arrayOfSamples[$i]->vars['sieve10Value'] - $arrayOfAverages[5]), 2);
                        $outputCount45++;
                        break;
                    case "50":
                        $arrayOfSquaredDifferences[6] = $arrayOfSquaredDifferences[6] + pow(($arrayOfSamples[$i]->vars['sieve10Value'] - $arrayOfAverages[6]), 2);
                        $outputCount50++;
                        break;
                    case "60":
                        $arrayOfSquaredDifferences[7] = $arrayOfSquaredDifferences[7] + pow(($arrayOfSamples[$i]->vars['sieve10Value'] - $arrayOfAverages[7]), 2);
                        $outputCount60++;
                        break;
                    case "70":
                        $arrayOfSquaredDifferences[8] = $arrayOfSquaredDifferences[8] + pow(($arrayOfSamples[$i]->vars['sieve10Value'] - $arrayOfAverages[8]), 2);
                        $outputCount70++;
                        break;
                    case "80":
                        $arrayOfSquaredDifferences[9] = $arrayOfSquaredDifferences[9] + pow(($arrayOfSamples[$i]->vars['sieve10Value'] - $arrayOfAverages[9]), 2);
                        $outputCount80++;
                        break;
                    case "100":
                        $arrayOfSquaredDifferences[10] = $arrayOfSquaredDifferences[10] + pow(($arrayOfSamples[$i]->vars['sieve10Value'] - $arrayOfAverages[10]), 2);
                        $outputCount100++;
                        break;
                    case "120":
                        $arrayOfSquaredDifferences[11] = $arrayOfSquaredDifferences[11] + pow(($arrayOfSamples[$i]->vars['sieve10Value'] - $arrayOfAverages[11]), 2);
                        $outputCount120++;
                        break;
                    case "140":
                        $arrayOfSquaredDifferences[12] = $arrayOfSquaredDifferences[12] + pow(($arrayOfSamples[$i]->vars['sieve10Value'] - $arrayOfAverages[12]), 2);
                        $outputCount140++;
                        break;
                    case "160":
                        $arrayOfSquaredDifferences[13] = $arrayOfSquaredDifferences[13] + pow(($arrayOfSamples[$i]->vars['sieve10Value'] - $arrayOfAverages[13]), 2);
                        $outputCount160++;
                        break;
                    case "170":
                        $arrayOfSquaredDifferences[14] = $arrayOfSquaredDifferences[14] + pow(($arrayOfSamples[$i]->vars['sieve10Value'] - $arrayOfAverages[14]), 2);
                        $outputCount170++;
                        break;
                    case "200":
                        $arrayOfSquaredDifferences[15] = $arrayOfSquaredDifferences[15] + pow(($arrayOfSamples[$i]->vars['sieve10Value'] - $arrayOfAverages[15]), 2);
                        $outputCount200++;
                        break;
                    case "230":
                        $arrayOfSquaredDifferences[16] = $arrayOfSquaredDifferences[16] + pow(($arrayOfSamples[$i]->vars['sieve10Value'] - $arrayOfAverages[16]), 2);
                        $outputCount230++;
                        break;
                    case "270":
                        $arrayOfSquaredDifferences[17] = $arrayOfSquaredDifferences[17] + pow(($arrayOfSamples[$i]->vars['sieve10Value'] - $arrayOfAverages[17]), 2);
                        $outputCount270++;
                        break;
                    case "325":
                        $arrayOfSquaredDifferences[18] = $arrayOfSquaredDifferences[18] + pow(($arrayOfSamples[$i]->vars['sieve10Value'] - $arrayOfAverages[18]), 2);
                        $outputCount325++;
                        break;
                    case "PAN":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve10Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve10Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "Pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve10Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                } //switch

                switch ($arrayOfSamples[$i]->vars['sieve11Desc'])
                {
                    case "20":
                        $arrayOfSquaredDifferences[0] = $arrayOfSquaredDifferences[0] + pow(($arrayOfSamples[$i]->vars['sieve11Value'] - $arrayOfAverages[0]), 2);
                        $outputCount20++;
                        break;
                    case "25":
                        $arrayOfSquaredDifferences[1] = $arrayOfSquaredDifferences[1] + pow(($arrayOfSamples[$i]->vars['sieve11Value'] - $arrayOfAverages[1]), 2);
                        $outputCount25++;
                        break;
                    case "30":
                        $arrayOfSquaredDifferences[2] = $arrayOfSquaredDifferences[2] + pow(($arrayOfSamples[$i]->vars['sieve11Value'] - $arrayOfAverages[2]), 2);
                        $outputCount30++;
                        break;
                    case "35":
                        $arrayOfSquaredDifferences[3] = $arrayOfSquaredDifferences[3] + pow(($arrayOfSamples[$i]->vars['sieve11Value'] - $arrayOfAverages[3]), 2);
                        $outputCount35++;
                        break;
                    case "40":
                        $arrayOfSquaredDifferences[4] = $arrayOfSquaredDifferences[4] + pow(($arrayOfSamples[$i]->vars['sieve11Value'] - $arrayOfAverages[4]), 2);
                        $outputCount40++;
                        break;
                    case "45":
                        $arrayOfSquaredDifferences[5] = $arrayOfSquaredDifferences[5] + pow(($arrayOfSamples[$i]->vars['sieve11Value'] - $arrayOfAverages[5]), 2);
                        $outputCount45++;
                        break;
                    case "50":
                        $arrayOfSquaredDifferences[6] = $arrayOfSquaredDifferences[6] + pow(($arrayOfSamples[$i]->vars['sieve11Value'] - $arrayOfAverages[6]), 2);
                        $outputCount50++;
                        break;
                    case "60":
                        $arrayOfSquaredDifferences[7] = $arrayOfSquaredDifferences[7] + pow(($arrayOfSamples[$i]->vars['sieve11Value'] - $arrayOfAverages[7]), 2);
                        $outputCount60++;
                        break;
                    case "70":
                        $arrayOfSquaredDifferences[8] = $arrayOfSquaredDifferences[8] + pow(($arrayOfSamples[$i]->vars['sieve11Value'] - $arrayOfAverages[8]), 2);
                        $outputCount70++;
                        break;
                    case "80":
                        $arrayOfSquaredDifferences[9] = $arrayOfSquaredDifferences[9] + pow(($arrayOfSamples[$i]->vars['sieve11Value'] - $arrayOfAverages[9]), 2);
                        $outputCount80++;
                        break;
                    case "100":
                        $arrayOfSquaredDifferences[10] = $arrayOfSquaredDifferences[10] + pow(($arrayOfSamples[$i]->vars['sieve11Value'] - $arrayOfAverages[10]), 2);
                        $outputCount100++;
                        break;
                    case "120":
                        $arrayOfSquaredDifferences[11] = $arrayOfSquaredDifferences[11] + pow(($arrayOfSamples[$i]->vars['sieve11Value'] - $arrayOfAverages[11]), 2);
                        $outputCount120++;
                        break;
                    case "140":
                        $arrayOfSquaredDifferences[12] = $arrayOfSquaredDifferences[12] + pow(($arrayOfSamples[$i]->vars['sieve11Value'] - $arrayOfAverages[12]), 2);
                        $outputCount140++;
                        break;
                    case "160":
                        $arrayOfSquaredDifferences[13] = $arrayOfSquaredDifferences[13] + pow(($arrayOfSamples[$i]->vars['sieve11Value'] - $arrayOfAverages[13]), 2);
                        $outputCount160++;
                        break;
                    case "170":
                        $arrayOfSquaredDifferences[14] = $arrayOfSquaredDifferences[14] + pow(($arrayOfSamples[$i]->vars['sieve11Value'] - $arrayOfAverages[14]), 2);
                        $outputCount170++;
                        break;
                    case "200":
                        $arrayOfSquaredDifferences[15] = $arrayOfSquaredDifferences[15] + pow(($arrayOfSamples[$i]->vars['sieve11Value'] - $arrayOfAverages[15]), 2);
                        $outputCount200++;
                        break;
                    case "230":
                        $arrayOfSquaredDifferences[16] = $arrayOfSquaredDifferences[16] + pow(($arrayOfSamples[$i]->vars['sieve11Value'] - $arrayOfAverages[16]), 2);
                        $outputCount230++;
                        break;
                    case "270":
                        $arrayOfSquaredDifferences[17] = $arrayOfSquaredDifferences[17] + pow(($arrayOfSamples[$i]->vars['sieve11Value'] - $arrayOfAverages[17]), 2);
                        $outputCount270++;
                        break;
                    case "325":
                        $arrayOfSquaredDifferences[18] = $arrayOfSquaredDifferences[18] + pow(($arrayOfSamples[$i]->vars['sieve11Value'] - $arrayOfAverages[18]), 2);
                        $outputCount325++;
                        break;
                    case "PAN":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve11Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve11Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "Pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve11Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                } //switch

                switch ($arrayOfSamples[$i]->vars['sieve12Desc'])
                {
                    case "20":
                        $arrayOfSquaredDifferences[0] = $arrayOfSquaredDifferences[0] + pow(($arrayOfSamples[$i]->vars['sieve12Value'] - $arrayOfAverages[0]), 2);
                        $outputCount20++;
                        break;
                    case "25":
                        $arrayOfSquaredDifferences[1] = $arrayOfSquaredDifferences[1] + pow(($arrayOfSamples[$i]->vars['sieve12Value'] - $arrayOfAverages[1]), 2);
                        $outputCount25++;
                        break;
                    case "30":
                        $arrayOfSquaredDifferences[2] = $arrayOfSquaredDifferences[2] + pow(($arrayOfSamples[$i]->vars['sieve12Value'] - $arrayOfAverages[2]), 2);
                        $outputCount30++;
                        break;
                    case "35":
                        $arrayOfSquaredDifferences[3] = $arrayOfSquaredDifferences[3] + pow(($arrayOfSamples[$i]->vars['sieve12Value'] - $arrayOfAverages[3]), 2);
                        $outputCount35++;
                        break;
                    case "40":
                        $arrayOfSquaredDifferences[4] = $arrayOfSquaredDifferences[4] + pow(($arrayOfSamples[$i]->vars['sieve12Value'] - $arrayOfAverages[4]), 2);
                        $outputCount40++;
                        break;
                    case "45":
                        $arrayOfSquaredDifferences[5] = $arrayOfSquaredDifferences[5] + pow(($arrayOfSamples[$i]->vars['sieve12Value'] - $arrayOfAverages[5]), 2);
                        $outputCount45++;
                        break;
                    case "50":
                        $arrayOfSquaredDifferences[6] = $arrayOfSquaredDifferences[6] + pow(($arrayOfSamples[$i]->vars['sieve12Value'] - $arrayOfAverages[6]), 2);
                        $outputCount50++;
                        break;
                    case "60":
                        $arrayOfSquaredDifferences[7] = $arrayOfSquaredDifferences[7] + pow(($arrayOfSamples[$i]->vars['sieve12Value'] - $arrayOfAverages[7]), 2);
                        $outputCount60++;
                        break;
                    case "70":
                        $arrayOfSquaredDifferences[8] = $arrayOfSquaredDifferences[8] + pow(($arrayOfSamples[$i]->vars['sieve12Value'] - $arrayOfAverages[8]), 2);
                        $outputCount70++;
                        break;
                    case "80":
                        $arrayOfSquaredDifferences[9] = $arrayOfSquaredDifferences[9] + pow(($arrayOfSamples[$i]->vars['sieve12Value'] - $arrayOfAverages[9]), 2);
                        $outputCount80++;
                        break;
                    case "100":
                        $arrayOfSquaredDifferences[10] = $arrayOfSquaredDifferences[10] + pow(($arrayOfSamples[$i]->vars['sieve12Value'] - $arrayOfAverages[10]), 2);
                        $outputCount100++;
                        break;
                    case "120":
                        $arrayOfSquaredDifferences[11] = $arrayOfSquaredDifferences[11] + pow(($arrayOfSamples[$i]->vars['sieve12Value'] - $arrayOfAverages[11]), 2);
                        $outputCount120++;
                        break;
                    case "140":
                        $arrayOfSquaredDifferences[12] = $arrayOfSquaredDifferences[12] + pow(($arrayOfSamples[$i]->vars['sieve12Value'] - $arrayOfAverages[12]), 2);
                        $outputCount140++;
                        break;
                    case "160":
                        $arrayOfSquaredDifferences[13] = $arrayOfSquaredDifferences[13] + pow(($arrayOfSamples[$i]->vars['sieve12Value'] - $arrayOfAverages[13]), 2);
                        $outputCount160++;
                        break;
                    case "170":
                        $arrayOfSquaredDifferences[14] = $arrayOfSquaredDifferences[14] + pow(($arrayOfSamples[$i]->vars['sieve12Value'] - $arrayOfAverages[14]), 2);
                        $outputCount170++;
                        break;
                    case "200":
                        $arrayOfSquaredDifferences[15] = $arrayOfSquaredDifferences[15] + pow(($arrayOfSamples[$i]->vars['sieve12Value'] - $arrayOfAverages[15]), 2);
                        $outputCount200++;
                        break;
                    case "230":
                        $arrayOfSquaredDifferences[16] = $arrayOfSquaredDifferences[16] + pow(($arrayOfSamples[$i]->vars['sieve12Value'] - $arrayOfAverages[16]), 2);
                        $outputCount230++;
                        break;
                    case "270":
                        $arrayOfSquaredDifferences[17] = $arrayOfSquaredDifferences[17] + pow(($arrayOfSamples[$i]->vars['sieve12Value'] - $arrayOfAverages[17]), 2);
                        $outputCount270++;
                        break;
                    case "325":
                        $arrayOfSquaredDifferences[18] = $arrayOfSquaredDifferences[18] + pow(($arrayOfSamples[$i]->vars['sieve12Value'] - $arrayOfAverages[18]), 2);
                        $outputCount325++;
                        break;
                    case "PAN":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve12Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve12Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "Pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve12Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                } //switch

                switch ($arrayOfSamples[$i]->vars['sieve13Desc'])
                {
                    case "20":
                        $arrayOfSquaredDifferences[0] = $arrayOfSquaredDifferences[0] + pow(($arrayOfSamples[$i]->vars['sieve13Value'] - $arrayOfAverages[0]), 2);
                        $outputCount20++;
                        break;
                    case "25":
                        $arrayOfSquaredDifferences[1] = $arrayOfSquaredDifferences[1] + pow(($arrayOfSamples[$i]->vars['sieve13Value'] - $arrayOfAverages[1]), 2);
                        $outputCount25++;
                        break;
                    case "30":
                        $arrayOfSquaredDifferences[2] = $arrayOfSquaredDifferences[2] + pow(($arrayOfSamples[$i]->vars['sieve13Value'] - $arrayOfAverages[2]), 2);
                        $outputCount30++;
                        break;
                    case "35":
                        $arrayOfSquaredDifferences[3] = $arrayOfSquaredDifferences[3] + pow(($arrayOfSamples[$i]->vars['sieve13Value'] - $arrayOfAverages[3]), 2);
                        $outputCount35++;
                        break;
                    case "40":
                        $arrayOfSquaredDifferences[4] = $arrayOfSquaredDifferences[4] + pow(($arrayOfSamples[$i]->vars['sieve13Value'] - $arrayOfAverages[4]), 2);
                        $outputCount40++;
                        break;
                    case "45":
                        $arrayOfSquaredDifferences[5] = $arrayOfSquaredDifferences[5] + pow(($arrayOfSamples[$i]->vars['sieve13Value'] - $arrayOfAverages[5]), 2);
                        $outputCount45++;
                        break;
                    case "50":
                        $arrayOfSquaredDifferences[6] = $arrayOfSquaredDifferences[6] + pow(($arrayOfSamples[$i]->vars['sieve13Value'] - $arrayOfAverages[6]), 2);
                        $outputCount50++;
                        break;
                    case "60":
                        $arrayOfSquaredDifferences[7] = $arrayOfSquaredDifferences[7] + pow(($arrayOfSamples[$i]->vars['sieve13Value'] - $arrayOfAverages[7]), 2);
                        $outputCount60++;
                        break;
                    case "70":
                        $arrayOfSquaredDifferences[8] = $arrayOfSquaredDifferences[8] + pow(($arrayOfSamples[$i]->vars['sieve13Value'] - $arrayOfAverages[8]), 2);
                        $outputCount70++;
                        break;
                    case "80":
                        $arrayOfSquaredDifferences[9] = $arrayOfSquaredDifferences[9] + pow(($arrayOfSamples[$i]->vars['sieve13Value'] - $arrayOfAverages[9]), 2);
                        $outputCount80++;
                        break;
                    case "100":
                        $arrayOfSquaredDifferences[10] = $arrayOfSquaredDifferences[10] + pow(($arrayOfSamples[$i]->vars['sieve13Value'] - $arrayOfAverages[10]), 2);
                        $outputCount100++;
                        break;
                    case "120":
                        $arrayOfSquaredDifferences[11] = $arrayOfSquaredDifferences[11] + pow(($arrayOfSamples[$i]->vars['sieve13Value'] - $arrayOfAverages[11]), 2);
                        $outputCount120++;
                        break;
                    case "140":
                        $arrayOfSquaredDifferences[12] = $arrayOfSquaredDifferences[12] + pow(($arrayOfSamples[$i]->vars['sieve13Value'] - $arrayOfAverages[12]), 2);
                        $outputCount140++;
                        break;
                    case "160":
                        $arrayOfSquaredDifferences[13] = $arrayOfSquaredDifferences[13] + pow(($arrayOfSamples[$i]->vars['sieve13Value'] - $arrayOfAverages[13]), 2);
                        $outputCount160++;
                        break;
                    case "170":
                        $arrayOfSquaredDifferences[14] = $arrayOfSquaredDifferences[14] + pow(($arrayOfSamples[$i]->vars['sieve13Value'] - $arrayOfAverages[14]), 2);
                        $outputCount170++;
                        break;
                    case "200":
                        $arrayOfSquaredDifferences[15] = $arrayOfSquaredDifferences[15] + pow(($arrayOfSamples[$i]->vars['sieve13Value'] - $arrayOfAverages[15]), 2);
                        $outputCount200++;
                        break;
                    case "230":
                        $arrayOfSquaredDifferences[16] = $arrayOfSquaredDifferences[16] + pow(($arrayOfSamples[$i]->vars['sieve13Value'] - $arrayOfAverages[16]), 2);
                        $outputCount230++;
                        break;
                    case "270":
                        $arrayOfSquaredDifferences[17] = $arrayOfSquaredDifferences[17] + pow(($arrayOfSamples[$i]->vars['sieve13Value'] - $arrayOfAverages[17]), 2);
                        $outputCount270++;
                        break;
                    case "325":
                        $arrayOfSquaredDifferences[18] = $arrayOfSquaredDifferences[18] + pow(($arrayOfSamples[$i]->vars['sieve13Value'] - $arrayOfAverages[18]), 2);
                        $outputCount325++;
                        break;
                    case "PAN":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve13Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve13Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "Pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve13Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                } //switch

                switch ($arrayOfSamples[$i]->vars['sieve14Desc'])
                {
                    case "20":
                        $arrayOfSquaredDifferences[0] = $arrayOfSquaredDifferences[0] + pow(($arrayOfSamples[$i]->vars['sieve14Value'] - $arrayOfAverages[0]), 2);
                        $outputCount20++;
                        break;
                    case "25":
                        $arrayOfSquaredDifferences[1] = $arrayOfSquaredDifferences[1] + pow(($arrayOfSamples[$i]->vars['sieve14Value'] - $arrayOfAverages[1]), 2);
                        $outputCount25++;
                        break;
                    case "30":
                        $arrayOfSquaredDifferences[2] = $arrayOfSquaredDifferences[2] + pow(($arrayOfSamples[$i]->vars['sieve14Value'] - $arrayOfAverages[2]), 2);
                        $outputCount30++;
                        break;
                    case "35":
                        $arrayOfSquaredDifferences[3] = $arrayOfSquaredDifferences[3] + pow(($arrayOfSamples[$i]->vars['sieve14Value'] - $arrayOfAverages[3]), 2);
                        $outputCount35++;
                        break;
                    case "40":
                        $arrayOfSquaredDifferences[4] = $arrayOfSquaredDifferences[4] + pow(($arrayOfSamples[$i]->vars['sieve14Value'] - $arrayOfAverages[4]), 2);
                        $outputCount40++;
                        break;
                    case "45":
                        $arrayOfSquaredDifferences[5] = $arrayOfSquaredDifferences[5] + pow(($arrayOfSamples[$i]->vars['sieve14Value'] - $arrayOfAverages[5]), 2);
                        $outputCount45++;
                        break;
                    case "50":
                        $arrayOfSquaredDifferences[6] = $arrayOfSquaredDifferences[6] + pow(($arrayOfSamples[$i]->vars['sieve14Value'] - $arrayOfAverages[6]), 2);
                        $outputCount50++;
                        break;
                    case "60":
                        $arrayOfSquaredDifferences[7] = $arrayOfSquaredDifferences[7] + pow(($arrayOfSamples[$i]->vars['sieve14Value'] - $arrayOfAverages[7]), 2);
                        $outputCount60++;
                        break;
                    case "70":
                        $arrayOfSquaredDifferences[8] = $arrayOfSquaredDifferences[8] + pow(($arrayOfSamples[$i]->vars['sieve14Value'] - $arrayOfAverages[8]), 2);
                        $outputCount70++;
                        break;
                    case "80":
                        $arrayOfSquaredDifferences[9] = $arrayOfSquaredDifferences[9] + pow(($arrayOfSamples[$i]->vars['sieve14Value'] - $arrayOfAverages[9]), 2);
                        $outputCount80++;
                        break;
                    case "100":
                        $arrayOfSquaredDifferences[10] = $arrayOfSquaredDifferences[10] + pow(($arrayOfSamples[$i]->vars['sieve14Value'] - $arrayOfAverages[10]), 2);
                        $outputCount100++;
                        break;
                    case "120":
                        $arrayOfSquaredDifferences[11] = $arrayOfSquaredDifferences[11] + pow(($arrayOfSamples[$i]->vars['sieve14Value'] - $arrayOfAverages[11]), 2);
                        $outputCount120++;
                        break;
                    case "140":
                        $arrayOfSquaredDifferences[12] = $arrayOfSquaredDifferences[12] + pow(($arrayOfSamples[$i]->vars['sieve14Value'] - $arrayOfAverages[12]), 2);
                        $outputCount140++;
                        break;
                    case "160":
                        $arrayOfSquaredDifferences[13] = $arrayOfSquaredDifferences[13] + pow(($arrayOfSamples[$i]->vars['sieve14Value'] - $arrayOfAverages[13]), 2);
                        $outputCount160++;
                        break;
                    case "170":
                        $arrayOfSquaredDifferences[14] = $arrayOfSquaredDifferences[14] + pow(($arrayOfSamples[$i]->vars['sieve14Value'] - $arrayOfAverages[14]), 2);
                        $outputCount170++;
                        break;
                    case "200":
                        $arrayOfSquaredDifferences[15] = $arrayOfSquaredDifferences[15] + pow(($arrayOfSamples[$i]->vars['sieve14Value'] - $arrayOfAverages[15]), 2);
                        $outputCount200++;
                        break;
                    case "230":
                        $arrayOfSquaredDifferences[16] = $arrayOfSquaredDifferences[16] + pow(($arrayOfSamples[$i]->vars['sieve14Value'] - $arrayOfAverages[16]), 2);
                        $outputCount230++;
                        break;
                    case "270":
                        $arrayOfSquaredDifferences[17] = $arrayOfSquaredDifferences[17] + pow(($arrayOfSamples[$i]->vars['sieve14Value'] - $arrayOfAverages[17]), 2);
                        $outputCount270++;
                        break;
                    case "325":
                        $arrayOfSquaredDifferences[18] = $arrayOfSquaredDifferences[18] + pow(($arrayOfSamples[$i]->vars['sieve14Value'] - $arrayOfAverages[18]), 2);
                        $outputCount325++;
                        break;
                    case "PAN":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve14Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve14Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "Pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve14Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                } //switch

                switch ($arrayOfSamples[$i]->vars['sieve15Desc'])
                {
                    case "20":
                        $arrayOfSquaredDifferences[0] = $arrayOfSquaredDifferences[0] + pow(($arrayOfSamples[$i]->vars['sieve15Value'] - $arrayOfAverages[0]), 2);
                        $outputCount20++;
                        break;
                    case "25":
                        $arrayOfSquaredDifferences[1] = $arrayOfSquaredDifferences[1] + pow(($arrayOfSamples[$i]->vars['sieve15Value'] - $arrayOfAverages[1]), 2);
                        $outputCount25++;
                        break;
                    case "30":
                        $arrayOfSquaredDifferences[2] = $arrayOfSquaredDifferences[2] + pow(($arrayOfSamples[$i]->vars['sieve15Value'] - $arrayOfAverages[2]), 2);
                        $outputCount30++;
                        break;
                    case "35":
                        $arrayOfSquaredDifferences[3] = $arrayOfSquaredDifferences[3] + pow(($arrayOfSamples[$i]->vars['sieve15Value'] - $arrayOfAverages[3]), 2);
                        $outputCount35++;
                        break;
                    case "40":
                        $arrayOfSquaredDifferences[4] = $arrayOfSquaredDifferences[4] + pow(($arrayOfSamples[$i]->vars['sieve15Value'] - $arrayOfAverages[4]), 2);
                        $outputCount40++;
                        break;
                    case "45":
                        $arrayOfSquaredDifferences[5] = $arrayOfSquaredDifferences[5] + pow(($arrayOfSamples[$i]->vars['sieve15Value'] - $arrayOfAverages[5]), 2);
                        $outputCount45++;
                        break;
                    case "50":
                        $arrayOfSquaredDifferences[6] = $arrayOfSquaredDifferences[6] + pow(($arrayOfSamples[$i]->vars['sieve15Value'] - $arrayOfAverages[6]), 2);
                        $outputCount50++;
                        break;
                    case "60":
                        $arrayOfSquaredDifferences[7] = $arrayOfSquaredDifferences[7] + pow(($arrayOfSamples[$i]->vars['sieve15Value'] - $arrayOfAverages[7]), 2);
                        $outputCount60++;
                        break;
                    case "70":
                        $arrayOfSquaredDifferences[8] = $arrayOfSquaredDifferences[8] + pow(($arrayOfSamples[$i]->vars['sieve15Value'] - $arrayOfAverages[8]), 2);
                        $outputCount70++;
                        break;
                    case "80":
                        $arrayOfSquaredDifferences[9] = $arrayOfSquaredDifferences[9] + pow(($arrayOfSamples[$i]->vars['sieve15Value'] - $arrayOfAverages[9]), 2);
                        $outputCount80++;
                        break;
                    case "100":
                        $arrayOfSquaredDifferences[10] = $arrayOfSquaredDifferences[10] + pow(($arrayOfSamples[$i]->vars['sieve15Value'] - $arrayOfAverages[10]), 2);
                        $outputCount100++;
                        break;
                    case "120":
                        $arrayOfSquaredDifferences[11] = $arrayOfSquaredDifferences[11] + pow(($arrayOfSamples[$i]->vars['sieve15Value'] - $arrayOfAverages[11]), 2);
                        $outputCount120++;
                        break;
                    case "140":
                        $arrayOfSquaredDifferences[12] = $arrayOfSquaredDifferences[12] + pow(($arrayOfSamples[$i]->vars['sieve15Value'] - $arrayOfAverages[12]), 2);
                        $outputCount140++;
                        break;
                    case "160":
                        $arrayOfSquaredDifferences[13] = $arrayOfSquaredDifferences[13] + pow(($arrayOfSamples[$i]->vars['sieve15Value'] - $arrayOfAverages[13]), 2);
                        $outputCount160++;
                        break;
                    case "170":
                        $arrayOfSquaredDifferences[14] = $arrayOfSquaredDifferences[14] + pow(($arrayOfSamples[$i]->vars['sieve15Value'] - $arrayOfAverages[14]), 2);
                        $outputCount170++;
                        break;
                    case "200":
                        $arrayOfSquaredDifferences[15] = $arrayOfSquaredDifferences[15] + pow(($arrayOfSamples[$i]->vars['sieve15Value'] - $arrayOfAverages[15]), 2);
                        $outputCount200++;
                        break;
                    case "230":
                        $arrayOfSquaredDifferences[16] = $arrayOfSquaredDifferences[16] + pow(($arrayOfSamples[$i]->vars['sieve15Value'] - $arrayOfAverages[16]), 2);
                        $outputCount230++;
                        break;
                    case "270":
                        $arrayOfSquaredDifferences[17] = $arrayOfSquaredDifferences[17] + pow(($arrayOfSamples[$i]->vars['sieve15Value'] - $arrayOfAverages[17]), 2);
                        $outputCount270++;
                        break;
                    case "325":
                        $arrayOfSquaredDifferences[18] = $arrayOfSquaredDifferences[18] + pow(($arrayOfSamples[$i]->vars['sieve15Value'] - $arrayOfAverages[18]), 2);
                        $outputCount325++;
                        break;
                    case "PAN":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve15Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve15Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "Pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve15Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                } //switch

                switch ($arrayOfSamples[$i]->vars['sieve16Desc'])
                {
                    case "20":
                        $arrayOfSquaredDifferences[0] = $arrayOfSquaredDifferences[0] + pow(($arrayOfSamples[$i]->vars['sieve16Value'] - $arrayOfAverages[0]), 2);
                        $outputCount20++;
                        break;
                    case "25":
                        $arrayOfSquaredDifferences[1] = $arrayOfSquaredDifferences[1] + pow(($arrayOfSamples[$i]->vars['sieve16Value'] - $arrayOfAverages[1]), 2);
                        $outputCount25++;
                        break;
                    case "30":
                        $arrayOfSquaredDifferences[2] = $arrayOfSquaredDifferences[2] + pow(($arrayOfSamples[$i]->vars['sieve16Value'] - $arrayOfAverages[2]), 2);
                        $outputCount30++;
                        break;
                    case "35":
                        $arrayOfSquaredDifferences[3] = $arrayOfSquaredDifferences[3] + pow(($arrayOfSamples[$i]->vars['sieve16Value'] - $arrayOfAverages[3]), 2);
                        $outputCount35++;
                        break;
                    case "40":
                        $arrayOfSquaredDifferences[4] = $arrayOfSquaredDifferences[4] + pow(($arrayOfSamples[$i]->vars['sieve16Value'] - $arrayOfAverages[4]), 2);
                        $outputCount40++;
                        break;
                    case "45":
                        $arrayOfSquaredDifferences[5] = $arrayOfSquaredDifferences[5] + pow(($arrayOfSamples[$i]->vars['sieve16Value'] - $arrayOfAverages[5]), 2);
                        $outputCount45++;
                        break;
                    case "50":
                        $arrayOfSquaredDifferences[6] = $arrayOfSquaredDifferences[6] + pow(($arrayOfSamples[$i]->vars['sieve16Value'] - $arrayOfAverages[6]), 2);
                        $outputCount50++;
                        break;
                    case "60":
                        $arrayOfSquaredDifferences[7] = $arrayOfSquaredDifferences[7] + pow(($arrayOfSamples[$i]->vars['sieve16Value'] - $arrayOfAverages[7]), 2);
                        $outputCount60++;
                        break;
                    case "70":
                        $arrayOfSquaredDifferences[8] = $arrayOfSquaredDifferences[8] + pow(($arrayOfSamples[$i]->vars['sieve16Value'] - $arrayOfAverages[8]), 2);
                        $outputCount70++;
                        break;
                    case "80":
                        $arrayOfSquaredDifferences[9] = $arrayOfSquaredDifferences[9] + pow(($arrayOfSamples[$i]->vars['sieve16Value'] - $arrayOfAverages[9]), 2);
                        $outputCount80++;
                        break;
                    case "100":
                        $arrayOfSquaredDifferences[10] = $arrayOfSquaredDifferences[10] + pow(($arrayOfSamples[$i]->vars['sieve16Value'] - $arrayOfAverages[10]), 2);
                        $outputCount100++;
                        break;
                    case "120":
                        $arrayOfSquaredDifferences[11] = $arrayOfSquaredDifferences[11] + pow(($arrayOfSamples[$i]->vars['sieve16Value'] - $arrayOfAverages[11]), 2);
                        $outputCount120++;
                        break;
                    case "140":
                        $arrayOfSquaredDifferences[12] = $arrayOfSquaredDifferences[12] + pow(($arrayOfSamples[$i]->vars['sieve16Value'] - $arrayOfAverages[12]), 2);
                        $outputCount140++;
                        break;
                    case "160":
                        $arrayOfSquaredDifferences[13] = $arrayOfSquaredDifferences[13] + pow(($arrayOfSamples[$i]->vars['sieve16Value'] - $arrayOfAverages[13]), 2);
                        $outputCount160++;
                        break;
                    case "170":
                        $arrayOfSquaredDifferences[14] = $arrayOfSquaredDifferences[14] + pow(($arrayOfSamples[$i]->vars['sieve16Value'] - $arrayOfAverages[14]), 2);
                        $outputCount170++;
                        break;
                    case "200":
                        $arrayOfSquaredDifferences[15] = $arrayOfSquaredDifferences[15] + pow(($arrayOfSamples[$i]->vars['sieve16Value'] - $arrayOfAverages[15]), 2);
                        $outputCount200++;
                        break;
                    case "230":
                        $arrayOfSquaredDifferences[16] = $arrayOfSquaredDifferences[16] + pow(($arrayOfSamples[$i]->vars['sieve16Value'] - $arrayOfAverages[16]), 2);
                        $outputCount230++;
                        break;
                    case "270":
                        $arrayOfSquaredDifferences[17] = $arrayOfSquaredDifferences[17] + pow(($arrayOfSamples[$i]->vars['sieve16Value'] - $arrayOfAverages[17]), 2);
                        $outputCount270++;
                        break;
                    case "325":
                        $arrayOfSquaredDifferences[18] = $arrayOfSquaredDifferences[18] + pow(($arrayOfSamples[$i]->vars['sieve16Value'] - $arrayOfAverages[18]), 2);
                        $outputCount325++;
                        break;
                    case "PAN":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve16Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve16Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "Pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve16Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                } //switch

                switch ($arrayOfSamples[$i]->vars['sieve17Desc'])
                {
                    case "20":
                        $arrayOfSquaredDifferences[0] = $arrayOfSquaredDifferences[0] + pow(($arrayOfSamples[$i]->vars['sieve17Value'] - $arrayOfAverages[0]), 2);
                        $outputCount20++;
                        break;
                    case "25":
                        $arrayOfSquaredDifferences[1] = $arrayOfSquaredDifferences[1] + pow(($arrayOfSamples[$i]->vars['sieve17Value'] - $arrayOfAverages[1]), 2);
                        $outputCount25++;
                        break;
                    case "30":
                        $arrayOfSquaredDifferences[2] = $arrayOfSquaredDifferences[2] + pow(($arrayOfSamples[$i]->vars['sieve17Value'] - $arrayOfAverages[2]), 2);
                        $outputCount30++;
                        break;
                    case "35":
                        $arrayOfSquaredDifferences[3] = $arrayOfSquaredDifferences[3] + pow(($arrayOfSamples[$i]->vars['sieve17Value'] - $arrayOfAverages[3]), 2);
                        $outputCount35++;
                        break;
                    case "40":
                        $arrayOfSquaredDifferences[4] = $arrayOfSquaredDifferences[4] + pow(($arrayOfSamples[$i]->vars['sieve17Value'] - $arrayOfAverages[4]), 2);
                        $outputCount40++;
                        break;
                    case "45":
                        $arrayOfSquaredDifferences[5] = $arrayOfSquaredDifferences[5] + pow(($arrayOfSamples[$i]->vars['sieve17Value'] - $arrayOfAverages[5]), 2);
                        $outputCount45++;
                        break;
                    case "50":
                        $arrayOfSquaredDifferences[6] = $arrayOfSquaredDifferences[6] + pow(($arrayOfSamples[$i]->vars['sieve17Value'] - $arrayOfAverages[6]), 2);
                        $outputCount50++;
                        break;
                    case "60":
                        $arrayOfSquaredDifferences[7] = $arrayOfSquaredDifferences[7] + pow(($arrayOfSamples[$i]->vars['sieve17Value'] - $arrayOfAverages[7]), 2);
                        $outputCount60++;
                        break;
                    case "70":
                        $arrayOfSquaredDifferences[8] = $arrayOfSquaredDifferences[8] + pow(($arrayOfSamples[$i]->vars['sieve17Value'] - $arrayOfAverages[8]), 2);
                        $outputCount70++;
                        break;
                    case "80":
                        $arrayOfSquaredDifferences[9] = $arrayOfSquaredDifferences[9] + pow(($arrayOfSamples[$i]->vars['sieve17Value'] - $arrayOfAverages[9]), 2);
                        $outputCount80++;
                        break;
                    case "100":
                        $arrayOfSquaredDifferences[10] = $arrayOfSquaredDifferences[10] + pow(($arrayOfSamples[$i]->vars['sieve17Value'] - $arrayOfAverages[10]), 2);
                        $outputCount100++;
                        break;
                    case "120":
                        $arrayOfSquaredDifferences[11] = $arrayOfSquaredDifferences[11] + pow(($arrayOfSamples[$i]->vars['sieve17Value'] - $arrayOfAverages[11]), 2);
                        $outputCount120++;
                        break;
                    case "140":
                        $arrayOfSquaredDifferences[12] = $arrayOfSquaredDifferences[12] + pow(($arrayOfSamples[$i]->vars['sieve17Value'] - $arrayOfAverages[12]), 2);
                        $outputCount140++;
                        break;
                    case "160":
                        $arrayOfSquaredDifferences[13] = $arrayOfSquaredDifferences[13] + pow(($arrayOfSamples[$i]->vars['sieve17Value'] - $arrayOfAverages[13]), 2);
                        $outputCount160++;
                        break;
                    case "170":
                        $arrayOfSquaredDifferences[14] = $arrayOfSquaredDifferences[14] + pow(($arrayOfSamples[$i]->vars['sieve17Value'] - $arrayOfAverages[14]), 2);
                        $outputCount170++;
                        break;
                    case "200":
                        $arrayOfSquaredDifferences[15] = $arrayOfSquaredDifferences[15] + pow(($arrayOfSamples[$i]->vars['sieve17Value'] - $arrayOfAverages[15]), 2);
                        $outputCount200++;
                        break;
                    case "230":
                        $arrayOfSquaredDifferences[16] = $arrayOfSquaredDifferences[16] + pow(($arrayOfSamples[$i]->vars['sieve17Value'] - $arrayOfAverages[16]), 2);
                        $outputCount230++;
                        break;
                    case "270":
                        $arrayOfSquaredDifferences[17] = $arrayOfSquaredDifferences[17] + pow(($arrayOfSamples[$i]->vars['sieve17Value'] - $arrayOfAverages[17]), 2);
                        $outputCount270++;
                        break;
                    case "325":
                        $arrayOfSquaredDifferences[18] = $arrayOfSquaredDifferences[18] + pow(($arrayOfSamples[$i]->vars['sieve17Value'] - $arrayOfAverages[18]), 2);
                        $outputCount325++;
                        break;
                    case "PAN":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve17Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve17Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "Pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve17Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                } //switch

                switch ($arrayOfSamples[$i]->vars['sieve18Desc'])
                {
                    case "20":
                        $arrayOfSquaredDifferences[0] = $arrayOfSquaredDifferences[0] + pow(($arrayOfSamples[$i]->vars['sieve18Value'] - $arrayOfAverages[0]), 2);
                        $outputCount20++;
                        break;
                    case "25":
                        $arrayOfSquaredDifferences[1] = $arrayOfSquaredDifferences[1] + pow(($arrayOfSamples[$i]->vars['sieve18Value'] - $arrayOfAverages[1]), 2);
                        $outputCount25++;
                        break;
                    case "30":
                        $arrayOfSquaredDifferences[2] = $arrayOfSquaredDifferences[2] + pow(($arrayOfSamples[$i]->vars['sieve18Value'] - $arrayOfAverages[2]), 2);
                        $outputCount30++;
                        break;
                    case "35":
                        $arrayOfSquaredDifferences[3] = $arrayOfSquaredDifferences[3] + pow(($arrayOfSamples[$i]->vars['sieve18Value'] - $arrayOfAverages[3]), 2);
                        $outputCount35++;
                        break;
                    case "40":
                        $arrayOfSquaredDifferences[4] = $arrayOfSquaredDifferences[4] + pow(($arrayOfSamples[$i]->vars['sieve18Value'] - $arrayOfAverages[4]), 2);
                        $outputCount40++;
                        break;
                    case "45":
                        $arrayOfSquaredDifferences[5] = $arrayOfSquaredDifferences[5] + pow(($arrayOfSamples[$i]->vars['sieve18Value'] - $arrayOfAverages[5]), 2);
                        $outputCount45++;
                        break;
                    case "50":
                        $arrayOfSquaredDifferences[6] = $arrayOfSquaredDifferences[6] + pow(($arrayOfSamples[$i]->vars['sieve18Value'] - $arrayOfAverages[6]), 2);
                        $outputCount50++;
                        break;
                    case "60":
                        $arrayOfSquaredDifferences[7] = $arrayOfSquaredDifferences[7] + pow(($arrayOfSamples[$i]->vars['sieve18Value'] - $arrayOfAverages[7]), 2);
                        $outputCount60++;
                        break;
                    case "70":
                        $arrayOfSquaredDifferences[8] = $arrayOfSquaredDifferences[8] + pow(($arrayOfSamples[$i]->vars['sieve18Value'] - $arrayOfAverages[8]), 2);
                        $outputCount70++;
                        break;
                    case "80":
                        $arrayOfSquaredDifferences[9] = $arrayOfSquaredDifferences[9] + pow(($arrayOfSamples[$i]->vars['sieve18Value'] - $arrayOfAverages[9]), 2);
                        $outputCount80++;
                        break;
                    case "100":
                        $arrayOfSquaredDifferences[10] = $arrayOfSquaredDifferences[10] + pow(($arrayOfSamples[$i]->vars['sieve18Value'] - $arrayOfAverages[10]), 2);
                        $outputCount100++;
                        break;
                    case "120":
                        $arrayOfSquaredDifferences[11] = $arrayOfSquaredDifferences[11] + pow(($arrayOfSamples[$i]->vars['sieve18Value'] - $arrayOfAverages[11]), 2);
                        $outputCount120++;
                        break;
                    case "140":
                        $arrayOfSquaredDifferences[12] = $arrayOfSquaredDifferences[12] + pow(($arrayOfSamples[$i]->vars['sieve18Value'] - $arrayOfAverages[12]), 2);
                        $outputCount140++;
                        break;
                    case "160":
                        $arrayOfSquaredDifferences[13] = $arrayOfSquaredDifferences[13] + pow(($arrayOfSamples[$i]->vars['sieve18Value'] - $arrayOfAverages[13]), 2);
                        $outputCount160++;
                        break;
                    case "170":
                        $arrayOfSquaredDifferences[14] = $arrayOfSquaredDifferences[14] + pow(($arrayOfSamples[$i]->vars['sieve18Value'] - $arrayOfAverages[14]), 2);
                        $outputCount170++;
                        break;
                    case "200":
                        $arrayOfSquaredDifferences[15] = $arrayOfSquaredDifferences[15] + pow(($arrayOfSamples[$i]->vars['sieve18Value'] - $arrayOfAverages[15]), 2);
                        $outputCount200++;
                        break;
                    case "230":
                        $arrayOfSquaredDifferences[16] = $arrayOfSquaredDifferences[16] + pow(($arrayOfSamples[$i]->vars['sieve18Value'] - $arrayOfAverages[16]), 2);
                        $outputCount230++;
                        break;
                    case "270":
                        $arrayOfSquaredDifferences[17] = $arrayOfSquaredDifferences[17] + pow(($arrayOfSamples[$i]->vars['sieve18Value'] - $arrayOfAverages[17]), 2);
                        $outputCount270++;
                        break;
                    case "325":
                        $arrayOfSquaredDifferences[18] = $arrayOfSquaredDifferences[18] + pow(($arrayOfSamples[$i]->vars['sieve18Value'] - $arrayOfAverages[18]), 2);
                        $outputCount325++;
                        break;
                    case "PAN":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve18Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve18Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                    case "Pan":
                        $arrayOfSquaredDifferences[19] = $arrayOfSquaredDifferences[19] + pow(($arrayOfSamples[$i]->vars['sieve18Value'] - $arrayOfAverages[19]), 2);
                        $outputCountPAN++;
                        break;
                } //switch

                $arrayOfSquaredDifferences[20] = $arrayOfSquaredDifferences[20] + pow(($arrayOfSamples[$i]->vars['oversizePercent'] - $arrayOfAverages[20]), 2);
                $arrayOfSquaredDifferences[21] = $arrayOfSquaredDifferences[21] + pow(($arrayOfSamples[$i]->vars['plus40'] - $arrayOfAverages[21]), 2);
                $arrayOfSquaredDifferences[22] = $arrayOfSquaredDifferences[22] + pow(($arrayOfSamples[$i]->vars['neg40Plus70'] - $arrayOfAverages[22]), 2);
                $arrayOfSquaredDifferences[23] = $arrayOfSquaredDifferences[23] + pow(($arrayOfSamples[$i]->vars['neg60Plus70'] - $arrayOfAverages[23]), 2);
                $arrayOfSquaredDifferences[24] = $arrayOfSquaredDifferences[24] + pow(($arrayOfSamples[$i]->vars['neg70Plus140'] - $arrayOfAverages[24]), 2);
                $arrayOfSquaredDifferences[31] = $arrayOfSquaredDifferences[31] + pow(($arrayOfSamples[$i]->vars['neg50Plus140'] - $arrayOfAverages[31]), 2);
                $arrayOfSquaredDifferences[32] = $arrayOfSquaredDifferences[32] + pow(($arrayOfSamples[$i]->vars['nearSize'] - $arrayOfAverages[32]), 2);
                $arrayOfSquaredDifferences[33] = $arrayOfSquaredDifferences[33] + pow(($arrayOfSamples[$i]->vars['neg140Plus325'] - $arrayOfAverages[33]), 2);
                $arrayOfSquaredDifferences[34] = $arrayOfSquaredDifferences[34] + pow(($arrayOfSamples[$i]->vars['neg140'] - $arrayOfAverages[34]), 2);

                $arrayOfSquaredDifferences[25] = $arrayOfSquaredDifferences[25] + pow(($arrayOfSamples[$i]->vars['moisture_rate'] - $arrayOfAverages[25]), 2);
                $arrayOfSquaredDifferences[26] = $arrayOfSquaredDifferences[26] + pow(($arrayOfSamples[$i]->vars['percentSolids'] - $arrayOfAverages[26]), 2);
                $arrayOfSquaredDifferences[27] = $arrayOfSquaredDifferences[27] + pow(($arrayOfSamples[$i]->vars['stph'] - $arrayOfAverages[27]), 2);
                $arrayOfSquaredDifferences[28] = $arrayOfSquaredDifferences[28] + pow(($arrayOfSamples[$i]->vars['turbidity'] - $arrayOfAverages[28]), 2);
                $arrayOfSquaredDifferences[29] = $arrayOfSquaredDifferences[29] + pow(($arrayOfSamples[$i]->vars['recoveryPlusSeventy'] - $arrayOfAverages[29]), 2);
                $arrayOfSquaredDifferences[30] = $arrayOfSquaredDifferences[30] + pow(($arrayOfSamples[$i]->vars['recoveryPlusOneForty'] - $arrayOfAverages[30]), 2);

                $outputCountOversize++;
                $outputCountPlus40++;
                $outputCountNeg40Plus70++;
                $outputCountNeg60Plus70++;
                $outputCountNeg70Plus140++;
                $outputCountNeg50Plus140++;
                $outputCountNearSize++;
                $outputCountNeg140Plus325++;
                $outputCountNeg140++;

                $outputCountMoistureRate++;
                $outputCountPercentSolids++;
                $outputCountSTPH++;
                $outputCountTurbidity++;
                $outputCountPlusSeventyRecovery++;
                $outputCountPlusOneFortyRecovery++;

            }//if sieve has a value

        }  //if sample is complete and active
    } //loop

    //set the output counts to 2 if they are 1; this is done so that there isn't an error if there is only one value
    if($outputCount20 == 1) { $outputCount20 = 2; }
    if($outputCount25 == 1) { $outputCount25 = 2; }
    if($outputCount30 == 1) { $outputCount30 = 2; }
    if($outputCount35 == 1) { $outputCount35 = 2; }
    if($outputCount40 == 1) { $outputCount40 = 2; }
    if($outputCount45 == 1) { $outputCount45 = 2; }
    if($outputCount50 == 1) { $outputCount50 = 2; }
    if($outputCount60 == 1) { $outputCount60 = 2; }
    if($outputCount70 == 1) { $outputCount70 = 2; }
    if($outputCount80 == 1) { $outputCount80 = 2; }
    if($outputCount100 == 1) { $outputCount100 = 2; }
    if($outputCount120 == 1) { $outputCount120 = 2; }
    if($outputCount140 == 1) { $outputCount140 = 2; }
    if($outputCount160 == 1) { $outputCount160 = 2; }
    if($outputCount170 == 1) { $outputCount170 = 2; }
    if($outputCount200 == 1) { $outputCount200 = 2; }
    if($outputCount230 == 1) { $outputCount230 = 2; }
    if($outputCount270 == 1) { $outputCount270 = 2; }
    if($outputCount325 == 1) { $outputCount325 = 2; }
    if($outputCountPAN == 1) { $outputCountPAN = 2; }

    if($outputCountOversize == 1) { $outputCountOversize = 2; }
    if($outputCountPlus40 == 1) { $outputCountPlus40 = 2; }
    if($outputCountNeg40Plus70 == 1) { $outputCountNeg40Plus70 = 2; }
    if($outputCountNeg60Plus70 == 1) { $outputCountNeg60Plus70 = 2; }
    if($outputCountNeg70Plus140 == 1) { $outputCountNeg70Plus140 = 2; }
    if($outputCountNeg50Plus140 == 1) { $outputCountNeg50Plus140 = 2; }
    if($outputCountNearSize == 1) { $outputCountNearSize = 2; }
    if($outputCountNeg140Plus325 == 1) { $outputCountNeg140Plus325 = 2; }
    if($outputCountNeg140 == 1) { $outputCountNeg140 = 2; }

    if($outputCountMoistureRate == 1) { $outputCountMoistureRate = 2; }
    if($outputCountPercentSolids == 1) { $outputCountPercentSolids = 2; }
    if($outputCountSTPH == 1) { $outputCountSTPH = 2; }
    if($outputCountTurbidity == 1) { $outputCountTurbidity = 2; }
    if($outputCountPlusSeventyRecovery == 1) { $outputCountPlusSeventyRecovery = 2; }
    if($outputCountPlusOneFortyRecovery == 1) { $outputCountPlusOneFortyRecovery = 2; }

    //for each value, if outputCount > 0  then calculate $arrayOfDeviationValues
    if($outputCount20 > 0) { $arrayOfDeviationValues[0] = sqrt($arrayOfSquaredDifferences[0] / ($outputCount20 - 1)); }
    if($outputCount25 > 0) { $arrayOfDeviationValues[1] = sqrt($arrayOfSquaredDifferences[1] / ($outputCount25 - 1)); }
    if($outputCount30 > 0) { $arrayOfDeviationValues[2] = sqrt($arrayOfSquaredDifferences[2] / ($outputCount30 - 1)); }
    if($outputCount35 > 0) { $arrayOfDeviationValues[3] = sqrt($arrayOfSquaredDifferences[3] / ($outputCount35 - 1)); }
    if($outputCount40 > 0) { $arrayOfDeviationValues[4] = sqrt($arrayOfSquaredDifferences[4] / ($outputCount40 - 1)); }
    if($outputCount45 > 0) { $arrayOfDeviationValues[5] = sqrt($arrayOfSquaredDifferences[5] / ($outputCount45 - 1)); }
    if($outputCount50 > 0) { $arrayOfDeviationValues[6] = sqrt($arrayOfSquaredDifferences[6] / ($outputCount50 - 1)); }
    if($outputCount60 > 0) { $arrayOfDeviationValues[7] = sqrt($arrayOfSquaredDifferences[7] / ($outputCount60 - 1)); }
    if($outputCount70 > 0) { $arrayOfDeviationValues[8] = sqrt($arrayOfSquaredDifferences[8] / ($outputCount70 - 1)); }
    if($outputCount80 > 0) { $arrayOfDeviationValues[9] = sqrt($arrayOfSquaredDifferences[9] / ($outputCount80 - 1)); }
    if($outputCount100 > 0) { $arrayOfDeviationValues[10] = sqrt($arrayOfSquaredDifferences[10] / ($outputCount100 - 1)); }
    if($outputCount120 > 0) { $arrayOfDeviationValues[11] = sqrt($arrayOfSquaredDifferences[11] / ($outputCount120 - 1)); }
    if($outputCount140 > 0) { $arrayOfDeviationValues[12] = sqrt($arrayOfSquaredDifferences[12] / ($outputCount140 - 1)); }
    if($outputCount160 > 0) { $arrayOfDeviationValues[13] = sqrt($arrayOfSquaredDifferences[13] / ($outputCount160 - 1)); }
    if($outputCount170 > 0) { $arrayOfDeviationValues[14] = sqrt($arrayOfSquaredDifferences[14] / ($outputCount170 - 1)); }
    if($outputCount200 > 0) { $arrayOfDeviationValues[15] = sqrt($arrayOfSquaredDifferences[15] / ($outputCount200 - 1)); }
    if($outputCount230 > 0) { $arrayOfDeviationValues[16] = sqrt($arrayOfSquaredDifferences[16] / ($outputCount230 - 1)); }
    if($outputCount270 > 0) { $arrayOfDeviationValues[17] = sqrt($arrayOfSquaredDifferences[17] / ($outputCount270 - 1)); }
    if($outputCount325 > 0) { $arrayOfDeviationValues[18] = sqrt($arrayOfSquaredDifferences[18] / ($outputCount325 - 1)); }
    if($outputCountPAN > 0) { $arrayOfDeviationValues[19] = sqrt($arrayOfSquaredDifferences[19] / ($outputCountPAN - 1)); }
    
    if($outputCountOversize > 0) { $arrayOfDeviationValues[20] = sqrt($arrayOfSquaredDifferences[20] / ($outputCountOversize - 1)); }
    if($outputCountPlus40 > 0) { $arrayOfDeviationValues[21] = sqrt($arrayOfSquaredDifferences[21] / ($outputCountPlus40 - 1)); }
    if($outputCountNeg40Plus70 > 0) { $arrayOfDeviationValues[22] = sqrt($arrayOfSquaredDifferences[22] / ($outputCountNeg40Plus70 - 1)); }
    if($outputCountNeg60Plus70 > 0) { $arrayOfDeviationValues[23] = sqrt($arrayOfSquaredDifferences[23] / ($outputCountNeg60Plus70 - 1)); }
    if($outputCountNeg70Plus140 > 0) { $arrayOfDeviationValues[24] = sqrt($arrayOfSquaredDifferences[24] / ($outputCountNeg70Plus140 - 1)); }
    if($outputCountNeg50Plus140 > 0) { $arrayOfDeviationValues[21] = sqrt($arrayOfSquaredDifferences[21] / ($outputCountNeg50Plus140 - 1)); }
    if($outputCountNearSize > 0) { $arrayOfDeviationValues[22] = sqrt($arrayOfSquaredDifferences[22] / ($outputCountNearSize - 1)); }
    if($outputCountNeg140Plus325 > 0) { $arrayOfDeviationValues[23] = sqrt($arrayOfSquaredDifferences[23] / ($outputCountNeg140Plus325 - 1)); }
    if($outputCountNeg140 > 0) { $arrayOfDeviationValues[24] = sqrt($arrayOfSquaredDifferences[24] / ($outputCountNeg140 - 1)); }
    
    if($outputCountMoistureRate > 0) { $arrayOfDeviationValues[25] = sqrt($arrayOfSquaredDifferences[25] / ($outputCountMoistureRate - 1)); }
    if($outputCountPercentSolids > 0) { $arrayOfDeviationValues[26] = sqrt($arrayOfSquaredDifferences[26] / ($outputCountPercentSolids - 1)); }
    if($outputCountSTPH > 0) { $arrayOfDeviationValues[27] = sqrt($arrayOfSquaredDifferences[27] / ($outputCountSTPH - 1)); }
    if($outputCountTurbidity > 0) { $arrayOfDeviationValues[28] = sqrt($arrayOfSquaredDifferences[28] / ($outputCountTurbidity - 1)); }
    if($outputCountPlusSeventyRecovery > 0) { $arrayOfDeviationValues[29] = sqrt($arrayOfSquaredDifferences[29] / ($outputCountPlusSeventyRecovery - 1)); }
    if($outputCountPlusOneFortyRecovery > 0) { $arrayOfDeviationValues[30] = sqrt($arrayOfSquaredDifferences[30] / ($outputCountPlusOneFortyRecovery - 1)); }

    return $arrayOfDeviationValues;
}


/*******************************************************************************
 * Function Name: getObjectArrayPercentMaximums($arrayOfSamples
 * Description:
 * This function will:
 * Accept a parameter with an object array of sample information.
 * Return an array of objects containing maximums of sample final percentages.
 * Is used in the QC Samples page data.
 *******************************************************************************/
function getObjectArrayPercentMaximums($arrayOfSamples)
{
    $arrayOfMaximumPercentages = NULL;

    $errorMessage = "gb_qcfunctions.php - getObjectArrayPercentMaximums() ";
    $arrayOfTotalValues = NULL;
    $arrayOfAverageValues = NULL;
    $outputArray = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {

        $maximum20 = 0;
        $maximum25 = 0;
        $maximum30 = 0;
        $maximum35 = 0;
        $maximum40 = 0;
        $maximum45 = 0;
        $maximum50 = 0;
        $maximum60 = 0;
        $maximum70 = 0;
        $maximum80 = 0;
        $maximum100 = 0;
        $maximum120 = 0;
        $maximum140 = 0;
        $maximum160 = 0;
        $maximum170 = 0;
        $maximum200 = 0;
        $maximum230 = 0;
        $maximum270 = 0;
        $maximum325 = 0;
        $maximumPAN = 0;

        $maximumOversize = 0;
        $maximumPlus40 = 0;
        $maximumNeg40Plus70 = 0;
        $maximumNeg60Plus70 = 0;
        $maximumNeg70Plus140 = 0;
        $maximumNeg50Plus140 = 0;
        $maximumNearSize = 0;
        $maximumNeg140Plus325 = 0;
        $maximumNeg140 = 0;

        $maximumMoistureRate = 0;
        $maximumPercentSolids = 0;
        $maximumSTPH = 0;
        $maximumTurbidity = 0;
        $maximumPlusSeventyRecovery = 0;
        $maximumPlusOneFortyRecovery = 0;

        $arrayOfMaximumPercentages[0] = 0; //20
        $arrayOfMaximumPercentages[1] = 0; //25
        $arrayOfMaximumPercentages[2] = 0; //30
        $arrayOfMaximumPercentages[3] = 0; //35
        $arrayOfMaximumPercentages[4] = 0; //40
        $arrayOfMaximumPercentages[5] = 0; //45
        $arrayOfMaximumPercentages[6] = 0; //50
        $arrayOfMaximumPercentages[7] = 0; //60
        $arrayOfMaximumPercentages[8] = 0; //70
        $arrayOfMaximumPercentages[9] = 0; //80
        $arrayOfMaximumPercentages[10] = 0; //100
        $arrayOfMaximumPercentages[11] = 0; //120
        $arrayOfMaximumPercentages[12] = 0; //140
        $arrayOfMaximumPercentages[13] = 0; //160
        $arrayOfMaximumPercentages[14] = 0; //170
        $arrayOfMaximumPercentages[15] = 0; //200
        $arrayOfMaximumPercentages[16] = 0; //230
        $arrayOfMaximumPercentages[17] = 0; //270
        $arrayOfMaximumPercentages[18] = 0; //325
        $arrayOfMaximumPercentages[19] = 0; //PAN

        $arrayOfMaximumPercentages[20] = 0; // +10 (OS)
        $arrayOfMaximumPercentages[21] = 0; //-10+40
        $arrayOfMaximumPercentages[22] = 0; //-40+70
        $arrayOfMaximumPercentages[23] = 0; //-60+70
        $arrayOfMaximumPercentages[24] = 0; //-70 +140
        $arrayOfMaximumPercentages[31] = 0; //-50+140
        $arrayOfMaximumPercentages[32] = 0; //Near Size
        $arrayOfMaximumPercentages[33] = 0; // -140+325
        $arrayOfMaximumPercentages[34] = 0; //-140

        $arrayOfMaximumPercentages[25] = 0; // Moisture Rate
        $arrayOfMaximumPercentages[26] = 0; // Percent Solids
        $arrayOfMaximumPercentages[27] = 0; // STPH
        $arrayOfMaximumPercentages[28] = 0; // Turbidity
        $arrayOfMaximumPercentages[29] = 0; // Plus Seventy Recovery
        $arrayOfMaximumPercentages[30] = 0; // Plus One Forty Recovery

        for($i = 0; $i < count($arrayOfSamples); $i++)
        {
            //ASSIGN VALUES TO VARIABLES BASED ON SCREEN SIZES

            //check that each sample is complete and void status is active
            if(($arrayOfSamples[$i]->vars['isComplete'] == 1) && ($arrayOfSamples[$i]->vars['voidStatusCode'] == 'A'))
            {
                //<editor-fold>
                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve1Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve1Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve1Desc'])
                    {
                        case "20":
                            if($maximum20 < $arrayOfSamples[$i]->vars['sieve1Value']) { $maximum20 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "25":
                            if($maximum25 < $arrayOfSamples[$i]->vars['sieve1Value']) { $maximum25 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "30":
                            if($maximum30 < $arrayOfSamples[$i]->vars['sieve1Value']) { $maximum30 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "35":
                            if($maximum35 < $arrayOfSamples[$i]->vars['sieve1Value']) { $maximum35 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "40":
                            if($maximum40 < $arrayOfSamples[$i]->vars['sieve1Value']) { $maximum40 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "45":
                            if($maximum45 < $arrayOfSamples[$i]->vars['sieve1Value']) { $maximum45 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "50":
                            if($maximum50 < $arrayOfSamples[$i]->vars['sieve1Value']) { $maximum50 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "60":
                            if($maximum60 < $arrayOfSamples[$i]->vars['sieve1Value']) { $maximum60 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "70":
                            if($maximum70 < $arrayOfSamples[$i]->vars['sieve1Value']) { $maximum70 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "80":
                            if($maximum80 < $arrayOfSamples[$i]->vars['sieve1Value']) { $maximum80 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "100":
                            if($maximum100 < $arrayOfSamples[$i]->vars['sieve1Value']) { $maximum100 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "120":
                            if($maximum120 < $arrayOfSamples[$i]->vars['sieve1Value']) { $maximum120 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "140":
                            if($maximum140 < $arrayOfSamples[$i]->vars['sieve1Value']) { $maximum140 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "160":
                            if($maximum160 < $arrayOfSamples[$i]->vars['sieve1Value']) { $maximum160 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "170":
                            if($maximum170 < $arrayOfSamples[$i]->vars['sieve1Value']) { $maximum170 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "200":
                            if($maximum200 < $arrayOfSamples[$i]->vars['sieve1Value']) { $maximum200 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "230":
                            if($maximum230 < $arrayOfSamples[$i]->vars['sieve1Value']) { $maximum230 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "270":
                            if($maximum270 < $arrayOfSamples[$i]->vars['sieve1Value']) { $maximum270 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "325":
                            if($maximum325 < $arrayOfSamples[$i]->vars['sieve1Value']) { $maximum325 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "PAN":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve1Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve1Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "Pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve1Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve2Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve2Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve2Desc'])
                    {
                        case "20":
                            if($maximum20 < $arrayOfSamples[$i]->vars['sieve2Value']) { $maximum20 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "25":
                            if($maximum25 < $arrayOfSamples[$i]->vars['sieve2Value']) { $maximum25 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "30":
                            if($maximum30 < $arrayOfSamples[$i]->vars['sieve2Value']) { $maximum30 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "35":
                            if($maximum35 < $arrayOfSamples[$i]->vars['sieve2Value']) { $maximum35 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "40":
                            if($maximum40 < $arrayOfSamples[$i]->vars['sieve2Value']) { $maximum40 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "45":
                            if($maximum45 < $arrayOfSamples[$i]->vars['sieve2Value']) { $maximum45 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "50":
                            if($maximum50 < $arrayOfSamples[$i]->vars['sieve2Value']) { $maximum50 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "60":
                            if($maximum60 < $arrayOfSamples[$i]->vars['sieve2Value']) { $maximum60 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "70":
                            if($maximum70 < $arrayOfSamples[$i]->vars['sieve2Value']) { $maximum70 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "80":
                            if($maximum80 < $arrayOfSamples[$i]->vars['sieve2Value']) { $maximum80 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "100":
                            if($maximum100 < $arrayOfSamples[$i]->vars['sieve2Value']) { $maximum100 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "120":
                            if($maximum120 < $arrayOfSamples[$i]->vars['sieve2Value']) { $maximum120 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "140":
                            if($maximum140 < $arrayOfSamples[$i]->vars['sieve2Value']) { $maximum140 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "160":
                            if($maximum160 < $arrayOfSamples[$i]->vars['sieve2Value']) { $maximum160 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "170":
                            if($maximum170 < $arrayOfSamples[$i]->vars['sieve2Value']) { $maximum170 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "200":
                            if($maximum200 < $arrayOfSamples[$i]->vars['sieve2Value']) { $maximum200 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "230":
                            if($maximum230 < $arrayOfSamples[$i]->vars['sieve2Value']) { $maximum230 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "270":
                            if($maximum270 < $arrayOfSamples[$i]->vars['sieve2Value']) { $maximum270 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "325":
                            if($maximum325 < $arrayOfSamples[$i]->vars['sieve2Value']) { $maximum325 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "PAN":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve2Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve2Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "Pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve2Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve3Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve3Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve3Desc'])
                    {
                        case "20":
                            if($maximum20 < $arrayOfSamples[$i]->vars['sieve3Value']) { $maximum20 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "25":
                            if($maximum25 < $arrayOfSamples[$i]->vars['sieve3Value']) { $maximum25 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "30":
                            if($maximum30 < $arrayOfSamples[$i]->vars['sieve3Value']) { $maximum30 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "35":
                            if($maximum35 < $arrayOfSamples[$i]->vars['sieve3Value']) { $maximum35 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "40":
                            if($maximum40 < $arrayOfSamples[$i]->vars['sieve3Value']) { $maximum40 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "45":
                            if($maximum45 < $arrayOfSamples[$i]->vars['sieve3Value']) { $maximum45 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "50":
                            if($maximum50 < $arrayOfSamples[$i]->vars['sieve3Value']) { $maximum50 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "60":
                            if($maximum60 < $arrayOfSamples[$i]->vars['sieve3Value']) { $maximum60 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "70":
                            if($maximum70 < $arrayOfSamples[$i]->vars['sieve3Value']) { $maximum70 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "80":
                            if($maximum80 < $arrayOfSamples[$i]->vars['sieve3Value']) { $maximum80 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "100":
                            if($maximum100 < $arrayOfSamples[$i]->vars['sieve3Value']) { $maximum100 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "120":
                            if($maximum120 < $arrayOfSamples[$i]->vars['sieve3Value']) { $maximum120 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "140":
                            if($maximum140 < $arrayOfSamples[$i]->vars['sieve3Value']) { $maximum140 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "160":
                            if($maximum160 < $arrayOfSamples[$i]->vars['sieve3Value']) { $maximum160 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "170":
                            if($maximum170 < $arrayOfSamples[$i]->vars['sieve3Value']) { $maximum170 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "200":
                            if($maximum200 < $arrayOfSamples[$i]->vars['sieve3Value']) { $maximum200 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "230":
                            if($maximum230 < $arrayOfSamples[$i]->vars['sieve3Value']) { $maximum230 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "270":
                            if($maximum270 < $arrayOfSamples[$i]->vars['sieve3Value']) { $maximum270 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "325":
                            if($maximum325 < $arrayOfSamples[$i]->vars['sieve3Value']) { $maximum325 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "PAN":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve3Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve3Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "Pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve3Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve4Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve4Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve4Desc'])
                    {
                        case "20":
                            if($maximum20 < $arrayOfSamples[$i]->vars['sieve4Value']) { $maximum20 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "25":
                            if($maximum25 < $arrayOfSamples[$i]->vars['sieve4Value']) { $maximum25 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "30":
                            if($maximum30 < $arrayOfSamples[$i]->vars['sieve4Value']) { $maximum30 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "35":
                            if($maximum35 < $arrayOfSamples[$i]->vars['sieve4Value']) { $maximum35 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "40":
                            if($maximum40 < $arrayOfSamples[$i]->vars['sieve4Value']) { $maximum40 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "45":
                            if($maximum45 < $arrayOfSamples[$i]->vars['sieve4Value']) { $maximum45 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "50":
                            if($maximum50 < $arrayOfSamples[$i]->vars['sieve4Value']) { $maximum50 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "60":
                            if($maximum60 < $arrayOfSamples[$i]->vars['sieve4Value']) { $maximum60 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "70":
                            if($maximum70 < $arrayOfSamples[$i]->vars['sieve4Value']) { $maximum70 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "80":
                            if($maximum80 < $arrayOfSamples[$i]->vars['sieve4Value']) { $maximum80 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "100":
                            if($maximum100 < $arrayOfSamples[$i]->vars['sieve4Value']) { $maximum100 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "120":
                            if($maximum120 < $arrayOfSamples[$i]->vars['sieve4Value']) { $maximum120 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "140":
                            if($maximum140 < $arrayOfSamples[$i]->vars['sieve4Value']) { $maximum140 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "160":
                            if($maximum160 < $arrayOfSamples[$i]->vars['sieve4Value']) { $maximum160 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "170":
                            if($maximum170 < $arrayOfSamples[$i]->vars['sieve4Value']) { $maximum170 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "200":
                            if($maximum200 < $arrayOfSamples[$i]->vars['sieve4Value']) { $maximum200 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "230":
                            if($maximum230 < $arrayOfSamples[$i]->vars['sieve4Value']) { $maximum230 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "270":
                            if($maximum270 < $arrayOfSamples[$i]->vars['sieve4Value']) { $maximum270 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "325":
                            if($maximum325 < $arrayOfSamples[$i]->vars['sieve4Value']) { $maximum325 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "PAN":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve4Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve4Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "Pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve4Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve5Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve5Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve5Desc'])
                    {
                        case "20":
                            if($maximum20 < $arrayOfSamples[$i]->vars['sieve5Value']) { $maximum20 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "25":
                            if($maximum25 < $arrayOfSamples[$i]->vars['sieve5Value']) { $maximum25 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "30":
                            if($maximum30 < $arrayOfSamples[$i]->vars['sieve5Value']) { $maximum30 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "35":
                            if($maximum35 < $arrayOfSamples[$i]->vars['sieve5Value']) { $maximum35 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "40":
                            if($maximum40 < $arrayOfSamples[$i]->vars['sieve5Value']) { $maximum40 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "45":
                            if($maximum45 < $arrayOfSamples[$i]->vars['sieve5Value']) { $maximum45 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "50":
                            if($maximum50 < $arrayOfSamples[$i]->vars['sieve5Value']) { $maximum50 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "60":
                            if($maximum60 < $arrayOfSamples[$i]->vars['sieve5Value']) { $maximum60 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "70":
                            if($maximum70 < $arrayOfSamples[$i]->vars['sieve5Value']) { $maximum70 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "80":
                            if($maximum80 < $arrayOfSamples[$i]->vars['sieve5Value']) { $maximum80 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "100":
                            if($maximum100 < $arrayOfSamples[$i]->vars['sieve5Value']) { $maximum100 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "120":
                            if($maximum120 < $arrayOfSamples[$i]->vars['sieve5Value']) { $maximum120 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "140":
                            if($maximum140 < $arrayOfSamples[$i]->vars['sieve5Value']) { $maximum140 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "160":
                            if($maximum160 < $arrayOfSamples[$i]->vars['sieve5Value']) { $maximum160 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "170":
                            if($maximum170 < $arrayOfSamples[$i]->vars['sieve5Value']) { $maximum170 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "200":
                            if($maximum200 < $arrayOfSamples[$i]->vars['sieve5Value']) { $maximum200 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "230":
                            if($maximum230 < $arrayOfSamples[$i]->vars['sieve5Value']) { $maximum230 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "270":
                            if($maximum270 < $arrayOfSamples[$i]->vars['sieve5Value']) { $maximum270 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "325":
                            if($maximum325 < $arrayOfSamples[$i]->vars['sieve5Value']) { $maximum325 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "PAN":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve5Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve5Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "Pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve5Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve6Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve6Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve6Desc'])
                    {
                        case "20":
                            if($maximum20 < $arrayOfSamples[$i]->vars['sieve6Value']) { $maximum20 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "25":
                            if($maximum25 < $arrayOfSamples[$i]->vars['sieve6Value']) { $maximum25 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "30":
                            if($maximum30 < $arrayOfSamples[$i]->vars['sieve6Value']) { $maximum30 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "35":
                            if($maximum35 < $arrayOfSamples[$i]->vars['sieve6Value']) { $maximum35 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "40":
                            if($maximum40 < $arrayOfSamples[$i]->vars['sieve6Value']) { $maximum40 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "45":
                            if($maximum45 < $arrayOfSamples[$i]->vars['sieve6Value']) { $maximum45 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "50":
                            if($maximum50 < $arrayOfSamples[$i]->vars['sieve6Value']) { $maximum50 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "60":
                            if($maximum60 < $arrayOfSamples[$i]->vars['sieve6Value']) { $maximum60 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "70":
                            if($maximum70 < $arrayOfSamples[$i]->vars['sieve6Value']) { $maximum70 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "80":
                            if($maximum80 < $arrayOfSamples[$i]->vars['sieve6Value']) { $maximum80 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "100":
                            if($maximum100 < $arrayOfSamples[$i]->vars['sieve6Value']) { $maximum100 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "120":
                            if($maximum120 < $arrayOfSamples[$i]->vars['sieve6Value']) { $maximum120 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "140":
                            if($maximum140 < $arrayOfSamples[$i]->vars['sieve6Value']) { $maximum140 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "160":
                            if($maximum160 < $arrayOfSamples[$i]->vars['sieve6Value']) { $maximum160 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "170":
                            if($maximum170 < $arrayOfSamples[$i]->vars['sieve6Value']) { $maximum170 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "200":
                            if($maximum200 < $arrayOfSamples[$i]->vars['sieve6Value']) { $maximum200 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "230":
                            if($maximum230 < $arrayOfSamples[$i]->vars['sieve6Value']) { $maximum230 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "270":
                            if($maximum270 < $arrayOfSamples[$i]->vars['sieve6Value']) { $maximum270 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "325":
                            if($maximum325 < $arrayOfSamples[$i]->vars['sieve6Value']) { $maximum325 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "PAN":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve6Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve6Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "Pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve6Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve7Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve7Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve7Desc'])
                    {
                        case "20":
                            if($maximum20 < $arrayOfSamples[$i]->vars['sieve7Value']) { $maximum20 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "25":
                            if($maximum25 < $arrayOfSamples[$i]->vars['sieve7Value']) { $maximum25 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "30":
                            if($maximum30 < $arrayOfSamples[$i]->vars['sieve7Value']) { $maximum30 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "35":
                            if($maximum35 < $arrayOfSamples[$i]->vars['sieve7Value']) { $maximum35 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "40":
                            if($maximum40 < $arrayOfSamples[$i]->vars['sieve7Value']) { $maximum40 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "45":
                            if($maximum45 < $arrayOfSamples[$i]->vars['sieve7Value']) { $maximum45 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "50":
                            if($maximum50 < $arrayOfSamples[$i]->vars['sieve7Value']) { $maximum50 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "60":
                            if($maximum60 < $arrayOfSamples[$i]->vars['sieve7Value']) { $maximum60 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "70":
                            if($maximum70 < $arrayOfSamples[$i]->vars['sieve7Value']) { $maximum70 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "80":
                            if($maximum80 < $arrayOfSamples[$i]->vars['sieve7Value']) { $maximum80 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "100":
                            if($maximum100 < $arrayOfSamples[$i]->vars['sieve7Value']) { $maximum100 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "120":
                            if($maximum120 < $arrayOfSamples[$i]->vars['sieve7Value']) { $maximum120 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "140":
                            if($maximum140 < $arrayOfSamples[$i]->vars['sieve7Value']) { $maximum140 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "160":
                            if($maximum160 < $arrayOfSamples[$i]->vars['sieve7Value']) { $maximum160 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "170":
                            if($maximum170 < $arrayOfSamples[$i]->vars['sieve7Value']) { $maximum170 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "200":
                            if($maximum200 < $arrayOfSamples[$i]->vars['sieve7Value']) { $maximum200 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "230":
                            if($maximum230 < $arrayOfSamples[$i]->vars['sieve7Value']) { $maximum230 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "270":
                            if($maximum270 < $arrayOfSamples[$i]->vars['sieve7Value']) { $maximum270 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "325":
                            if($maximum325 < $arrayOfSamples[$i]->vars['sieve7Value']) { $maximum325 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "PAN":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve7Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve7Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "Pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve7Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve8Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve8Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve8Desc'])
                    {
                        case "20":
                            if($maximum20 < $arrayOfSamples[$i]->vars['sieve8Value']) { $maximum20 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "25":
                            if($maximum25 < $arrayOfSamples[$i]->vars['sieve8Value']) { $maximum25 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "30":
                            if($maximum30 < $arrayOfSamples[$i]->vars['sieve8Value']) { $maximum30 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "35":
                            if($maximum35 < $arrayOfSamples[$i]->vars['sieve8Value']) { $maximum35 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "40":
                            if($maximum40 < $arrayOfSamples[$i]->vars['sieve8Value']) { $maximum40 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "45":
                            if($maximum45 < $arrayOfSamples[$i]->vars['sieve8Value']) { $maximum45 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "50":
                            if($maximum50 < $arrayOfSamples[$i]->vars['sieve8Value']) { $maximum50 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "60":
                            if($maximum60 < $arrayOfSamples[$i]->vars['sieve8Value']) { $maximum60 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "70":
                            if($maximum70 < $arrayOfSamples[$i]->vars['sieve8Value']) { $maximum70 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "80":
                            if($maximum80 < $arrayOfSamples[$i]->vars['sieve8Value']) { $maximum80 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "100":
                            if($maximum100 < $arrayOfSamples[$i]->vars['sieve8Value']) { $maximum100 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "120":
                            if($maximum120 < $arrayOfSamples[$i]->vars['sieve8Value']) { $maximum120 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "140":
                            if($maximum140 < $arrayOfSamples[$i]->vars['sieve8Value']) { $maximum140 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "160":
                            if($maximum160 < $arrayOfSamples[$i]->vars['sieve8Value']) { $maximum160 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "170":
                            if($maximum170 < $arrayOfSamples[$i]->vars['sieve8Value']) { $maximum170 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "200":
                            if($maximum200 < $arrayOfSamples[$i]->vars['sieve8Value']) { $maximum200 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "230":
                            if($maximum230 < $arrayOfSamples[$i]->vars['sieve8Value']) { $maximum230 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "270":
                            if($maximum270 < $arrayOfSamples[$i]->vars['sieve8Value']) { $maximum270 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "325":
                            if($maximum325 < $arrayOfSamples[$i]->vars['sieve8Value']) { $maximum325 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "PAN":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve8Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve8Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "Pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve8Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve9Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve9Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve9Desc'])
                    {
                        case "20":
                            if($maximum20 < $arrayOfSamples[$i]->vars['sieve9Value']) { $maximum20 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "25":
                            if($maximum25 < $arrayOfSamples[$i]->vars['sieve9Value']) { $maximum25 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "30":
                            if($maximum30 < $arrayOfSamples[$i]->vars['sieve9Value']) { $maximum30 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "35":
                            if($maximum35 < $arrayOfSamples[$i]->vars['sieve9Value']) { $maximum35 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "40":
                            if($maximum40 < $arrayOfSamples[$i]->vars['sieve9Value']) { $maximum40 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "45":
                            if($maximum45 < $arrayOfSamples[$i]->vars['sieve9Value']) { $maximum45 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "50":
                            if($maximum50 < $arrayOfSamples[$i]->vars['sieve9Value']) { $maximum50 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "60":
                            if($maximum60 < $arrayOfSamples[$i]->vars['sieve9Value']) { $maximum60 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "70":
                            if($maximum70 < $arrayOfSamples[$i]->vars['sieve9Value']) { $maximum70 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "80":
                            if($maximum80 < $arrayOfSamples[$i]->vars['sieve9Value']) { $maximum80 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "100":
                            if($maximum100 < $arrayOfSamples[$i]->vars['sieve9Value']) { $maximum100 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "120":
                            if($maximum120 < $arrayOfSamples[$i]->vars['sieve9Value']) { $maximum120 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "140":
                            if($maximum140 < $arrayOfSamples[$i]->vars['sieve9Value']) { $maximum140 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "160":
                            if($maximum160 < $arrayOfSamples[$i]->vars['sieve9Value']) { $maximum160 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "170":
                            if($maximum170 < $arrayOfSamples[$i]->vars['sieve9Value']) { $maximum170 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "200":
                            if($maximum200 < $arrayOfSamples[$i]->vars['sieve9Value']) { $maximum200 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "230":
                            if($maximum230 < $arrayOfSamples[$i]->vars['sieve9Value']) { $maximum230 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "270":
                            if($maximum270 < $arrayOfSamples[$i]->vars['sieve9Value']) { $maximum270 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "325":
                            if($maximum325 < $arrayOfSamples[$i]->vars['sieve9Value']) { $maximum325 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "PAN":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve9Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve9Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "Pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve9Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve10Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve10Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve10Desc'])
                    {
                        case "20":
                            if($maximum20 < $arrayOfSamples[$i]->vars['sieve10Value']) { $maximum20 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "25":
                            if($maximum25 < $arrayOfSamples[$i]->vars['sieve10Value']) { $maximum25 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "30":
                            if($maximum30 < $arrayOfSamples[$i]->vars['sieve10Value']) { $maximum30 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "35":
                            if($maximum35 < $arrayOfSamples[$i]->vars['sieve10Value']) { $maximum35 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "40":
                            if($maximum40 < $arrayOfSamples[$i]->vars['sieve10Value']) { $maximum40 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "45":
                            if($maximum45 < $arrayOfSamples[$i]->vars['sieve10Value']) { $maximum45 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "50":
                            if($maximum50 < $arrayOfSamples[$i]->vars['sieve10Value']) { $maximum50 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "60":
                            if($maximum60 < $arrayOfSamples[$i]->vars['sieve10Value']) { $maximum60 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "70":
                            if($maximum70 < $arrayOfSamples[$i]->vars['sieve10Value']) { $maximum70 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "80":
                            if($maximum80 < $arrayOfSamples[$i]->vars['sieve10Value']) { $maximum80 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "100":
                            if($maximum100 < $arrayOfSamples[$i]->vars['sieve10Value']) { $maximum100 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "120":
                            if($maximum120 < $arrayOfSamples[$i]->vars['sieve10Value']) { $maximum120 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "140":
                            if($maximum140 < $arrayOfSamples[$i]->vars['sieve10Value']) { $maximum140 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "160":
                            if($maximum160 < $arrayOfSamples[$i]->vars['sieve10Value']) { $maximum160 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "170":
                            if($maximum170 < $arrayOfSamples[$i]->vars['sieve10Value']) { $maximum170 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "200":
                            if($maximum200 < $arrayOfSamples[$i]->vars['sieve10Value']) { $maximum200 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "230":
                            if($maximum230 < $arrayOfSamples[$i]->vars['sieve10Value']) { $maximum230 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "270":
                            if($maximum270 < $arrayOfSamples[$i]->vars['sieve10Value']) { $maximum270 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "325":
                            if($maximum325 < $arrayOfSamples[$i]->vars['sieve10Value']) { $maximum325 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "PAN":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve10Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve10Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "Pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve10Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve11Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve11Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve11Desc'])
                    {
                        case "20":
                            if($maximum20 < $arrayOfSamples[$i]->vars['sieve11Value']) { $maximum20 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "25":
                            if($maximum25 < $arrayOfSamples[$i]->vars['sieve11Value']) { $maximum25 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "30":
                            if($maximum30 < $arrayOfSamples[$i]->vars['sieve11Value']) { $maximum30 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "35":
                            if($maximum35 < $arrayOfSamples[$i]->vars['sieve11Value']) { $maximum35 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "40":
                            if($maximum40 < $arrayOfSamples[$i]->vars['sieve11Value']) { $maximum40 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "45":
                            if($maximum45 < $arrayOfSamples[$i]->vars['sieve11Value']) { $maximum45 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "50":
                            if($maximum50 < $arrayOfSamples[$i]->vars['sieve11Value']) { $maximum50 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "60":
                            if($maximum60 < $arrayOfSamples[$i]->vars['sieve11Value']) { $maximum60 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "70":
                            if($maximum70 < $arrayOfSamples[$i]->vars['sieve11Value']) { $maximum70 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "80":
                            if($maximum80 < $arrayOfSamples[$i]->vars['sieve11Value']) { $maximum80 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "100":
                            if($maximum100 < $arrayOfSamples[$i]->vars['sieve11Value']) { $maximum100 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "120":
                            if($maximum120 < $arrayOfSamples[$i]->vars['sieve11Value']) { $maximum120 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "140":
                            if($maximum140 < $arrayOfSamples[$i]->vars['sieve11Value']) { $maximum140 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "160":
                            if($maximum160 < $arrayOfSamples[$i]->vars['sieve11Value']) { $maximum160 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "170":
                            if($maximum170 < $arrayOfSamples[$i]->vars['sieve11Value']) { $maximum170 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "200":
                            if($maximum200 < $arrayOfSamples[$i]->vars['sieve11Value']) { $maximum200 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "230":
                            if($maximum230 < $arrayOfSamples[$i]->vars['sieve11Value']) { $maximum230 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "270":
                            if($maximum270 < $arrayOfSamples[$i]->vars['sieve11Value']) { $maximum270 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "325":
                            if($maximum325 < $arrayOfSamples[$i]->vars['sieve11Value']) { $maximum325 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "PAN":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve11Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve11Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "Pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve11Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve12Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve12Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve12Desc'])
                    {
                        case "20":
                            if($maximum20 < $arrayOfSamples[$i]->vars['sieve12Value']) { $maximum20 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "25":
                            if($maximum25 < $arrayOfSamples[$i]->vars['sieve12Value']) { $maximum25 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "30":
                            if($maximum30 < $arrayOfSamples[$i]->vars['sieve12Value']) { $maximum30 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "35":
                            if($maximum35 < $arrayOfSamples[$i]->vars['sieve12Value']) { $maximum35 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "40":
                            if($maximum40 < $arrayOfSamples[$i]->vars['sieve12Value']) { $maximum40 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "45":
                            if($maximum45 < $arrayOfSamples[$i]->vars['sieve12Value']) { $maximum45 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "50":
                            if($maximum50 < $arrayOfSamples[$i]->vars['sieve12Value']) { $maximum50 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "60":
                            if($maximum60 < $arrayOfSamples[$i]->vars['sieve12Value']) { $maximum60 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "70":
                            if($maximum70 < $arrayOfSamples[$i]->vars['sieve12Value']) { $maximum70 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "80":
                            if($maximum80 < $arrayOfSamples[$i]->vars['sieve12Value']) { $maximum80 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "100":
                            if($maximum100 < $arrayOfSamples[$i]->vars['sieve12Value']) { $maximum100 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "120":
                            if($maximum120 < $arrayOfSamples[$i]->vars['sieve12Value']) { $maximum120 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "140":
                            if($maximum140 < $arrayOfSamples[$i]->vars['sieve12Value']) { $maximum140 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "160":
                            if($maximum160 < $arrayOfSamples[$i]->vars['sieve12Value']) { $maximum160 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "170":
                            if($maximum170 < $arrayOfSamples[$i]->vars['sieve12Value']) { $maximum170 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "200":
                            if($maximum200 < $arrayOfSamples[$i]->vars['sieve12Value']) { $maximum200 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "230":
                            if($maximum230 < $arrayOfSamples[$i]->vars['sieve12Value']) { $maximum230 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "270":
                            if($maximum270 < $arrayOfSamples[$i]->vars['sieve12Value']) { $maximum270 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "325":
                            if($maximum325 < $arrayOfSamples[$i]->vars['sieve12Value']) { $maximum325 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "PAN":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve12Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve12Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "Pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve12Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve13Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve13Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve13Desc'])
                    {
                        case "20":
                            if($maximum20 < $arrayOfSamples[$i]->vars['sieve13Value']) { $maximum20 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "25":
                            if($maximum25 < $arrayOfSamples[$i]->vars['sieve13Value']) { $maximum25 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "30":
                            if($maximum30 < $arrayOfSamples[$i]->vars['sieve13Value']) { $maximum30 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "35":
                            if($maximum35 < $arrayOfSamples[$i]->vars['sieve13Value']) { $maximum35 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "40":
                            if($maximum40 < $arrayOfSamples[$i]->vars['sieve13Value']) { $maximum40 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "45":
                            if($maximum45 < $arrayOfSamples[$i]->vars['sieve13Value']) { $maximum45 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "50":
                            if($maximum50 < $arrayOfSamples[$i]->vars['sieve13Value']) { $maximum50 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "60":
                            if($maximum60 < $arrayOfSamples[$i]->vars['sieve13Value']) { $maximum60 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "70":
                            if($maximum70 < $arrayOfSamples[$i]->vars['sieve13Value']) { $maximum70 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "80":
                            if($maximum80 < $arrayOfSamples[$i]->vars['sieve13Value']) { $maximum80 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "100":
                            if($maximum100 < $arrayOfSamples[$i]->vars['sieve13Value']) { $maximum100 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "120":
                            if($maximum120 < $arrayOfSamples[$i]->vars['sieve13Value']) { $maximum120 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "140":
                            if($maximum140 < $arrayOfSamples[$i]->vars['sieve13Value']) { $maximum140 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "160":
                            if($maximum160 < $arrayOfSamples[$i]->vars['sieve13Value']) { $maximum160 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "170":
                            if($maximum170 < $arrayOfSamples[$i]->vars['sieve13Value']) { $maximum170 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "200":
                            if($maximum200 < $arrayOfSamples[$i]->vars['sieve13Value']) { $maximum200 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "230":
                            if($maximum230 < $arrayOfSamples[$i]->vars['sieve13Value']) { $maximum230 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "270":
                            if($maximum270 < $arrayOfSamples[$i]->vars['sieve13Value']) { $maximum270 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "325":
                            if($maximum325 < $arrayOfSamples[$i]->vars['sieve13Value']) { $maximum325 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "PAN":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve13Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve13Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "Pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve13Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve14Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve14Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve14Desc'])
                    {
                        case "20":
                            if($maximum20 < $arrayOfSamples[$i]->vars['sieve14Value']) { $maximum20 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "25":
                            if($maximum25 < $arrayOfSamples[$i]->vars['sieve14Value']) { $maximum25 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "30":
                            if($maximum30 < $arrayOfSamples[$i]->vars['sieve14Value']) { $maximum30 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "35":
                            if($maximum35 < $arrayOfSamples[$i]->vars['sieve14Value']) { $maximum35 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "40":
                            if($maximum40 < $arrayOfSamples[$i]->vars['sieve14Value']) { $maximum40 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "45":
                            if($maximum45 < $arrayOfSamples[$i]->vars['sieve14Value']) { $maximum45 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "50":
                            if($maximum50 < $arrayOfSamples[$i]->vars['sieve14Value']) { $maximum50 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "60":
                            if($maximum60 < $arrayOfSamples[$i]->vars['sieve14Value']) { $maximum60 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "70":
                            if($maximum70 < $arrayOfSamples[$i]->vars['sieve14Value']) { $maximum70 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "80":
                            if($maximum80 < $arrayOfSamples[$i]->vars['sieve14Value']) { $maximum80 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "100":
                            if($maximum100 < $arrayOfSamples[$i]->vars['sieve14Value']) { $maximum100 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "120":
                            if($maximum120 < $arrayOfSamples[$i]->vars['sieve14Value']) { $maximum120 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "140":
                            if($maximum140 < $arrayOfSamples[$i]->vars['sieve14Value']) { $maximum140 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "160":
                            if($maximum160 < $arrayOfSamples[$i]->vars['sieve14Value']) { $maximum160 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "170":
                            if($maximum170 < $arrayOfSamples[$i]->vars['sieve14Value']) { $maximum170 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "200":
                            if($maximum200 < $arrayOfSamples[$i]->vars['sieve14Value']) { $maximum200 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "230":
                            if($maximum230 < $arrayOfSamples[$i]->vars['sieve14Value']) { $maximum230 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "270":
                            if($maximum270 < $arrayOfSamples[$i]->vars['sieve14Value']) { $maximum270 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "325":
                            if($maximum325 < $arrayOfSamples[$i]->vars['sieve14Value']) { $maximum325 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "PAN":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve14Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve14Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "Pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve14Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve15Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve15Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve15Desc'])
                    {
                        case "20":
                            if($maximum20 < $arrayOfSamples[$i]->vars['sieve15Value']) { $maximum20 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "25":
                            if($maximum25 < $arrayOfSamples[$i]->vars['sieve15Value']) { $maximum25 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "30":
                            if($maximum30 < $arrayOfSamples[$i]->vars['sieve15Value']) { $maximum30 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "35":
                            if($maximum35 < $arrayOfSamples[$i]->vars['sieve15Value']) { $maximum35 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "40":
                            if($maximum40 < $arrayOfSamples[$i]->vars['sieve15Value']) { $maximum40 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "45":
                            if($maximum45 < $arrayOfSamples[$i]->vars['sieve15Value']) { $maximum45 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "50":
                            if($maximum50 < $arrayOfSamples[$i]->vars['sieve15Value']) { $maximum50 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "60":
                            if($maximum60 < $arrayOfSamples[$i]->vars['sieve15Value']) { $maximum60 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "70":
                            if($maximum70 < $arrayOfSamples[$i]->vars['sieve15Value']) { $maximum70 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "80":
                            if($maximum80 < $arrayOfSamples[$i]->vars['sieve15Value']) { $maximum80 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "100":
                            if($maximum100 < $arrayOfSamples[$i]->vars['sieve15Value']) { $maximum100 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "120":
                            if($maximum120 < $arrayOfSamples[$i]->vars['sieve15Value']) { $maximum120 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "140":
                            if($maximum140 < $arrayOfSamples[$i]->vars['sieve15Value']) { $maximum140 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "160":
                            if($maximum160 < $arrayOfSamples[$i]->vars['sieve15Value']) { $maximum160 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "170":
                            if($maximum170 < $arrayOfSamples[$i]->vars['sieve15Value']) { $maximum170 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "200":
                            if($maximum200 < $arrayOfSamples[$i]->vars['sieve15Value']) { $maximum200 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "230":
                            if($maximum230 < $arrayOfSamples[$i]->vars['sieve15Value']) { $maximum230 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "270":
                            if($maximum270 < $arrayOfSamples[$i]->vars['sieve15Value']) { $maximum270 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "325":
                            if($maximum325 < $arrayOfSamples[$i]->vars['sieve15Value']) { $maximum325 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "PAN":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve15Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve15Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "Pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve15Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve16Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve16Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve16Desc'])
                    {
                        case "20":
                            if($maximum20 < $arrayOfSamples[$i]->vars['sieve16Value']) { $maximum20 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "25":
                            if($maximum25 < $arrayOfSamples[$i]->vars['sieve16Value']) { $maximum25 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "30":
                            if($maximum30 < $arrayOfSamples[$i]->vars['sieve16Value']) { $maximum30 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "35":
                            if($maximum35 < $arrayOfSamples[$i]->vars['sieve16Value']) { $maximum35 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "40":
                            if($maximum40 < $arrayOfSamples[$i]->vars['sieve16Value']) { $maximum40 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "45":
                            if($maximum45 < $arrayOfSamples[$i]->vars['sieve16Value']) { $maximum45 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "50":
                            if($maximum50 < $arrayOfSamples[$i]->vars['sieve16Value']) { $maximum50 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "60":
                            if($maximum60 < $arrayOfSamples[$i]->vars['sieve16Value']) { $maximum60 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "70":
                            if($maximum70 < $arrayOfSamples[$i]->vars['sieve16Value']) { $maximum70 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "80":
                            if($maximum80 < $arrayOfSamples[$i]->vars['sieve16Value']) { $maximum80 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "100":
                            if($maximum100 < $arrayOfSamples[$i]->vars['sieve16Value']) { $maximum100 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "120":
                            if($maximum120 < $arrayOfSamples[$i]->vars['sieve16Value']) { $maximum120 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "140":
                            if($maximum140 < $arrayOfSamples[$i]->vars['sieve16Value']) { $maximum140 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "160":
                            if($maximum160 < $arrayOfSamples[$i]->vars['sieve16Value']) { $maximum160 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "170":
                            if($maximum170 < $arrayOfSamples[$i]->vars['sieve16Value']) { $maximum170 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "200":
                            if($maximum200 < $arrayOfSamples[$i]->vars['sieve16Value']) { $maximum200 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "230":
                            if($maximum230 < $arrayOfSamples[$i]->vars['sieve16Value']) { $maximum230 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "270":
                            if($maximum270 < $arrayOfSamples[$i]->vars['sieve16Value']) { $maximum270 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "325":
                            if($maximum325 < $arrayOfSamples[$i]->vars['sieve16Value']) { $maximum325 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "PAN":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve16Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve16Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "Pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve16Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve17Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve17Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve17Desc'])
                    {
                        case "20":
                            if($maximum20 < $arrayOfSamples[$i]->vars['sieve17Value']) { $maximum20 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "25":
                            if($maximum25 < $arrayOfSamples[$i]->vars['sieve17Value']) { $maximum25 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "30":
                            if($maximum30 < $arrayOfSamples[$i]->vars['sieve17Value']) { $maximum30 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "35":
                            if($maximum35 < $arrayOfSamples[$i]->vars['sieve17Value']) { $maximum35 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "40":
                            if($maximum40 < $arrayOfSamples[$i]->vars['sieve17Value']) { $maximum40 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "45":
                            if($maximum45 < $arrayOfSamples[$i]->vars['sieve17Value']) { $maximum45 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "50":
                            if($maximum50 < $arrayOfSamples[$i]->vars['sieve17Value']) { $maximum50 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "60":
                            if($maximum60 < $arrayOfSamples[$i]->vars['sieve17Value']) { $maximum60 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "70":
                            if($maximum70 < $arrayOfSamples[$i]->vars['sieve17Value']) { $maximum70 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "80":
                            if($maximum80 < $arrayOfSamples[$i]->vars['sieve17Value']) { $maximum80 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "100":
                            if($maximum100 < $arrayOfSamples[$i]->vars['sieve17Value']) { $maximum100 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "120":
                            if($maximum120 < $arrayOfSamples[$i]->vars['sieve17Value']) { $maximum120 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "140":
                            if($maximum140 < $arrayOfSamples[$i]->vars['sieve17Value']) { $maximum140 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "160":
                            if($maximum160 < $arrayOfSamples[$i]->vars['sieve17Value']) { $maximum160 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "170":
                            if($maximum170 < $arrayOfSamples[$i]->vars['sieve17Value']) { $maximum170 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "200":
                            if($maximum200 < $arrayOfSamples[$i]->vars['sieve17Value']) { $maximum200 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "230":
                            if($maximum230 < $arrayOfSamples[$i]->vars['sieve17Value']) { $maximum230 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "270":
                            if($maximum270 < $arrayOfSamples[$i]->vars['sieve17Value']) { $maximum270 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "325":
                            if($maximum325 < $arrayOfSamples[$i]->vars['sieve17Value']) { $maximum325 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "PAN":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve17Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve17Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "Pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve17Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve18Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve18Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve18Desc'])
                    {
                        case "20":
                            if($maximum20 < $arrayOfSamples[$i]->vars['sieve18Value']) { $maximum20 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "25":
                            if($maximum25 < $arrayOfSamples[$i]->vars['sieve18Value']) { $maximum25 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "30":
                            if($maximum30 < $arrayOfSamples[$i]->vars['sieve18Value']) { $maximum30 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "35":
                            if($maximum35 < $arrayOfSamples[$i]->vars['sieve18Value']) { $maximum35 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "40":
                            if($maximum40 < $arrayOfSamples[$i]->vars['sieve18Value']) { $maximum40 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "45":
                            if($maximum45 < $arrayOfSamples[$i]->vars['sieve18Value']) { $maximum45 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "50":
                            if($maximum50 < $arrayOfSamples[$i]->vars['sieve18Value']) { $maximum50 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "60":
                            if($maximum60 < $arrayOfSamples[$i]->vars['sieve18Value']) { $maximum60 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "70":
                            if($maximum70 < $arrayOfSamples[$i]->vars['sieve18Value']) { $maximum70 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "80":
                            if($maximum80 < $arrayOfSamples[$i]->vars['sieve18Value']) { $maximum80 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "100":
                            if($maximum100 < $arrayOfSamples[$i]->vars['sieve18Value']) { $maximum100 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "120":
                            if($maximum120 < $arrayOfSamples[$i]->vars['sieve18Value']) { $maximum120 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "140":
                            if($maximum140 < $arrayOfSamples[$i]->vars['sieve18Value']) { $maximum140 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "160":
                            if($maximum160 < $arrayOfSamples[$i]->vars['sieve18Value']) { $maximum160 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "170":
                            if($maximum170 < $arrayOfSamples[$i]->vars['sieve18Value']) { $maximum170 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "200":
                            if($maximum200 < $arrayOfSamples[$i]->vars['sieve18Value']) { $maximum200 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "230":
                            if($maximum230 < $arrayOfSamples[$i]->vars['sieve18Value']) { $maximum230 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "270":
                            if($maximum270 < $arrayOfSamples[$i]->vars['sieve18Value']) { $maximum270 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "325":
                            if($maximum325 < $arrayOfSamples[$i]->vars['sieve18Value']) { $maximum325 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "PAN":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve18Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve18Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "Pan":
                            if($maximumPAN < $arrayOfSamples[$i]->vars['sieve18Value']) { $maximumPAN = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty
                //</editor-fold>
                
                //ADD THE RANGE AND SPECIAL CALCULATIONS

                if(($arrayOfSamples[$i]->vars['oversizePercent'] != NULL) && ($arrayOfSamples[$i]->vars['oversizePercent'] != 0))
                {
                    if($maximumOversize < $arrayOfSamples[$i]->vars['oversizePercent'])
                    {
                        $maximumOversize = $arrayOfSamples[$i]->vars['oversizePercent'];
                    }
                }

                if(($arrayOfSamples[$i]->vars['plus40'] != NULL) && ($arrayOfSamples[$i]->vars['plus40'] != 0))
                {
                    if($maximumPlus40  < $arrayOfSamples[$i]->vars['plus40'])
                    {
                        $maximumPlus40  = $arrayOfSamples[$i]->vars['plus40'];
                    }
                }

                if(($arrayOfSamples[$i]->vars['neg40Plus70'] != NULL) && ($arrayOfSamples[$i]->vars['neg40Plus70'] != 0))
                {
                    if($maximumNeg40Plus70  < $arrayOfSamples[$i]->vars['neg40Plus70'])
                    {
                        $maximumNeg40Plus70  = $arrayOfSamples[$i]->vars['neg40Plus70'];
                    }
                }

                if(($arrayOfSamples[$i]->vars['neg60Plus70'] != NULL) && ($arrayOfSamples[$i]->vars['neg60Plus70'] != 0))
                {
                    if($maximumNeg60Plus70  < $arrayOfSamples[$i]->vars['neg60Plus70'])
                    {
                        $maximumNeg60Plus70  = $arrayOfSamples[$i]->vars['neg60Plus70'];
                    }
                }

                if(($arrayOfSamples[$i]->vars['neg70Plus140'] != NULL) && ($arrayOfSamples[$i]->vars['neg70Plus140'] != 0))
                {
                    if($maximumNeg70Plus140 < $arrayOfSamples[$i]->vars['neg70Plus140'])
                    {
                        $maximumNeg70Plus140 = $arrayOfSamples[$i]->vars['neg70Plus140'];
                    }
                }

                if(($arrayOfSamples[$i]->vars['neg50Plus140'] != NULL) && ($arrayOfSamples[$i]->vars['neg50Plus140'] != 0))
                {
                    if($maximumNeg50Plus140  < $arrayOfSamples[$i]->vars['neg50Plus140'])
                    {
                        $maximumNeg50Plus140  = $arrayOfSamples[$i]->vars['neg50Plus140'];
                    }
                }

                if(($arrayOfSamples[$i]->vars['nearSize'] != NULL) && ($arrayOfSamples[$i]->vars['nearSize'] != 0))
                {
                    if($maximumNearSize  < $arrayOfSamples[$i]->vars['nearSize'])
                    {
                        $maximumNearSize  = $arrayOfSamples[$i]->vars['nearSize'];
                    }
                }

                if(($arrayOfSamples[$i]->vars['neg140Plus325'] != NULL) && ($arrayOfSamples[$i]->vars['neg140Plus325'] != 0))
                {
                    if($maximumNeg140Plus325  < $arrayOfSamples[$i]->vars['neg140Plus325'])
                    {
                        $maximumNeg140Plus325  = $arrayOfSamples[$i]->vars['neg140Plus325'];
                    }
                }

                if(($arrayOfSamples[$i]->vars['neg140'] != NULL) && ($arrayOfSamples[$i]->vars['neg140'] != 0))
                {
                    if($maximumNeg140 < $arrayOfSamples[$i]->vars['neg140'])
                    {
                        $maximumNeg140 = $arrayOfSamples[$i]->vars['neg140'];
                    }
                }


                if(($arrayOfSamples[$i]->vars['moisture_rate'] != NULL) && ($arrayOfSamples[$i]->vars['moisture_rate'] != 0))
                {
                    if($maximumMoistureRate < $arrayOfSamples[$i]->vars['moisture_rate'])
                    {
                        $maximumMoistureRate = $arrayOfSamples[$i]->vars['moisture_rate'];
                    }
                }

                if(($arrayOfSamples[$i]->vars['percentSolids'] != NULL) && ($arrayOfSamples[$i]->vars['percentSolids'] != 0))
                {
                    if($maximumPercentSolids < $arrayOfSamples[$i]->vars['percentSolids'])
                    {
                        $maximumPercentSolids = $arrayOfSamples[$i]->vars['percentSolids'];
                    }
                }

                if(($arrayOfSamples[$i]->vars['stph'] != NULL) && ($arrayOfSamples[$i]->vars['stph'] != 0))
                {
                    if($maximumSTPH < $arrayOfSamples[$i]->vars['stph'])
                    {
                        $maximumSTPH = $arrayOfSamples[$i]->vars['stph'];
                    }
                }

                if(($arrayOfSamples[$i]->vars['turbidity'] != NULL) && ($arrayOfSamples[$i]->vars['turbidity'] != 0))
                {
                    if($maximumTurbidity < $arrayOfSamples[$i]->vars['turbidity'])
                    {
                        $maximumTurbidity = $arrayOfSamples[$i]->vars['turbidity'];
                    }
                }

                if(($arrayOfSamples[$i]->vars['recoveryPlusSeventy'] != NULL) && ($arrayOfSamples[$i]->vars['recoveryPlusSeventy'] != 0))
                {
                    if($maximumPlusSeventyRecovery < $arrayOfSamples[$i]->vars['recoveryPlusSeventy'])
                    {
                        $maximumPlusSeventyRecovery = $arrayOfSamples[$i]->vars['recoveryPlusSeventy'];
                    }
                }

                if(($arrayOfSamples[$i]->vars['recoveryPlusOneForty'] != NULL) && ($arrayOfSamples[$i]->vars['recoveryPlusOneForty'] != 0))
                {
                    if($maximumPlusOneFortyRecovery < $arrayOfSamples[$i]->vars['recoveryPlusOneForty'])
                    {
                        $maximumPlusOneFortyRecovery = $arrayOfSamples[$i]->vars['recoveryPlusOneForty'];
                    }
                }

            }//if sample is complete and active

            $arrayOfMaximumPercentages[0] = $maximum20; //20
            $arrayOfMaximumPercentages[1] = $maximum25; //25
            $arrayOfMaximumPercentages[2] = $maximum30; //30
            $arrayOfMaximumPercentages[3] = $maximum35; //35
            $arrayOfMaximumPercentages[4] = $maximum40; //40
            $arrayOfMaximumPercentages[5] = $maximum45; //45
            $arrayOfMaximumPercentages[6] = $maximum50; //50
            $arrayOfMaximumPercentages[7] = $maximum60; //60
            $arrayOfMaximumPercentages[8] = $maximum70; //70
            $arrayOfMaximumPercentages[9] = $maximum80; //80
            $arrayOfMaximumPercentages[10] = $maximum100; //100
            $arrayOfMaximumPercentages[11] = $maximum120; //120
            $arrayOfMaximumPercentages[12] = $maximum140; //140
            $arrayOfMaximumPercentages[13] = $maximum160; //160
            $arrayOfMaximumPercentages[14] = $maximum170; //170
            $arrayOfMaximumPercentages[15] = $maximum200; //200
            $arrayOfMaximumPercentages[16] = $maximum230; //230
            $arrayOfMaximumPercentages[17] = $maximum270; //270
            $arrayOfMaximumPercentages[18] = $maximum325; //325
            $arrayOfMaximumPercentages[19] = $maximumPAN; //PAN

            $arrayOfMaximumPercentages[20] = $maximumOversize; // +10 (OS)
            $arrayOfMaximumPercentages[21] = $maximumPlus40; //-10+40
            $arrayOfMaximumPercentages[22] = $maximumNeg40Plus70; //-40+70
            $arrayOfMaximumPercentages[23] = $maximumNeg60Plus70; //-60+70
            $arrayOfMaximumPercentages[24] = $maximumNeg70Plus140; //-70 +140
            $arrayOfMaximumPercentages[31] = $maximumNeg50Plus140; //-50+140
            $arrayOfMaximumPercentages[32] = $maximumNearSize; //Near Size
            $arrayOfMaximumPercentages[33] = $maximumNeg140Plus325; // -140+325
            $arrayOfMaximumPercentages[34] = $maximumNeg140; //-140

            $arrayOfMaximumPercentages[25] = $maximumMoistureRate;
            $arrayOfMaximumPercentages[26] = $maximumPercentSolids;
            $arrayOfMaximumPercentages[27] = $maximumSTPH;
            $arrayOfMaximumPercentages[28] = $maximumTurbidity;
            $arrayOfMaximumPercentages[29] = $maximumPlusSeventyRecovery;
            $arrayOfMaximumPercentages[30] = $maximumPlusOneFortyRecovery;

        } //loop

    } //try
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error calculating averages of sample array.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $arrayOfMaximumPercentages;
}


/*******************************************************************************
 * Function Name: getObjectArrayPercentMinimums($arrayOfSamples
 * Description:
 * This function will:
 * Accept a parameter with an object array of sample information.
 * Return an array of objects containing minimums of sample final percentages.
 * Is used in the QC Samples page data.
 *******************************************************************************/
function getObjectArrayPercentMinimums($arrayOfSamples)
{
    $arrayOfMinimumPercentages = NULL;

    $errorMessage = "gb_qcfunctions.php - getObjectArrayPercentMinimums() ";
    $arrayOfTotalValues = NULL;
    $arrayOfAverageValues = NULL;
    $outputArray = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {

        $minimum20 = 100;
        $minimum25 = 100;
        $minimum30 = 100;
        $minimum35 = 100;
        $minimum40 = 100;
        $minimum45 = 100;
        $minimum50 = 100;
        $minimum60 = 100;
        $minimum70 = 100;
        $minimum80 = 100;
        $minimum100 = 100;
        $minimum120 = 100;
        $minimum140 = 100;
        $minimum160 = 100;
        $minimum170 = 100;
        $minimum200 = 100;
        $minimum230 = 100;
        $minimum270 = 100;
        $minimum325 = 100;
        $minimumPAN = 100;

        $minimumOversize = 0;
        $minimumPlus40 = 0;
        $minimumNeg40Plus70 = 0;
        $minimumNeg60Plus70 = 0;
        $minimumNeg70Plus140 = 0;
        $minimumNeg50Plus140 = 0;
        $minimumNearSize = 0;
        $minimumNeg140Plus325 = 0;
        $minimumNeg140 = 0;

        $minimumMoistureRate = 100;
        $minimumPercentSolids = 100;
        $minimumSTPH = 100;
        $minimumTurbidity = 100;
        $minimumPlusSeventyRecovery = 100;
        $minimumPlusOneFortyRecovery = 100;

        $arrayOfMinimumPercentages[0] = 100; //20
        $arrayOfMinimumPercentages[1] = 100; //25
        $arrayOfMinimumPercentages[2] = 100; //30
        $arrayOfMinimumPercentages[3] = 100; //35
        $arrayOfMinimumPercentages[4] = 100; //40
        $arrayOfMinimumPercentages[5] = 100; //45
        $arrayOfMinimumPercentages[6] = 100; //50
        $arrayOfMinimumPercentages[7] = 100; //60
        $arrayOfMinimumPercentages[8] = 100; //70
        $arrayOfMinimumPercentages[9] = 100; //80
        $arrayOfMinimumPercentages[10] = 100; //100
        $arrayOfMinimumPercentages[11] = 100; //120
        $arrayOfMinimumPercentages[12] = 100; //140
        $arrayOfMinimumPercentages[13] = 100; //160
        $arrayOfMinimumPercentages[14] = 100; //170
        $arrayOfMinimumPercentages[15] = 100; //200
        $arrayOfMinimumPercentages[16] = 100; //230
        $arrayOfMinimumPercentages[17] = 100; //270
        $arrayOfMinimumPercentages[18] = 100; //325
        $arrayOfMinimumPercentages[19] = 100; //PAN

        $arrayOfMinimumPercentages[20] = 0; // +10 (OS)
        $arrayOfMinimumPercentages[21] = 0; //-10+40
        $arrayOfMinimumPercentages[22] = 0; //-40+70
        $arrayOfMinimumPercentages[23] = 0; //-60+70
        $arrayOfMinimumPercentages[24] = 0; //-70 +140
        $arrayOfMinimumPercentages[31] = 0; //-50+140
        $arrayOfMinimumPercentages[32] = 0; //Near Size
        $arrayOfMinimumPercentages[33] = 0; // -140+325
        $arrayOfMinimumPercentages[35] = 0; //-140

        $arrayOfMinimumPercentages[25] = 100; // Moisture Rate
        $arrayOfMinimumPercentages[26] = 100; // Percent Solids
        $arrayOfMinimumPercentages[27] = 100; // STPH
        $arrayOfMinimumPercentages[28] = 100; // Turbidity
        $arrayOfMinimumPercentages[29] = 100; // Plus Seventy Recovery
        $arrayOfMinimumPercentages[30] = 100; // Plus One Forty Recovery

        for($i = 0; $i < count($arrayOfSamples); $i++)
        {
            //ASSIGN VALUES TO VARIABLES BASED ON SCREEN SIZES

            //check that each sample is complete and void status is active
            if(($arrayOfSamples[$i]->vars['isComplete'] == 1) && ($arrayOfSamples[$i]->vars['voidStatusCode'] == 'A'))
            {
                //<editor-fold>
                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve1Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve1Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve1Desc'])
                    {
                        case "20":
                            if($minimum20 > $arrayOfSamples[$i]->vars['sieve1Value']) { $minimum20 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "25":
                            if($minimum25 > $arrayOfSamples[$i]->vars['sieve1Value']) { $minimum25 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "30":
                            if($minimum30 > $arrayOfSamples[$i]->vars['sieve1Value']) { $minimum30 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "35":
                            if($minimum35 > $arrayOfSamples[$i]->vars['sieve1Value']) { $minimum35 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "40":
                            if($minimum40 > $arrayOfSamples[$i]->vars['sieve1Value']) { $minimum40 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "45":
                            if($minimum45 > $arrayOfSamples[$i]->vars['sieve1Value']) { $minimum45 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "50":
                            if($minimum50 > $arrayOfSamples[$i]->vars['sieve1Value']) { $minimum50 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "60":
                            if($minimum60 > $arrayOfSamples[$i]->vars['sieve1Value']) { $minimum60 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "70":
                            if($minimum70 > $arrayOfSamples[$i]->vars['sieve1Value']) { $minimum70 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "80":
                            if($minimum80 > $arrayOfSamples[$i]->vars['sieve1Value']) { $minimum80 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "100":
                            if($minimum100 > $arrayOfSamples[$i]->vars['sieve1Value']) { $minimum100 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "120":
                            if($minimum120 > $arrayOfSamples[$i]->vars['sieve1Value']) { $minimum120 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "140":
                            if($minimum140 > $arrayOfSamples[$i]->vars['sieve1Value']) { $minimum140 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "160":
                            if($minimum160 > $arrayOfSamples[$i]->vars['sieve1Value']) { $minimum160 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "170":
                            if($minimum170 > $arrayOfSamples[$i]->vars['sieve1Value']) { $minimum170 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "200":
                            if($minimum200 > $arrayOfSamples[$i]->vars['sieve1Value']) { $minimum200 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "230":
                            if($minimum230 > $arrayOfSamples[$i]->vars['sieve1Value']) { $minimum230 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "270":
                            if($minimum270 > $arrayOfSamples[$i]->vars['sieve1Value']) { $minimum270 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "325":
                            if($minimum325 > $arrayOfSamples[$i]->vars['sieve1Value']) { $minimum325 = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "PAN":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve1Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve1Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                        case "Pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve1Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve1Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve2Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve2Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve2Desc'])
                    {
                        case "20":
                            if($minimum20 > $arrayOfSamples[$i]->vars['sieve2Value']) { $minimum20 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "25":
                            if($minimum25 > $arrayOfSamples[$i]->vars['sieve2Value']) { $minimum25 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "30":
                            if($minimum30 > $arrayOfSamples[$i]->vars['sieve2Value']) { $minimum30 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "35":
                            if($minimum35 > $arrayOfSamples[$i]->vars['sieve2Value']) { $minimum35 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "40":
                            if($minimum40 > $arrayOfSamples[$i]->vars['sieve2Value']) { $minimum40 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "45":
                            if($minimum45 > $arrayOfSamples[$i]->vars['sieve2Value']) { $minimum45 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "50":
                            if($minimum50 > $arrayOfSamples[$i]->vars['sieve2Value']) { $minimum50 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "60":
                            if($minimum60 > $arrayOfSamples[$i]->vars['sieve2Value']) { $minimum60 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "70":
                            if($minimum70 > $arrayOfSamples[$i]->vars['sieve2Value']) { $minimum70 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "80":
                            if($minimum80 > $arrayOfSamples[$i]->vars['sieve2Value']) { $minimum80 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "100":
                            if($minimum100 > $arrayOfSamples[$i]->vars['sieve2Value']) { $minimum100 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "120":
                            if($minimum120 > $arrayOfSamples[$i]->vars['sieve2Value']) { $minimum120 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "140":
                            if($minimum140 > $arrayOfSamples[$i]->vars['sieve2Value']) { $minimum140 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "160":
                            if($minimum160 > $arrayOfSamples[$i]->vars['sieve2Value']) { $minimum160 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "170":
                            if($minimum170 > $arrayOfSamples[$i]->vars['sieve2Value']) { $minimum170 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "200":
                            if($minimum200 > $arrayOfSamples[$i]->vars['sieve2Value']) { $minimum200 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "230":
                            if($minimum230 > $arrayOfSamples[$i]->vars['sieve2Value']) { $minimum230 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "270":
                            if($minimum270 > $arrayOfSamples[$i]->vars['sieve2Value']) { $minimum270 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "325":
                            if($minimum325 > $arrayOfSamples[$i]->vars['sieve2Value']) { $minimum325 = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "PAN":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve2Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve2Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                        case "Pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve2Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve2Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve3Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve3Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve3Desc'])
                    {
                        case "20":
                            if($minimum20 > $arrayOfSamples[$i]->vars['sieve3Value']) { $minimum20 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "25":
                            if($minimum25 > $arrayOfSamples[$i]->vars['sieve3Value']) { $minimum25 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "30":
                            if($minimum30 > $arrayOfSamples[$i]->vars['sieve3Value']) { $minimum30 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "35":
                            if($minimum35 > $arrayOfSamples[$i]->vars['sieve3Value']) { $minimum35 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "40":
                            if($minimum40 > $arrayOfSamples[$i]->vars['sieve3Value']) { $minimum40 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "45":
                            if($minimum45 > $arrayOfSamples[$i]->vars['sieve3Value']) { $minimum45 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "50":
                            if($minimum50 > $arrayOfSamples[$i]->vars['sieve3Value']) { $minimum50 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "60":
                            if($minimum60 > $arrayOfSamples[$i]->vars['sieve3Value']) { $minimum60 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "70":
                            if($minimum70 > $arrayOfSamples[$i]->vars['sieve3Value']) { $minimum70 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "80":
                            if($minimum80 > $arrayOfSamples[$i]->vars['sieve3Value']) { $minimum80 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "100":
                            if($minimum100 > $arrayOfSamples[$i]->vars['sieve3Value']) { $minimum100 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "120":
                            if($minimum120 > $arrayOfSamples[$i]->vars['sieve3Value']) { $minimum120 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "140":
                            if($minimum140 > $arrayOfSamples[$i]->vars['sieve3Value']) { $minimum140 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "160":
                            if($minimum160 > $arrayOfSamples[$i]->vars['sieve3Value']) { $minimum160 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "170":
                            if($minimum170 > $arrayOfSamples[$i]->vars['sieve3Value']) { $minimum170 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "200":
                            if($minimum200 > $arrayOfSamples[$i]->vars['sieve3Value']) { $minimum200 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "230":
                            if($minimum230 > $arrayOfSamples[$i]->vars['sieve3Value']) { $minimum230 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "270":
                            if($minimum270 > $arrayOfSamples[$i]->vars['sieve3Value']) { $minimum270 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "325":
                            if($minimum325 > $arrayOfSamples[$i]->vars['sieve3Value']) { $minimum325 = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "PAN":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve3Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve3Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                        case "Pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve3Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve3Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve4Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve4Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve4Desc'])
                    {
                        case "20":
                            if($minimum20 > $arrayOfSamples[$i]->vars['sieve4Value']) { $minimum20 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "25":
                            if($minimum25 > $arrayOfSamples[$i]->vars['sieve4Value']) { $minimum25 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "30":
                            if($minimum30 > $arrayOfSamples[$i]->vars['sieve4Value']) { $minimum30 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "35":
                            if($minimum35 > $arrayOfSamples[$i]->vars['sieve4Value']) { $minimum35 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "40":
                            if($minimum40 > $arrayOfSamples[$i]->vars['sieve4Value']) { $minimum40 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "45":
                            if($minimum45 > $arrayOfSamples[$i]->vars['sieve4Value']) { $minimum45 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "50":
                            if($minimum50 > $arrayOfSamples[$i]->vars['sieve4Value']) { $minimum50 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "60":
                            if($minimum60 > $arrayOfSamples[$i]->vars['sieve4Value']) { $minimum60 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "70":
                            if($minimum70 > $arrayOfSamples[$i]->vars['sieve4Value']) { $minimum70 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "80":
                            if($minimum80 > $arrayOfSamples[$i]->vars['sieve4Value']) { $minimum80 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "100":
                            if($minimum100 > $arrayOfSamples[$i]->vars['sieve4Value']) { $minimum100 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "120":
                            if($minimum120 > $arrayOfSamples[$i]->vars['sieve4Value']) { $minimum120 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "140":
                            if($minimum140 > $arrayOfSamples[$i]->vars['sieve4Value']) { $minimum140 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "160":
                            if($minimum160 > $arrayOfSamples[$i]->vars['sieve4Value']) { $minimum160 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "170":
                            if($minimum170 > $arrayOfSamples[$i]->vars['sieve4Value']) { $minimum170 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "200":
                            if($minimum200 > $arrayOfSamples[$i]->vars['sieve4Value']) { $minimum200 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "230":
                            if($minimum230 > $arrayOfSamples[$i]->vars['sieve4Value']) { $minimum230 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "270":
                            if($minimum270 > $arrayOfSamples[$i]->vars['sieve4Value']) { $minimum270 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "325":
                            if($minimum325 > $arrayOfSamples[$i]->vars['sieve4Value']) { $minimum325 = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "PAN":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve4Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve4Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                        case "Pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve4Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve4Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve5Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve5Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve5Desc'])
                    {
                        case "20":
                            if($minimum20 > $arrayOfSamples[$i]->vars['sieve5Value']) { $minimum20 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "25":
                            if($minimum25 > $arrayOfSamples[$i]->vars['sieve5Value']) { $minimum25 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "30":
                            if($minimum30 > $arrayOfSamples[$i]->vars['sieve5Value']) { $minimum30 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "35":
                            if($minimum35 > $arrayOfSamples[$i]->vars['sieve5Value']) { $minimum35 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "40":
                            if($minimum40 > $arrayOfSamples[$i]->vars['sieve5Value']) { $minimum40 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "45":
                            if($minimum45 > $arrayOfSamples[$i]->vars['sieve5Value']) { $minimum45 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "50":
                            if($minimum50 > $arrayOfSamples[$i]->vars['sieve5Value']) { $minimum50 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "60":
                            if($minimum60 > $arrayOfSamples[$i]->vars['sieve5Value']) { $minimum60 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "70":
                            if($minimum70 > $arrayOfSamples[$i]->vars['sieve5Value']) { $minimum70 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "80":
                            if($minimum80 > $arrayOfSamples[$i]->vars['sieve5Value']) { $minimum80 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "100":
                            if($minimum100 > $arrayOfSamples[$i]->vars['sieve5Value']) { $minimum100 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "120":
                            if($minimum120 > $arrayOfSamples[$i]->vars['sieve5Value']) { $minimum120 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "140":
                            if($minimum140 > $arrayOfSamples[$i]->vars['sieve5Value']) { $minimum140 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "160":
                            if($minimum160 > $arrayOfSamples[$i]->vars['sieve5Value']) { $minimum160 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "170":
                            if($minimum170 > $arrayOfSamples[$i]->vars['sieve5Value']) { $minimum170 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "200":
                            if($minimum200 > $arrayOfSamples[$i]->vars['sieve5Value']) { $minimum200 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "230":
                            if($minimum230 > $arrayOfSamples[$i]->vars['sieve5Value']) { $minimum230 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "270":
                            if($minimum270 > $arrayOfSamples[$i]->vars['sieve5Value']) { $minimum270 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "325":
                            if($minimum325 > $arrayOfSamples[$i]->vars['sieve5Value']) { $minimum325 = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "PAN":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve5Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve5Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                        case "Pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve5Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve5Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve6Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve6Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve6Desc'])
                    {
                        case "20":
                            if($minimum20 > $arrayOfSamples[$i]->vars['sieve6Value']) { $minimum20 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "25":
                            if($minimum25 > $arrayOfSamples[$i]->vars['sieve6Value']) { $minimum25 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "30":
                            if($minimum30 > $arrayOfSamples[$i]->vars['sieve6Value']) { $minimum30 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "35":
                            if($minimum35 > $arrayOfSamples[$i]->vars['sieve6Value']) { $minimum35 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "40":
                            if($minimum40 > $arrayOfSamples[$i]->vars['sieve6Value']) { $minimum40 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "45":
                            if($minimum45 > $arrayOfSamples[$i]->vars['sieve6Value']) { $minimum45 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "50":
                            if($minimum50 > $arrayOfSamples[$i]->vars['sieve6Value']) { $minimum50 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "60":
                            if($minimum60 > $arrayOfSamples[$i]->vars['sieve6Value']) { $minimum60 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "70":
                            if($minimum70 > $arrayOfSamples[$i]->vars['sieve6Value']) { $minimum70 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "80":
                            if($minimum80 > $arrayOfSamples[$i]->vars['sieve6Value']) { $minimum80 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "100":
                            if($minimum100 > $arrayOfSamples[$i]->vars['sieve6Value']) { $minimum100 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "120":
                            if($minimum120 > $arrayOfSamples[$i]->vars['sieve6Value']) { $minimum120 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "140":
                            if($minimum140 > $arrayOfSamples[$i]->vars['sieve6Value']) { $minimum140 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "160":
                            if($minimum160 > $arrayOfSamples[$i]->vars['sieve6Value']) { $minimum160 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "170":
                            if($minimum170 > $arrayOfSamples[$i]->vars['sieve6Value']) { $minimum170 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "200":
                            if($minimum200 > $arrayOfSamples[$i]->vars['sieve6Value']) { $minimum200 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "230":
                            if($minimum230 > $arrayOfSamples[$i]->vars['sieve6Value']) { $minimum230 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "270":
                            if($minimum270 > $arrayOfSamples[$i]->vars['sieve6Value']) { $minimum270 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "325":
                            if($minimum325 > $arrayOfSamples[$i]->vars['sieve6Value']) { $minimum325 = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "PAN":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve6Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve6Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                        case "Pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve6Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve6Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve7Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve7Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve7Desc'])
                    {
                        case "20":
                            if($minimum20 > $arrayOfSamples[$i]->vars['sieve7Value']) { $minimum20 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "25":
                            if($minimum25 > $arrayOfSamples[$i]->vars['sieve7Value']) { $minimum25 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "30":
                            if($minimum30 > $arrayOfSamples[$i]->vars['sieve7Value']) { $minimum30 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "35":
                            if($minimum35 > $arrayOfSamples[$i]->vars['sieve7Value']) { $minimum35 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "40":
                            if($minimum40 > $arrayOfSamples[$i]->vars['sieve7Value']) { $minimum40 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "45":
                            if($minimum45 > $arrayOfSamples[$i]->vars['sieve7Value']) { $minimum45 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "50":
                            if($minimum50 > $arrayOfSamples[$i]->vars['sieve7Value']) { $minimum50 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "60":
                            if($minimum60 > $arrayOfSamples[$i]->vars['sieve7Value']) { $minimum60 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "70":
                            if($minimum70 > $arrayOfSamples[$i]->vars['sieve7Value']) { $minimum70 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "80":
                            if($minimum80 > $arrayOfSamples[$i]->vars['sieve7Value']) { $minimum80 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "100":
                            if($minimum100 > $arrayOfSamples[$i]->vars['sieve7Value']) { $minimum100 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "120":
                            if($minimum120 > $arrayOfSamples[$i]->vars['sieve7Value']) { $minimum120 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "140":
                            if($minimum140 > $arrayOfSamples[$i]->vars['sieve7Value']) { $minimum140 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "160":
                            if($minimum160 > $arrayOfSamples[$i]->vars['sieve7Value']) { $minimum160 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "170":
                            if($minimum170 > $arrayOfSamples[$i]->vars['sieve7Value']) { $minimum170 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "200":
                            if($minimum200 > $arrayOfSamples[$i]->vars['sieve7Value']) { $minimum200 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "230":
                            if($minimum230 > $arrayOfSamples[$i]->vars['sieve7Value']) { $minimum230 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "270":
                            if($minimum270 > $arrayOfSamples[$i]->vars['sieve7Value']) { $minimum270 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "325":
                            if($minimum325 > $arrayOfSamples[$i]->vars['sieve7Value']) { $minimum325 = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "PAN":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve7Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve7Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                        case "Pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve7Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve7Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve8Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve8Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve8Desc'])
                    {
                        case "20":
                            if($minimum20 > $arrayOfSamples[$i]->vars['sieve8Value']) { $minimum20 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "25":
                            if($minimum25 > $arrayOfSamples[$i]->vars['sieve8Value']) { $minimum25 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "30":
                            if($minimum30 > $arrayOfSamples[$i]->vars['sieve8Value']) { $minimum30 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "35":
                            if($minimum35 > $arrayOfSamples[$i]->vars['sieve8Value']) { $minimum35 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "40":
                            if($minimum40 > $arrayOfSamples[$i]->vars['sieve8Value']) { $minimum40 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "45":
                            if($minimum45 > $arrayOfSamples[$i]->vars['sieve8Value']) { $minimum45 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "50":
                            if($minimum50 > $arrayOfSamples[$i]->vars['sieve8Value']) { $minimum50 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "60":
                            if($minimum60 > $arrayOfSamples[$i]->vars['sieve8Value']) { $minimum60 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "70":
                            if($minimum70 > $arrayOfSamples[$i]->vars['sieve8Value']) { $minimum70 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "80":
                            if($minimum80 > $arrayOfSamples[$i]->vars['sieve8Value']) { $minimum80 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "100":
                            if($minimum100 > $arrayOfSamples[$i]->vars['sieve8Value']) { $minimum100 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "120":
                            if($minimum120 > $arrayOfSamples[$i]->vars['sieve8Value']) { $minimum120 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "140":
                            if($minimum140 > $arrayOfSamples[$i]->vars['sieve8Value']) { $minimum140 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "160":
                            if($minimum160 > $arrayOfSamples[$i]->vars['sieve8Value']) { $minimum160 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "170":
                            if($minimum170 > $arrayOfSamples[$i]->vars['sieve8Value']) { $minimum170 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "200":
                            if($minimum200 > $arrayOfSamples[$i]->vars['sieve8Value']) { $minimum200 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "230":
                            if($minimum230 > $arrayOfSamples[$i]->vars['sieve8Value']) { $minimum230 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "270":
                            if($minimum270 > $arrayOfSamples[$i]->vars['sieve8Value']) { $minimum270 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "325":
                            if($minimum325 > $arrayOfSamples[$i]->vars['sieve8Value']) { $minimum325 = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "PAN":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve8Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve8Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                        case "Pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve8Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve8Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve9Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve9Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve9Desc'])
                    {
                        case "20":
                            if($minimum20 > $arrayOfSamples[$i]->vars['sieve9Value']) { $minimum20 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "25":
                            if($minimum25 > $arrayOfSamples[$i]->vars['sieve9Value']) { $minimum25 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "30":
                            if($minimum30 > $arrayOfSamples[$i]->vars['sieve9Value']) { $minimum30 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "35":
                            if($minimum35 > $arrayOfSamples[$i]->vars['sieve9Value']) { $minimum35 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "40":
                            if($minimum40 > $arrayOfSamples[$i]->vars['sieve9Value']) { $minimum40 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "45":
                            if($minimum45 > $arrayOfSamples[$i]->vars['sieve9Value']) { $minimum45 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "50":
                            if($minimum50 > $arrayOfSamples[$i]->vars['sieve9Value']) { $minimum50 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "60":
                            if($minimum60 > $arrayOfSamples[$i]->vars['sieve9Value']) { $minimum60 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "70":
                            if($minimum70 > $arrayOfSamples[$i]->vars['sieve9Value']) { $minimum70 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "80":
                            if($minimum80 > $arrayOfSamples[$i]->vars['sieve9Value']) { $minimum80 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "100":
                            if($minimum100 > $arrayOfSamples[$i]->vars['sieve9Value']) { $minimum100 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "120":
                            if($minimum120 > $arrayOfSamples[$i]->vars['sieve9Value']) { $minimum120 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "140":
                            if($minimum140 > $arrayOfSamples[$i]->vars['sieve9Value']) { $minimum140 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "160":
                            if($minimum160 > $arrayOfSamples[$i]->vars['sieve9Value']) { $minimum160 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "170":
                            if($minimum170 > $arrayOfSamples[$i]->vars['sieve9Value']) { $minimum170 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "200":
                            if($minimum200 > $arrayOfSamples[$i]->vars['sieve9Value']) { $minimum200 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "230":
                            if($minimum230 > $arrayOfSamples[$i]->vars['sieve9Value']) { $minimum230 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "270":
                            if($minimum270 > $arrayOfSamples[$i]->vars['sieve9Value']) { $minimum270 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "325":
                            if($minimum325 > $arrayOfSamples[$i]->vars['sieve9Value']) { $minimum325 = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "PAN":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve9Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve9Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                        case "Pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve9Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve9Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve10Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve10Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve10Desc'])
                    {
                        case "20":
                            if($minimum20 > $arrayOfSamples[$i]->vars['sieve10Value']) { $minimum20 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "25":
                            if($minimum25 > $arrayOfSamples[$i]->vars['sieve10Value']) { $minimum25 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "30":
                            if($minimum30 > $arrayOfSamples[$i]->vars['sieve10Value']) { $minimum30 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "35":
                            if($minimum35 > $arrayOfSamples[$i]->vars['sieve10Value']) { $minimum35 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "40":
                            if($minimum40 > $arrayOfSamples[$i]->vars['sieve10Value']) { $minimum40 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "45":
                            if($minimum45 > $arrayOfSamples[$i]->vars['sieve10Value']) { $minimum45 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "50":
                            if($minimum50 > $arrayOfSamples[$i]->vars['sieve10Value']) { $minimum50 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "60":
                            if($minimum60 > $arrayOfSamples[$i]->vars['sieve10Value']) { $minimum60 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "70":
                            if($minimum70 > $arrayOfSamples[$i]->vars['sieve10Value']) { $minimum70 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "80":
                            if($minimum80 > $arrayOfSamples[$i]->vars['sieve10Value']) { $minimum80 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "100":
                            if($minimum100 > $arrayOfSamples[$i]->vars['sieve10Value']) { $minimum100 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "120":
                            if($minimum120 > $arrayOfSamples[$i]->vars['sieve10Value']) { $minimum120 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "140":
                            if($minimum140 > $arrayOfSamples[$i]->vars['sieve10Value']) { $minimum140 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "160":
                            if($minimum160 > $arrayOfSamples[$i]->vars['sieve10Value']) { $minimum160 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "170":
                            if($minimum170 > $arrayOfSamples[$i]->vars['sieve10Value']) { $minimum170 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "200":
                            if($minimum200 > $arrayOfSamples[$i]->vars['sieve10Value']) { $minimum200 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "230":
                            if($minimum230 > $arrayOfSamples[$i]->vars['sieve10Value']) { $minimum230 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "270":
                            if($minimum270 > $arrayOfSamples[$i]->vars['sieve10Value']) { $minimum270 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "325":
                            if($minimum325 > $arrayOfSamples[$i]->vars['sieve10Value']) { $minimum325 = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "PAN":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve10Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve10Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                        case "Pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve10Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve10Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve11Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve11Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve11Desc'])
                    {
                        case "20":
                            if($minimum20 > $arrayOfSamples[$i]->vars['sieve11Value']) { $minimum20 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "25":
                            if($minimum25 > $arrayOfSamples[$i]->vars['sieve11Value']) { $minimum25 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "30":
                            if($minimum30 > $arrayOfSamples[$i]->vars['sieve11Value']) { $minimum30 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "35":
                            if($minimum35 > $arrayOfSamples[$i]->vars['sieve11Value']) { $minimum35 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "40":
                            if($minimum40 > $arrayOfSamples[$i]->vars['sieve11Value']) { $minimum40 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "45":
                            if($minimum45 > $arrayOfSamples[$i]->vars['sieve11Value']) { $minimum45 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "50":
                            if($minimum50 > $arrayOfSamples[$i]->vars['sieve11Value']) { $minimum50 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "60":
                            if($minimum60 > $arrayOfSamples[$i]->vars['sieve11Value']) { $minimum60 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "70":
                            if($minimum70 > $arrayOfSamples[$i]->vars['sieve11Value']) { $minimum70 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "80":
                            if($minimum80 > $arrayOfSamples[$i]->vars['sieve11Value']) { $minimum80 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "100":
                            if($minimum100 > $arrayOfSamples[$i]->vars['sieve11Value']) { $minimum100 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "120":
                            if($minimum120 > $arrayOfSamples[$i]->vars['sieve11Value']) { $minimum120 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "140":
                            if($minimum140 > $arrayOfSamples[$i]->vars['sieve11Value']) { $minimum140 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "160":
                            if($minimum160 > $arrayOfSamples[$i]->vars['sieve11Value']) { $minimum160 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "170":
                            if($minimum170 > $arrayOfSamples[$i]->vars['sieve11Value']) { $minimum170 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "200":
                            if($minimum200 > $arrayOfSamples[$i]->vars['sieve11Value']) { $minimum200 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "230":
                            if($minimum230 > $arrayOfSamples[$i]->vars['sieve11Value']) { $minimum230 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "270":
                            if($minimum270 > $arrayOfSamples[$i]->vars['sieve11Value']) { $minimum270 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "325":
                            if($minimum325 > $arrayOfSamples[$i]->vars['sieve11Value']) { $minimum325 = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "PAN":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve11Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve11Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                        case "Pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve11Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve11Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve12Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve12Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve12Desc'])
                    {
                        case "20":
                            if($minimum20 > $arrayOfSamples[$i]->vars['sieve12Value']) { $minimum20 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "25":
                            if($minimum25 > $arrayOfSamples[$i]->vars['sieve12Value']) { $minimum25 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "30":
                            if($minimum30 > $arrayOfSamples[$i]->vars['sieve12Value']) { $minimum30 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "35":
                            if($minimum35 > $arrayOfSamples[$i]->vars['sieve12Value']) { $minimum35 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "40":
                            if($minimum40 > $arrayOfSamples[$i]->vars['sieve12Value']) { $minimum40 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "45":
                            if($minimum45 > $arrayOfSamples[$i]->vars['sieve12Value']) { $minimum45 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "50":
                            if($minimum50 > $arrayOfSamples[$i]->vars['sieve12Value']) { $minimum50 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "60":
                            if($minimum60 > $arrayOfSamples[$i]->vars['sieve12Value']) { $minimum60 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "70":
                            if($minimum70 > $arrayOfSamples[$i]->vars['sieve12Value']) { $minimum70 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "80":
                            if($minimum80 > $arrayOfSamples[$i]->vars['sieve12Value']) { $minimum80 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "100":
                            if($minimum100 > $arrayOfSamples[$i]->vars['sieve12Value']) { $minimum100 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "120":
                            if($minimum120 > $arrayOfSamples[$i]->vars['sieve12Value']) { $minimum120 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "140":
                            if($minimum140 > $arrayOfSamples[$i]->vars['sieve12Value']) { $minimum140 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "160":
                            if($minimum160 > $arrayOfSamples[$i]->vars['sieve12Value']) { $minimum160 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "170":
                            if($minimum170 > $arrayOfSamples[$i]->vars['sieve12Value']) { $minimum170 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "200":
                            if($minimum200 > $arrayOfSamples[$i]->vars['sieve12Value']) { $minimum200 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "230":
                            if($minimum230 > $arrayOfSamples[$i]->vars['sieve12Value']) { $minimum230 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "270":
                            if($minimum270 > $arrayOfSamples[$i]->vars['sieve12Value']) { $minimum270 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "325":
                            if($minimum325 > $arrayOfSamples[$i]->vars['sieve12Value']) { $minimum325 = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "PAN":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve12Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve12Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                        case "Pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve12Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve12Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve13Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve13Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve13Desc'])
                    {
                        case "20":
                            if($minimum20 > $arrayOfSamples[$i]->vars['sieve13Value']) { $minimum20 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "25":
                            if($minimum25 > $arrayOfSamples[$i]->vars['sieve13Value']) { $minimum25 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "30":
                            if($minimum30 > $arrayOfSamples[$i]->vars['sieve13Value']) { $minimum30 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "35":
                            if($minimum35 > $arrayOfSamples[$i]->vars['sieve13Value']) { $minimum35 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "40":
                            if($minimum40 > $arrayOfSamples[$i]->vars['sieve13Value']) { $minimum40 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "45":
                            if($minimum45 > $arrayOfSamples[$i]->vars['sieve13Value']) { $minimum45 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "50":
                            if($minimum50 > $arrayOfSamples[$i]->vars['sieve13Value']) { $minimum50 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "60":
                            if($minimum60 > $arrayOfSamples[$i]->vars['sieve13Value']) { $minimum60 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "70":
                            if($minimum70 > $arrayOfSamples[$i]->vars['sieve13Value']) { $minimum70 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "80":
                            if($minimum80 > $arrayOfSamples[$i]->vars['sieve13Value']) { $minimum80 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "100":
                            if($minimum100 > $arrayOfSamples[$i]->vars['sieve13Value']) { $minimum100 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "120":
                            if($minimum120 > $arrayOfSamples[$i]->vars['sieve13Value']) { $minimum120 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "140":
                            if($minimum140 > $arrayOfSamples[$i]->vars['sieve13Value']) { $minimum140 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "160":
                            if($minimum160 > $arrayOfSamples[$i]->vars['sieve13Value']) { $minimum160 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "170":
                            if($minimum170 > $arrayOfSamples[$i]->vars['sieve13Value']) { $minimum170 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "200":
                            if($minimum200 > $arrayOfSamples[$i]->vars['sieve13Value']) { $minimum200 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "230":
                            if($minimum230 > $arrayOfSamples[$i]->vars['sieve13Value']) { $minimum230 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "270":
                            if($minimum270 > $arrayOfSamples[$i]->vars['sieve13Value']) { $minimum270 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "325":
                            if($minimum325 > $arrayOfSamples[$i]->vars['sieve13Value']) { $minimum325 = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "PAN":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve13Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve13Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                        case "Pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve13Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve13Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve14Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve14Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve14Desc'])
                    {
                        case "20":
                            if($minimum20 > $arrayOfSamples[$i]->vars['sieve14Value']) { $minimum20 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "25":
                            if($minimum25 > $arrayOfSamples[$i]->vars['sieve14Value']) { $minimum25 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "30":
                            if($minimum30 > $arrayOfSamples[$i]->vars['sieve14Value']) { $minimum30 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "35":
                            if($minimum35 > $arrayOfSamples[$i]->vars['sieve14Value']) { $minimum35 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "40":
                            if($minimum40 > $arrayOfSamples[$i]->vars['sieve14Value']) { $minimum40 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "45":
                            if($minimum45 > $arrayOfSamples[$i]->vars['sieve14Value']) { $minimum45 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "50":
                            if($minimum50 > $arrayOfSamples[$i]->vars['sieve14Value']) { $minimum50 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "60":
                            if($minimum60 > $arrayOfSamples[$i]->vars['sieve14Value']) { $minimum60 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "70":
                            if($minimum70 > $arrayOfSamples[$i]->vars['sieve14Value']) { $minimum70 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "80":
                            if($minimum80 > $arrayOfSamples[$i]->vars['sieve14Value']) { $minimum80 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "100":
                            if($minimum100 > $arrayOfSamples[$i]->vars['sieve14Value']) { $minimum100 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "120":
                            if($minimum120 > $arrayOfSamples[$i]->vars['sieve14Value']) { $minimum120 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "140":
                            if($minimum140 > $arrayOfSamples[$i]->vars['sieve14Value']) { $minimum140 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "160":
                            if($minimum160 > $arrayOfSamples[$i]->vars['sieve14Value']) { $minimum160 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "170":
                            if($minimum170 > $arrayOfSamples[$i]->vars['sieve14Value']) { $minimum170 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "200":
                            if($minimum200 > $arrayOfSamples[$i]->vars['sieve14Value']) { $minimum200 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "230":
                            if($minimum230 > $arrayOfSamples[$i]->vars['sieve14Value']) { $minimum230 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "270":
                            if($minimum270 > $arrayOfSamples[$i]->vars['sieve14Value']) { $minimum270 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "325":
                            if($minimum325 > $arrayOfSamples[$i]->vars['sieve14Value']) { $minimum325 = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "PAN":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve14Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve14Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                        case "Pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve14Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve14Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve15Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve15Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve15Desc'])
                    {
                        case "20":
                            if($minimum20 > $arrayOfSamples[$i]->vars['sieve15Value']) { $minimum20 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "25":
                            if($minimum25 > $arrayOfSamples[$i]->vars['sieve15Value']) { $minimum25 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "30":
                            if($minimum30 > $arrayOfSamples[$i]->vars['sieve15Value']) { $minimum30 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "35":
                            if($minimum35 > $arrayOfSamples[$i]->vars['sieve15Value']) { $minimum35 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "40":
                            if($minimum40 > $arrayOfSamples[$i]->vars['sieve15Value']) { $minimum40 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "45":
                            if($minimum45 > $arrayOfSamples[$i]->vars['sieve15Value']) { $minimum45 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "50":
                            if($minimum50 > $arrayOfSamples[$i]->vars['sieve15Value']) { $minimum50 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "60":
                            if($minimum60 > $arrayOfSamples[$i]->vars['sieve15Value']) { $minimum60 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "70":
                            if($minimum70 > $arrayOfSamples[$i]->vars['sieve15Value']) { $minimum70 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "80":
                            if($minimum80 > $arrayOfSamples[$i]->vars['sieve15Value']) { $minimum80 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "100":
                            if($minimum100 > $arrayOfSamples[$i]->vars['sieve15Value']) { $minimum100 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "120":
                            if($minimum120 > $arrayOfSamples[$i]->vars['sieve15Value']) { $minimum120 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "140":
                            if($minimum140 > $arrayOfSamples[$i]->vars['sieve15Value']) { $minimum140 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "160":
                            if($minimum160 > $arrayOfSamples[$i]->vars['sieve15Value']) { $minimum160 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "170":
                            if($minimum170 > $arrayOfSamples[$i]->vars['sieve15Value']) { $minimum170 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "200":
                            if($minimum200 > $arrayOfSamples[$i]->vars['sieve15Value']) { $minimum200 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "230":
                            if($minimum230 > $arrayOfSamples[$i]->vars['sieve15Value']) { $minimum230 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "270":
                            if($minimum270 > $arrayOfSamples[$i]->vars['sieve15Value']) { $minimum270 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "325":
                            if($minimum325 > $arrayOfSamples[$i]->vars['sieve15Value']) { $minimum325 = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "PAN":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve15Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve15Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                        case "Pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve15Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve15Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve16Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve16Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve16Desc'])
                    {
                        case "20":
                            if($minimum20 > $arrayOfSamples[$i]->vars['sieve16Value']) { $minimum20 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "25":
                            if($minimum25 > $arrayOfSamples[$i]->vars['sieve16Value']) { $minimum25 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "30":
                            if($minimum30 > $arrayOfSamples[$i]->vars['sieve16Value']) { $minimum30 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "35":
                            if($minimum35 > $arrayOfSamples[$i]->vars['sieve16Value']) { $minimum35 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "40":
                            if($minimum40 > $arrayOfSamples[$i]->vars['sieve16Value']) { $minimum40 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "45":
                            if($minimum45 > $arrayOfSamples[$i]->vars['sieve16Value']) { $minimum45 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "50":
                            if($minimum50 > $arrayOfSamples[$i]->vars['sieve16Value']) { $minimum50 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "60":
                            if($minimum60 > $arrayOfSamples[$i]->vars['sieve16Value']) { $minimum60 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "70":
                            if($minimum70 > $arrayOfSamples[$i]->vars['sieve16Value']) { $minimum70 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "80":
                            if($minimum80 > $arrayOfSamples[$i]->vars['sieve16Value']) { $minimum80 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "100":
                            if($minimum100 > $arrayOfSamples[$i]->vars['sieve16Value']) { $minimum100 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "120":
                            if($minimum120 > $arrayOfSamples[$i]->vars['sieve16Value']) { $minimum120 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "140":
                            if($minimum140 > $arrayOfSamples[$i]->vars['sieve16Value']) { $minimum140 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "160":
                            if($minimum160 > $arrayOfSamples[$i]->vars['sieve16Value']) { $minimum160 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "170":
                            if($minimum170 > $arrayOfSamples[$i]->vars['sieve16Value']) { $minimum170 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "200":
                            if($minimum200 > $arrayOfSamples[$i]->vars['sieve16Value']) { $minimum200 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "230":
                            if($minimum230 > $arrayOfSamples[$i]->vars['sieve16Value']) { $minimum230 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "270":
                            if($minimum270 > $arrayOfSamples[$i]->vars['sieve16Value']) { $minimum270 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "325":
                            if($minimum325 > $arrayOfSamples[$i]->vars['sieve16Value']) { $minimum325 = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "PAN":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve16Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve16Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                        case "Pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve16Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve16Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve17Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve17Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve17Desc'])
                    {
                        case "20":
                            if($minimum20 > $arrayOfSamples[$i]->vars['sieve17Value']) { $minimum20 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "25":
                            if($minimum25 > $arrayOfSamples[$i]->vars['sieve17Value']) { $minimum25 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "30":
                            if($minimum30 > $arrayOfSamples[$i]->vars['sieve17Value']) { $minimum30 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "35":
                            if($minimum35 > $arrayOfSamples[$i]->vars['sieve17Value']) { $minimum35 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "40":
                            if($minimum40 > $arrayOfSamples[$i]->vars['sieve17Value']) { $minimum40 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "45":
                            if($minimum45 > $arrayOfSamples[$i]->vars['sieve17Value']) { $minimum45 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "50":
                            if($minimum50 > $arrayOfSamples[$i]->vars['sieve17Value']) { $minimum50 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "60":
                            if($minimum60 > $arrayOfSamples[$i]->vars['sieve17Value']) { $minimum60 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "70":
                            if($minimum70 > $arrayOfSamples[$i]->vars['sieve17Value']) { $minimum70 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "80":
                            if($minimum80 > $arrayOfSamples[$i]->vars['sieve17Value']) { $minimum80 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "100":
                            if($minimum100 > $arrayOfSamples[$i]->vars['sieve17Value']) { $minimum100 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "120":
                            if($minimum120 > $arrayOfSamples[$i]->vars['sieve17Value']) { $minimum120 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "140":
                            if($minimum140 > $arrayOfSamples[$i]->vars['sieve17Value']) { $minimum140 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "160":
                            if($minimum160 > $arrayOfSamples[$i]->vars['sieve17Value']) { $minimum160 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "170":
                            if($minimum170 > $arrayOfSamples[$i]->vars['sieve17Value']) { $minimum170 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "200":
                            if($minimum200 > $arrayOfSamples[$i]->vars['sieve17Value']) { $minimum200 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "230":
                            if($minimum230 > $arrayOfSamples[$i]->vars['sieve17Value']) { $minimum230 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "270":
                            if($minimum270 > $arrayOfSamples[$i]->vars['sieve17Value']) { $minimum270 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "325":
                            if($minimum325 > $arrayOfSamples[$i]->vars['sieve17Value']) { $minimum325 = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "PAN":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve17Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve17Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                        case "Pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve17Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve17Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty

                //check that there is a value for this sieve
                if(($arrayOfSamples[$i]->vars['sieve18Desc'] != NULL) && ($arrayOfSamples[$i]->vars['sieve18Value'] != 0))
                {
                    switch ($arrayOfSamples[$i]->vars['sieve18Desc'])
                    {
                        case "20":
                            if($minimum20 > $arrayOfSamples[$i]->vars['sieve18Value']) { $minimum20 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "25":
                            if($minimum25 > $arrayOfSamples[$i]->vars['sieve18Value']) { $minimum25 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "30":
                            if($minimum30 > $arrayOfSamples[$i]->vars['sieve18Value']) { $minimum30 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "35":
                            if($minimum35 > $arrayOfSamples[$i]->vars['sieve18Value']) { $minimum35 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "40":
                            if($minimum40 > $arrayOfSamples[$i]->vars['sieve18Value']) { $minimum40 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "45":
                            if($minimum45 > $arrayOfSamples[$i]->vars['sieve18Value']) { $minimum45 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "50":
                            if($minimum50 > $arrayOfSamples[$i]->vars['sieve18Value']) { $minimum50 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "60":
                            if($minimum60 > $arrayOfSamples[$i]->vars['sieve18Value']) { $minimum60 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "70":
                            if($minimum70 > $arrayOfSamples[$i]->vars['sieve18Value']) { $minimum70 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "80":
                            if($minimum80 > $arrayOfSamples[$i]->vars['sieve18Value']) { $minimum80 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "100":
                            if($minimum100 > $arrayOfSamples[$i]->vars['sieve18Value']) { $minimum100 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "120":
                            if($minimum120 > $arrayOfSamples[$i]->vars['sieve18Value']) { $minimum120 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "140":
                            if($minimum140 > $arrayOfSamples[$i]->vars['sieve18Value']) { $minimum140 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "160":
                            if($minimum160 > $arrayOfSamples[$i]->vars['sieve18Value']) { $minimum160 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "170":
                            if($minimum170 > $arrayOfSamples[$i]->vars['sieve18Value']) { $minimum170 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "200":
                            if($minimum200 > $arrayOfSamples[$i]->vars['sieve18Value']) { $minimum200 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "230":
                            if($minimum230 > $arrayOfSamples[$i]->vars['sieve18Value']) { $minimum230 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "270":
                            if($minimum270 > $arrayOfSamples[$i]->vars['sieve18Value']) { $minimum270 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "325":
                            if($minimum325 > $arrayOfSamples[$i]->vars['sieve18Value']) { $minimum325 = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "PAN":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve18Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve18Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                        case "Pan":
                            if($minimumPAN > $arrayOfSamples[$i]->vars['sieve18Value']) { $minimumPAN = $arrayOfSamples[$i]->vars['sieve18Value']; }
                            break;
                    } //switch
                }//if sieve value is not empty
                    //</editor-fold>
                //ADD THE RANGE AND SPECIAL CALCULATIONS

                if(($arrayOfSamples[$i]->vars['oversizePercent'] != NULL) && ($arrayOfSamples[$i]->vars['oversizePercent'] != 0))
                {
                    if($minimumOversize > $arrayOfSamples[$i]->vars['oversizePercent'])
                    {
                        $minimumOversize = $arrayOfSamples[$i]->vars['oversizePercent'];
                    }
                }

                if(($arrayOfSamples[$i]->vars['plus40'] != NULL) && ($arrayOfSamples[$i]->vars['plus40'] != 0))
                {
                    if($minimumPlus40  > $arrayOfSamples[$i]->vars['plus40'])
                    {
                        $minimumPlus40  = $arrayOfSamples[$i]->vars['plus40'];
                    }
                }

                if(($arrayOfSamples[$i]->vars['neg40Plus70'] != NULL) && ($arrayOfSamples[$i]->vars['neg40Plus70'] != 0))
                {
                    if($minimumNeg40Plus70  > $arrayOfSamples[$i]->vars['neg40Plus70'])
                    {
                        $minimumNeg40Plus70  = $arrayOfSamples[$i]->vars['neg40Plus70'];
                    }
                }

                if(($arrayOfSamples[$i]->vars['neg60Plus70'] != NULL) && ($arrayOfSamples[$i]->vars['neg60Plus70'] != 0))
                {
                    if($minimumNeg60Plus70  > $arrayOfSamples[$i]->vars['neg60Plus70'])
                    {
                        $minimumNeg60Plus70  = $arrayOfSamples[$i]->vars['neg60Plus70'];
                    }
                }

                if(($arrayOfSamples[$i]->vars['neg70Plus140'] != NULL) && ($arrayOfSamples[$i]->vars['neg70Plus140'] != 0))
                {
                    if($minimumNeg70Plus140 > $arrayOfSamples[$i]->vars['neg70Plus140'])
                    {
                        $minimumNeg70Plus140 = $arrayOfSamples[$i]->vars['neg70Plus140'];
                    }
                }

                if(($arrayOfSamples[$i]->vars['neg50Plus140'] != NULL) && ($arrayOfSamples[$i]->vars['neg50Plus140'] != 0))
                {
                    if($minimumNeg50Plus140  > $arrayOfSamples[$i]->vars['neg50Plus140'])
                    {
                        $minimumNeg50Plus140  = $arrayOfSamples[$i]->vars['neg50Plus140'];
                    }
                }

                if(($arrayOfSamples[$i]->vars['nearSize'] != NULL) && ($arrayOfSamples[$i]->vars['nearSize'] != 0))
                {
                    if($minimumNearSize  > $arrayOfSamples[$i]->vars['nearSize'])
                    {
                        $minimumNearSize  = $arrayOfSamples[$i]->vars['nearSize'];
                    }
                }

                if(($arrayOfSamples[$i]->vars['neg140Plus325'] != NULL) && ($arrayOfSamples[$i]->vars['neg140Plus325'] != 0))
                {
                    if($minimumNeg140Plus325  > $arrayOfSamples[$i]->vars['neg140Plus325'])
                    {
                        $minimumNeg140Plus325  = $arrayOfSamples[$i]->vars['neg140Plus325'];
                    }
                }

                if(($arrayOfSamples[$i]->vars['neg140'] != NULL) && ($arrayOfSamples[$i]->vars['neg140'] != 0))
                {
                    if($minimumNeg140 > $arrayOfSamples[$i]->vars['neg140'])
                    {
                        $minimumNeg140 = $arrayOfSamples[$i]->vars['neg140'];
                    }
                }


                if(($arrayOfSamples[$i]->vars['moisture_rate'] != NULL) && ($arrayOfSamples[$i]->vars['moisture_rate'] != 0))
                {
                    if($minimumMoistureRate > $arrayOfSamples[$i]->vars['moisture_rate'])
                    {
                        $minimumMoistureRate = $arrayOfSamples[$i]->vars['moisture_rate'];
                    }
                }

                if(($arrayOfSamples[$i]->vars['percentSolids'] != NULL) && ($arrayOfSamples[$i]->vars['percentSolids'] != 0))
                {
                    if($minimumPercentSolids > $arrayOfSamples[$i]->vars['percentSolids'])
                    {
                        $minimumPercentSolids = $arrayOfSamples[$i]->vars['percentSolids'];
                    }
                }

                if(($arrayOfSamples[$i]->vars['stph'] != NULL) && ($arrayOfSamples[$i]->vars['stph'] != 0))
                {
                    if($minimumSTPH > $arrayOfSamples[$i]->vars['stph'])
                    {
                        $minimumSTPH = $arrayOfSamples[$i]->vars['stph'];
                    }
                }

                if(($arrayOfSamples[$i]->vars['turbidity'] != NULL) && ($arrayOfSamples[$i]->vars['turbidity'] != 0))
                {
                    if($minimumTurbidity > $arrayOfSamples[$i]->vars['turbidity'])
                    {
                        $minimumTurbidity = $arrayOfSamples[$i]->vars['turbidity'];
                    }
                }

                if(($arrayOfSamples[$i]->vars['recoveryPlusSeventy'] != NULL) && ($arrayOfSamples[$i]->vars['recoveryPlusSeventy'] != 0))
                {
                    if($minimumPlusSeventyRecovery > $arrayOfSamples[$i]->vars['recoveryPlusSeventy'])
                    {
                        $minimumPlusSeventyRecovery = $arrayOfSamples[$i]->vars['recoveryPlusSeventy'];
                    }
                }

                if(($arrayOfSamples[$i]->vars['recoveryPlusOneForty'] != NULL) && ($arrayOfSamples[$i]->vars['recoveryPlusOneForty'] != 0))
                {
                    if($minimumPlusOneFortyRecovery > $arrayOfSamples[$i]->vars['recoveryPlusOneForty'])
                    {
                        $minimumPlusOneFortyRecovery = $arrayOfSamples[$i]->vars['recoveryPlusOneForty'];
                    }
                }

            }//if sample is complete and active

            $arrayOfMinimumPercentages[0] = $minimum20; //20
            $arrayOfMinimumPercentages[1] = $minimum25; //25
            $arrayOfMinimumPercentages[2] = $minimum30; //30
            $arrayOfMinimumPercentages[3] = $minimum35; //35
            $arrayOfMinimumPercentages[4] = $minimum40; //40
            $arrayOfMinimumPercentages[5] = $minimum45; //45
            $arrayOfMinimumPercentages[6] = $minimum50; //50
            $arrayOfMinimumPercentages[7] = $minimum60; //60
            $arrayOfMinimumPercentages[8] = $minimum70; //70
            $arrayOfMinimumPercentages[9] = $minimum80; //80
            $arrayOfMinimumPercentages[10] = $minimum100; //100
            $arrayOfMinimumPercentages[11] = $minimum120; //120
            $arrayOfMinimumPercentages[12] = $minimum140; //140
            $arrayOfMinimumPercentages[13] = $minimum160; //160
            $arrayOfMinimumPercentages[14] = $minimum170; //170
            $arrayOfMinimumPercentages[15] = $minimum200; //200
            $arrayOfMinimumPercentages[16] = $minimum230; //230
            $arrayOfMinimumPercentages[17] = $minimum270; //270
            $arrayOfMinimumPercentages[18] = $minimum325; //325
            $arrayOfMinimumPercentages[19] = $minimumPAN; //PAN

            $arrayOfMinimumPercentages[20] = $minimumOversize; // +10 (OS)
            $arrayOfMinimumPercentages[21] = $minimumPlus40; //-10+40
            $arrayOfMinimumPercentages[22] = $minimumNeg40Plus70; //-40+70
            $arrayOfMinimumPercentages[23] = $minimumNeg60Plus70; //-60+70
            $arrayOfMinimumPercentages[24] = $minimumNeg70Plus140; //-70 +140
            $arrayOfMinimumPercentages[31] = $minimumNeg50Plus140; //-50+140
            $arrayOfMinimumPercentages[32] = $minimumNearSize; //Near Size
            $arrayOfMinimumPercentages[33] = $minimumNeg140Plus325; // -140+325
            $arrayOfMinimumPercentages[34] = $minimumNeg140; //-140

            $arrayOfMinimumPercentages[25] = $minimumMoistureRate;
            $arrayOfMinimumPercentages[26] = $minimumPercentSolids;
            $arrayOfMinimumPercentages[27] = $minimumSTPH;
            $arrayOfMinimumPercentages[28] = $minimumTurbidity;
            $arrayOfMinimumPercentages[29] = $minimumPlusSeventyRecovery;
            $arrayOfMinimumPercentages[30] = $minimumPlusOneFortyRecovery;

        } //loop

    } //try
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error calculating averages of sample array.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $arrayOfMinimumPercentages;
}


/*******************************************************************************
 * Function Name: get30DayPercentAverages($argLocation)
 * Description:
 * This function will:
 * Accept a parameter with a location ID #.
 * Return an array of objects containing averages of sample final percentages.
 * NOTE: this
 *******************************************************************************/
function get30DayPercentAverages($argLocation)
{

    $errorMessage = "qcfunctions.php - get30DayPercentAverages() ";
    $arrayOfTotalValues = NULL;
    $arrayOfAverageValues = NULL;
    $outputArray = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    $dateToday = date('Y-m-d', strtotime('today'));
    $date30DaysAgo = date('Y-m-d', strtotime('-30 days'));

    $arrayOfAveragePercentages = getDateRangePercentAverages($argLocation, $date30DaysAgo, $dateToday);

    return $arrayOfAveragePercentages;
}


/*******************************************************************************
 * Function Name: get30DayPercentStandardDeviations($argLocation)
 * Description:
 * This function will:
 * Accept a parameter with a location ID #.
 * Return an array of objects containing standard deviations sample final percentages.
 *******************************************************************************/
function get30DayPercentStandardDeviations($argLocation)
{
    //echo "getting 30 day standard deviations<br/>";
    $errorMessage = "qcfunctions.php - get30DayPercentStandardDeviations() ";
    $arrayOfTotalValues = NULL;
    $arrayOfAverageValues = NULL;
    $outputArray = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    $dateToday = date('Y-m-d', strtotime('today'));
    $date30DaysAgo = date('Y-m-d', strtotime('-30 days'));

    $arrayOfDeviationValues = getDateRangePercentStandardDeviations($argLocation, $date30DaysAgo, $dateToday);


    return $arrayOfDeviationValues;
}


/*******************************************************************************
 * Function Name: get30DayPercentMax($argLocation)
 * Description:
 * This function will:
 * Accept a parameter with a location ID #.
 * Return an array of objects containing maximums of sample final percentages.
 *******************************************************************************/
function get30DayPercentMax($argLocation)
{

    $errorMessage = "qcfunctions.php -  get30DayPercentMax() ";
    $arrayOfMaxValues = NULL;
    $outputArray = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    $dateToday = date('Y-m-d', strtotime('today'));
    $date30DaysAgo = date('Y-m-d', strtotime('-30 days'));

    $arrayOfMaxValues = getDateRangePercentMax($argLocation, $date30DaysAgo, $dateToday);

    return $arrayOfMaxValues;
}


/*******************************************************************************
 * Function Name: get30DayPercentMin($argLocation)
 * Description:
 * This function will:
 * Accept a parameter with a location ID #.
 * Return an array of objects containing maximums of sample final percentages.
 *******************************************************************************/
function get30DayPercentMin($argLocation)
{

    $errorMessage = "qcfunctions.php -  get30DayPercentMin() ";
    $arrayOfMinValues = NULL;
    $outputArray = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    $dateToday = date('Y-m-d', strtotime('today'));
    $date30DaysAgo = date('Y-m-d', strtotime('-30 days'));

    $arrayOfMaxValues = getDateRangePercentMin($argLocation, $date30DaysAgo, $dateToday);

    return $arrayOfMinValues;
}


/*******************************************************************************
 * Function Name: sampleGroupIDGetBySampleID($sampleID)
 * Description:
 * This function will:
 * Returns the group ID value for a given sample ID.
 * If the sample ID is not in the table, then a null value will be returned.
 *******************************************************************************/
function sampleGroupIDGetBySampleID($sampleID)
{
    $errorMessage = "qcfunctions.php - sampleGroupIDGetBySampleID() ";
    $groupID = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        $sql = "CALL sp_gb_qc_SampleGroupGetBySample(" . $sampleID . ");";

        $result =  $mySQLConnectionLocal->query($sql);

        while($row = $result->fetch_assoc())
        {
            $groupID = $row['group_id'];
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for group ID by sample ID.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $groupID;
}


/*******************************************************************************
 * Function Name: sampleGroupMaxGet()
 * Description:
 * This function will:
 * Return the max group ID value.
 *******************************************************************************/
function sampleGroupMaxGet()
{
    $errorMessage = "qcfunctions.php - sampleGroupMaxGet() ";
    $groupID = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        $sql = "CALL sp_gb_qc_SampleGroupMaxGet();";

        $result =  $mySQLConnectionLocal->query($sql);

        while($row = $result->fetch_assoc())
        {
            $groupID = $row['MAX(group_id)'];
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for group ID by sample ID.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            //$error = $e->getMessage();
            //echo $error;
        }
    }

    return $groupID;
}


/*******************************************************************************
 * Function Name: sampleGroupInsert($groupID, $sampleID)
 * Description:
 * This function will insert a new record into the XX_qc_sample_groups table.
 *******************************************************************************/
function sampleGroupInsert($groupID, $sampleID)
{
    $result = 1;
    $errorMessage = "gb_qcfunctions.php - sampleGroupInsert() ";
    $debugging = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        $sql = "CALL sp_gb_qc_SampleGroupInsert($groupID, $sampleID)";

        $result = mysqli_query($mySQLConnectionLocal,$sql); //insert the record

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error inserting a sample group record into MySQL.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            $error = $e->getMessage();
            echo $error;
        }
        $result = 0;
    }

    return $result;
}


/*******************************************************************************
 * Function Name: sampleIDsGetByGroupID($groupID)
 * Description:
 * This function will:
 * Take a sample group ID number as a parameter
 * Returns an array of integers containing sample IDs for that group.
 *******************************************************************************/
function sampleIDsGetByGroupID($groupID)
{
    $errorMessage = "qcfunctions.php - sampleIDsGetByGroupID() ";
    $sampleIDArray = NULL;
    $result = 0;
    $sql = 0;
    $row = 0;

    try
    {
        $mySQLConnectionLocal = connectToMySQLQC(); //connect to the database

        $sql = "CALL sp_gb_qc_SampleIDsGetByGroupID(" . $groupID . ")";
        $result =  $mySQLConnectionLocal->query($sql);

        $outputCount = 0;
        while($row = $result->fetch_assoc())
        {
            $sampleIDArray[$outputCount] = $row['sample_id'];

            $outputCount++;
        }

        disconnectFromMySQLQC($mySQLConnectionLocal);

    }
    catch (Exception $e)
    {
        $errorMessage = $errorMessage . "Error querying MySQL for a list of samples by group id.";
        sendErrorMessage($debugging, $errorMessage); //requires emailfunctions.php
        if($debugging == 1)
        {
            echo $errorMessage;
            $error = $e->getMessage();
            echo $error;
        }
    }

    return $sampleIDArray;
}

//====================================================================== END PHP
?>
